/*
 * Apache Fineract API Documentation
 * Apache Fineract is a secure, multi-tenanted microfinance platform. <br />              The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The reference app [  https://demo.openmf.org  ] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation.              <br/>The API                 is organized around REST [ https://en.wikipedia.org/wiki/Representational_state_transfer ]               <br/> Find out more about Apache Fineract on [ https://demo.openmf.org/api-docs/apiLive.htm#top ]              <br/> You can Try The API From Your Browser itself at [ https://demo.openmf.org/api-docs/apiLive.htm#interact ]              <br/> The Generic Options are available at [ https://demo.openmf.org/api-docs/apiLive.htm#genopts ]              <br/> Find out more about Updating Dates and Numbers at [ https://demo.openmf.org/api-docs/apiLive.htm#dates_and_numbers ]              <br/> For the Authentication and the Basic of HTTP and HTTPS refer [ https://demo.openmf.org/api-docs/apiLive.htm#authentication_overview ]              <br/> Check about ERROR codes at [ https://demo.openmf.org/api-docs/apiLive.htm#errors ]               <br/> <br/> Please refer to the old documentation for any documentation queries [ https://demo.openmf.org/api-docs/apiLive.htm ]              <br/>             ______________________________________________________________________________________________________________________________          
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.MonetaryCurrency;
import io.swagger.client.model.Money;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * LoanProductRelatedDetail
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-07-17T20:34:25.795+01:00")
public class LoanProductRelatedDetail {
  @SerializedName("currency")
  private MonetaryCurrency currency = null;

  @SerializedName("principal")
  private Money principal = null;

  @SerializedName("nominalInterestRatePerPeriod")
  private BigDecimal nominalInterestRatePerPeriod = null;

  /**
   * Gets or Sets interestPeriodFrequencyType
   */
  @JsonAdapter(InterestPeriodFrequencyTypeEnum.Adapter.class)
  public enum InterestPeriodFrequencyTypeEnum {
    DAYS("DAYS"),
    
    WEEKS("WEEKS"),
    
    MONTHS("MONTHS"),
    
    YEARS("YEARS"),
    
    WHOLE_TERM("WHOLE_TERM"),
    
    INVALID("INVALID");

    private String value;

    InterestPeriodFrequencyTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InterestPeriodFrequencyTypeEnum fromValue(String text) {
      for (InterestPeriodFrequencyTypeEnum b : InterestPeriodFrequencyTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<InterestPeriodFrequencyTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InterestPeriodFrequencyTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InterestPeriodFrequencyTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return InterestPeriodFrequencyTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("interestPeriodFrequencyType")
  private InterestPeriodFrequencyTypeEnum interestPeriodFrequencyType = null;

  @SerializedName("annualNominalInterestRate")
  private BigDecimal annualNominalInterestRate = null;

  /**
   * Gets or Sets interestMethod
   */
  @JsonAdapter(InterestMethodEnum.Adapter.class)
  public enum InterestMethodEnum {
    DECLINING_BALANCE("DECLINING_BALANCE"),
    
    FLAT("FLAT"),
    
    INVALID("INVALID");

    private String value;

    InterestMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InterestMethodEnum fromValue(String text) {
      for (InterestMethodEnum b : InterestMethodEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<InterestMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InterestMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InterestMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return InterestMethodEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("interestMethod")
  private InterestMethodEnum interestMethod = null;

  /**
   * Gets or Sets interestCalculationPeriodMethod
   */
  @JsonAdapter(InterestCalculationPeriodMethodEnum.Adapter.class)
  public enum InterestCalculationPeriodMethodEnum {
    DAILY("DAILY"),
    
    SAME_AS_REPAYMENT_PERIOD("SAME_AS_REPAYMENT_PERIOD"),
    
    INVALID("INVALID");

    private String value;

    InterestCalculationPeriodMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InterestCalculationPeriodMethodEnum fromValue(String text) {
      for (InterestCalculationPeriodMethodEnum b : InterestCalculationPeriodMethodEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<InterestCalculationPeriodMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InterestCalculationPeriodMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InterestCalculationPeriodMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return InterestCalculationPeriodMethodEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("interestCalculationPeriodMethod")
  private InterestCalculationPeriodMethodEnum interestCalculationPeriodMethod = null;

  @SerializedName("allowPartialPeriodInterestCalcualtion")
  private Boolean allowPartialPeriodInterestCalcualtion = null;

  @SerializedName("repayEvery")
  private Integer repayEvery = null;

  /**
   * Gets or Sets repaymentPeriodFrequencyType
   */
  @JsonAdapter(RepaymentPeriodFrequencyTypeEnum.Adapter.class)
  public enum RepaymentPeriodFrequencyTypeEnum {
    DAYS("DAYS"),
    
    WEEKS("WEEKS"),
    
    MONTHS("MONTHS"),
    
    YEARS("YEARS"),
    
    WHOLE_TERM("WHOLE_TERM"),
    
    INVALID("INVALID");

    private String value;

    RepaymentPeriodFrequencyTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RepaymentPeriodFrequencyTypeEnum fromValue(String text) {
      for (RepaymentPeriodFrequencyTypeEnum b : RepaymentPeriodFrequencyTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<RepaymentPeriodFrequencyTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RepaymentPeriodFrequencyTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RepaymentPeriodFrequencyTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RepaymentPeriodFrequencyTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("repaymentPeriodFrequencyType")
  private RepaymentPeriodFrequencyTypeEnum repaymentPeriodFrequencyType = null;

  @SerializedName("numberOfRepayments")
  private Integer numberOfRepayments = null;

  @SerializedName("graceOnPrincipalPayment")
  private Integer graceOnPrincipalPayment = null;

  @SerializedName("graceOnInterestPayment")
  private Integer graceOnInterestPayment = null;

  /**
   * Gets or Sets amortizationMethod
   */
  @JsonAdapter(AmortizationMethodEnum.Adapter.class)
  public enum AmortizationMethodEnum {
    EQUAL_PRINCIPAL("EQUAL_PRINCIPAL"),
    
    EQUAL_INSTALLMENTS("EQUAL_INSTALLMENTS"),
    
    INVALID("INVALID");

    private String value;

    AmortizationMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AmortizationMethodEnum fromValue(String text) {
      for (AmortizationMethodEnum b : AmortizationMethodEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AmortizationMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AmortizationMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AmortizationMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AmortizationMethodEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("amortizationMethod")
  private AmortizationMethodEnum amortizationMethod = null;

  @SerializedName("inArrearsTolerance")
  private Money inArrearsTolerance = null;

  @SerializedName("graceOnArrearsAgeing")
  private Integer graceOnArrearsAgeing = null;

  @SerializedName("interestRecalculationEnabled")
  private Boolean interestRecalculationEnabled = null;

  @SerializedName("equalAmortization")
  private Boolean equalAmortization = null;

  @SerializedName("graceOnDueDate")
  private Integer graceOnDueDate = null;

  @SerializedName("arrearsTolerance")
  private BigDecimal arrearsTolerance = null;

  public LoanProductRelatedDetail currency(MonetaryCurrency currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @ApiModelProperty(value = "")
  public MonetaryCurrency getCurrency() {
    return currency;
  }

  public void setCurrency(MonetaryCurrency currency) {
    this.currency = currency;
  }

  public LoanProductRelatedDetail principal(Money principal) {
    this.principal = principal;
    return this;
  }

   /**
   * Get principal
   * @return principal
  **/
  @ApiModelProperty(value = "")
  public Money getPrincipal() {
    return principal;
  }

  public void setPrincipal(Money principal) {
    this.principal = principal;
  }

  public LoanProductRelatedDetail nominalInterestRatePerPeriod(BigDecimal nominalInterestRatePerPeriod) {
    this.nominalInterestRatePerPeriod = nominalInterestRatePerPeriod;
    return this;
  }

   /**
   * Get nominalInterestRatePerPeriod
   * @return nominalInterestRatePerPeriod
  **/
  @ApiModelProperty(value = "")
  public BigDecimal getNominalInterestRatePerPeriod() {
    return nominalInterestRatePerPeriod;
  }

  public void setNominalInterestRatePerPeriod(BigDecimal nominalInterestRatePerPeriod) {
    this.nominalInterestRatePerPeriod = nominalInterestRatePerPeriod;
  }

  public LoanProductRelatedDetail interestPeriodFrequencyType(InterestPeriodFrequencyTypeEnum interestPeriodFrequencyType) {
    this.interestPeriodFrequencyType = interestPeriodFrequencyType;
    return this;
  }

   /**
   * Get interestPeriodFrequencyType
   * @return interestPeriodFrequencyType
  **/
  @ApiModelProperty(value = "")
  public InterestPeriodFrequencyTypeEnum getInterestPeriodFrequencyType() {
    return interestPeriodFrequencyType;
  }

  public void setInterestPeriodFrequencyType(InterestPeriodFrequencyTypeEnum interestPeriodFrequencyType) {
    this.interestPeriodFrequencyType = interestPeriodFrequencyType;
  }

  public LoanProductRelatedDetail annualNominalInterestRate(BigDecimal annualNominalInterestRate) {
    this.annualNominalInterestRate = annualNominalInterestRate;
    return this;
  }

   /**
   * Get annualNominalInterestRate
   * @return annualNominalInterestRate
  **/
  @ApiModelProperty(value = "")
  public BigDecimal getAnnualNominalInterestRate() {
    return annualNominalInterestRate;
  }

  public void setAnnualNominalInterestRate(BigDecimal annualNominalInterestRate) {
    this.annualNominalInterestRate = annualNominalInterestRate;
  }

  public LoanProductRelatedDetail interestMethod(InterestMethodEnum interestMethod) {
    this.interestMethod = interestMethod;
    return this;
  }

   /**
   * Get interestMethod
   * @return interestMethod
  **/
  @ApiModelProperty(value = "")
  public InterestMethodEnum getInterestMethod() {
    return interestMethod;
  }

  public void setInterestMethod(InterestMethodEnum interestMethod) {
    this.interestMethod = interestMethod;
  }

  public LoanProductRelatedDetail interestCalculationPeriodMethod(InterestCalculationPeriodMethodEnum interestCalculationPeriodMethod) {
    this.interestCalculationPeriodMethod = interestCalculationPeriodMethod;
    return this;
  }

   /**
   * Get interestCalculationPeriodMethod
   * @return interestCalculationPeriodMethod
  **/
  @ApiModelProperty(value = "")
  public InterestCalculationPeriodMethodEnum getInterestCalculationPeriodMethod() {
    return interestCalculationPeriodMethod;
  }

  public void setInterestCalculationPeriodMethod(InterestCalculationPeriodMethodEnum interestCalculationPeriodMethod) {
    this.interestCalculationPeriodMethod = interestCalculationPeriodMethod;
  }

  public LoanProductRelatedDetail allowPartialPeriodInterestCalcualtion(Boolean allowPartialPeriodInterestCalcualtion) {
    this.allowPartialPeriodInterestCalcualtion = allowPartialPeriodInterestCalcualtion;
    return this;
  }

   /**
   * Get allowPartialPeriodInterestCalcualtion
   * @return allowPartialPeriodInterestCalcualtion
  **/
  @ApiModelProperty(value = "")
  public Boolean isAllowPartialPeriodInterestCalcualtion() {
    return allowPartialPeriodInterestCalcualtion;
  }

  public void setAllowPartialPeriodInterestCalcualtion(Boolean allowPartialPeriodInterestCalcualtion) {
    this.allowPartialPeriodInterestCalcualtion = allowPartialPeriodInterestCalcualtion;
  }

  public LoanProductRelatedDetail repayEvery(Integer repayEvery) {
    this.repayEvery = repayEvery;
    return this;
  }

   /**
   * Get repayEvery
   * @return repayEvery
  **/
  @ApiModelProperty(value = "")
  public Integer getRepayEvery() {
    return repayEvery;
  }

  public void setRepayEvery(Integer repayEvery) {
    this.repayEvery = repayEvery;
  }

  public LoanProductRelatedDetail repaymentPeriodFrequencyType(RepaymentPeriodFrequencyTypeEnum repaymentPeriodFrequencyType) {
    this.repaymentPeriodFrequencyType = repaymentPeriodFrequencyType;
    return this;
  }

   /**
   * Get repaymentPeriodFrequencyType
   * @return repaymentPeriodFrequencyType
  **/
  @ApiModelProperty(value = "")
  public RepaymentPeriodFrequencyTypeEnum getRepaymentPeriodFrequencyType() {
    return repaymentPeriodFrequencyType;
  }

  public void setRepaymentPeriodFrequencyType(RepaymentPeriodFrequencyTypeEnum repaymentPeriodFrequencyType) {
    this.repaymentPeriodFrequencyType = repaymentPeriodFrequencyType;
  }

  public LoanProductRelatedDetail numberOfRepayments(Integer numberOfRepayments) {
    this.numberOfRepayments = numberOfRepayments;
    return this;
  }

   /**
   * Get numberOfRepayments
   * @return numberOfRepayments
  **/
  @ApiModelProperty(value = "")
  public Integer getNumberOfRepayments() {
    return numberOfRepayments;
  }

  public void setNumberOfRepayments(Integer numberOfRepayments) {
    this.numberOfRepayments = numberOfRepayments;
  }

  public LoanProductRelatedDetail graceOnPrincipalPayment(Integer graceOnPrincipalPayment) {
    this.graceOnPrincipalPayment = graceOnPrincipalPayment;
    return this;
  }

   /**
   * Get graceOnPrincipalPayment
   * @return graceOnPrincipalPayment
  **/
  @ApiModelProperty(value = "")
  public Integer getGraceOnPrincipalPayment() {
    return graceOnPrincipalPayment;
  }

  public void setGraceOnPrincipalPayment(Integer graceOnPrincipalPayment) {
    this.graceOnPrincipalPayment = graceOnPrincipalPayment;
  }

  public LoanProductRelatedDetail graceOnInterestPayment(Integer graceOnInterestPayment) {
    this.graceOnInterestPayment = graceOnInterestPayment;
    return this;
  }

   /**
   * Get graceOnInterestPayment
   * @return graceOnInterestPayment
  **/
  @ApiModelProperty(value = "")
  public Integer getGraceOnInterestPayment() {
    return graceOnInterestPayment;
  }

  public void setGraceOnInterestPayment(Integer graceOnInterestPayment) {
    this.graceOnInterestPayment = graceOnInterestPayment;
  }

  public LoanProductRelatedDetail amortizationMethod(AmortizationMethodEnum amortizationMethod) {
    this.amortizationMethod = amortizationMethod;
    return this;
  }

   /**
   * Get amortizationMethod
   * @return amortizationMethod
  **/
  @ApiModelProperty(value = "")
  public AmortizationMethodEnum getAmortizationMethod() {
    return amortizationMethod;
  }

  public void setAmortizationMethod(AmortizationMethodEnum amortizationMethod) {
    this.amortizationMethod = amortizationMethod;
  }

  public LoanProductRelatedDetail inArrearsTolerance(Money inArrearsTolerance) {
    this.inArrearsTolerance = inArrearsTolerance;
    return this;
  }

   /**
   * Get inArrearsTolerance
   * @return inArrearsTolerance
  **/
  @ApiModelProperty(value = "")
  public Money getInArrearsTolerance() {
    return inArrearsTolerance;
  }

  public void setInArrearsTolerance(Money inArrearsTolerance) {
    this.inArrearsTolerance = inArrearsTolerance;
  }

  public LoanProductRelatedDetail graceOnArrearsAgeing(Integer graceOnArrearsAgeing) {
    this.graceOnArrearsAgeing = graceOnArrearsAgeing;
    return this;
  }

   /**
   * Get graceOnArrearsAgeing
   * @return graceOnArrearsAgeing
  **/
  @ApiModelProperty(value = "")
  public Integer getGraceOnArrearsAgeing() {
    return graceOnArrearsAgeing;
  }

  public void setGraceOnArrearsAgeing(Integer graceOnArrearsAgeing) {
    this.graceOnArrearsAgeing = graceOnArrearsAgeing;
  }

  public LoanProductRelatedDetail interestRecalculationEnabled(Boolean interestRecalculationEnabled) {
    this.interestRecalculationEnabled = interestRecalculationEnabled;
    return this;
  }

   /**
   * Get interestRecalculationEnabled
   * @return interestRecalculationEnabled
  **/
  @ApiModelProperty(value = "")
  public Boolean isInterestRecalculationEnabled() {
    return interestRecalculationEnabled;
  }

  public void setInterestRecalculationEnabled(Boolean interestRecalculationEnabled) {
    this.interestRecalculationEnabled = interestRecalculationEnabled;
  }

  public LoanProductRelatedDetail equalAmortization(Boolean equalAmortization) {
    this.equalAmortization = equalAmortization;
    return this;
  }

   /**
   * Get equalAmortization
   * @return equalAmortization
  **/
  @ApiModelProperty(value = "")
  public Boolean isEqualAmortization() {
    return equalAmortization;
  }

  public void setEqualAmortization(Boolean equalAmortization) {
    this.equalAmortization = equalAmortization;
  }

  public LoanProductRelatedDetail graceOnDueDate(Integer graceOnDueDate) {
    this.graceOnDueDate = graceOnDueDate;
    return this;
  }

   /**
   * Get graceOnDueDate
   * @return graceOnDueDate
  **/
  @ApiModelProperty(value = "")
  public Integer getGraceOnDueDate() {
    return graceOnDueDate;
  }

  public void setGraceOnDueDate(Integer graceOnDueDate) {
    this.graceOnDueDate = graceOnDueDate;
  }

  public LoanProductRelatedDetail arrearsTolerance(BigDecimal arrearsTolerance) {
    this.arrearsTolerance = arrearsTolerance;
    return this;
  }

   /**
   * Get arrearsTolerance
   * @return arrearsTolerance
  **/
  @ApiModelProperty(value = "")
  public BigDecimal getArrearsTolerance() {
    return arrearsTolerance;
  }

  public void setArrearsTolerance(BigDecimal arrearsTolerance) {
    this.arrearsTolerance = arrearsTolerance;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoanProductRelatedDetail loanProductRelatedDetail = (LoanProductRelatedDetail) o;
    return Objects.equals(this.currency, loanProductRelatedDetail.currency) &&
        Objects.equals(this.principal, loanProductRelatedDetail.principal) &&
        Objects.equals(this.nominalInterestRatePerPeriod, loanProductRelatedDetail.nominalInterestRatePerPeriod) &&
        Objects.equals(this.interestPeriodFrequencyType, loanProductRelatedDetail.interestPeriodFrequencyType) &&
        Objects.equals(this.annualNominalInterestRate, loanProductRelatedDetail.annualNominalInterestRate) &&
        Objects.equals(this.interestMethod, loanProductRelatedDetail.interestMethod) &&
        Objects.equals(this.interestCalculationPeriodMethod, loanProductRelatedDetail.interestCalculationPeriodMethod) &&
        Objects.equals(this.allowPartialPeriodInterestCalcualtion, loanProductRelatedDetail.allowPartialPeriodInterestCalcualtion) &&
        Objects.equals(this.repayEvery, loanProductRelatedDetail.repayEvery) &&
        Objects.equals(this.repaymentPeriodFrequencyType, loanProductRelatedDetail.repaymentPeriodFrequencyType) &&
        Objects.equals(this.numberOfRepayments, loanProductRelatedDetail.numberOfRepayments) &&
        Objects.equals(this.graceOnPrincipalPayment, loanProductRelatedDetail.graceOnPrincipalPayment) &&
        Objects.equals(this.graceOnInterestPayment, loanProductRelatedDetail.graceOnInterestPayment) &&
        Objects.equals(this.amortizationMethod, loanProductRelatedDetail.amortizationMethod) &&
        Objects.equals(this.inArrearsTolerance, loanProductRelatedDetail.inArrearsTolerance) &&
        Objects.equals(this.graceOnArrearsAgeing, loanProductRelatedDetail.graceOnArrearsAgeing) &&
        Objects.equals(this.interestRecalculationEnabled, loanProductRelatedDetail.interestRecalculationEnabled) &&
        Objects.equals(this.equalAmortization, loanProductRelatedDetail.equalAmortization) &&
        Objects.equals(this.graceOnDueDate, loanProductRelatedDetail.graceOnDueDate) &&
        Objects.equals(this.arrearsTolerance, loanProductRelatedDetail.arrearsTolerance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currency, principal, nominalInterestRatePerPeriod, interestPeriodFrequencyType, annualNominalInterestRate, interestMethod, interestCalculationPeriodMethod, allowPartialPeriodInterestCalcualtion, repayEvery, repaymentPeriodFrequencyType, numberOfRepayments, graceOnPrincipalPayment, graceOnInterestPayment, amortizationMethod, inArrearsTolerance, graceOnArrearsAgeing, interestRecalculationEnabled, equalAmortization, graceOnDueDate, arrearsTolerance);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoanProductRelatedDetail {\n");
    
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    principal: ").append(toIndentedString(principal)).append("\n");
    sb.append("    nominalInterestRatePerPeriod: ").append(toIndentedString(nominalInterestRatePerPeriod)).append("\n");
    sb.append("    interestPeriodFrequencyType: ").append(toIndentedString(interestPeriodFrequencyType)).append("\n");
    sb.append("    annualNominalInterestRate: ").append(toIndentedString(annualNominalInterestRate)).append("\n");
    sb.append("    interestMethod: ").append(toIndentedString(interestMethod)).append("\n");
    sb.append("    interestCalculationPeriodMethod: ").append(toIndentedString(interestCalculationPeriodMethod)).append("\n");
    sb.append("    allowPartialPeriodInterestCalcualtion: ").append(toIndentedString(allowPartialPeriodInterestCalcualtion)).append("\n");
    sb.append("    repayEvery: ").append(toIndentedString(repayEvery)).append("\n");
    sb.append("    repaymentPeriodFrequencyType: ").append(toIndentedString(repaymentPeriodFrequencyType)).append("\n");
    sb.append("    numberOfRepayments: ").append(toIndentedString(numberOfRepayments)).append("\n");
    sb.append("    graceOnPrincipalPayment: ").append(toIndentedString(graceOnPrincipalPayment)).append("\n");
    sb.append("    graceOnInterestPayment: ").append(toIndentedString(graceOnInterestPayment)).append("\n");
    sb.append("    amortizationMethod: ").append(toIndentedString(amortizationMethod)).append("\n");
    sb.append("    inArrearsTolerance: ").append(toIndentedString(inArrearsTolerance)).append("\n");
    sb.append("    graceOnArrearsAgeing: ").append(toIndentedString(graceOnArrearsAgeing)).append("\n");
    sb.append("    interestRecalculationEnabled: ").append(toIndentedString(interestRecalculationEnabled)).append("\n");
    sb.append("    equalAmortization: ").append(toIndentedString(equalAmortization)).append("\n");
    sb.append("    graceOnDueDate: ").append(toIndentedString(graceOnDueDate)).append("\n");
    sb.append("    arrearsTolerance: ").append(toIndentedString(arrearsTolerance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

