/*
 * Apache Fineract API Documentation
 * Apache Fineract is a secure, multi-tenanted microfinance platform. <br />              The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The reference app [  https://demo.openmf.org  ] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation.              <br/>The API                 is organized around REST [ https://en.wikipedia.org/wiki/Representational_state_transfer ]               <br/> Find out more about Apache Fineract on [ https://demo.openmf.org/api-docs/apiLive.htm#top ]              <br/> You can Try The API From Your Browser itself at [ https://demo.openmf.org/api-docs/apiLive.htm#interact ]              <br/> The Generic Options are available at [ https://demo.openmf.org/api-docs/apiLive.htm#genopts ]              <br/> Find out more about Updating Dates and Numbers at [ https://demo.openmf.org/api-docs/apiLive.htm#dates_and_numbers ]              <br/> For the Authentication and the Basic of HTTP and HTTPS refer [ https://demo.openmf.org/api-docs/apiLive.htm#authentication_overview ]              <br/> Check about ERROR codes at [ https://demo.openmf.org/api-docs/apiLive.htm#errors ]               <br/> <br/> Please refer to the old documentation for any documentation queries [ https://demo.openmf.org/api-docs/apiLive.htm ]              <br/>             ______________________________________________________________________________________________________________________________          
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.DeleteLoansLoanIdCollateralsCollateralIdResponse;
import io.swagger.client.model.GetLoansLoanIdCollateralsResponse;
import io.swagger.client.model.GetLoansLoanIdCollateralsTemplateResponse;
import io.swagger.client.model.PostLoansLoanIdCollateralsRequest;
import io.swagger.client.model.PostLoansLoanIdCollateralsResponse;
import io.swagger.client.model.PutLoansLoanIdCollateralsCollateralIdResponse;
import io.swagger.client.model.PutLoansLoandIdCollateralsCollateralIdRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LoanCollateralApi {
    private ApiClient apiClient;

    public LoanCollateralApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LoanCollateralApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createCollateral
     * @param loanId loanId (required)
     * @param body body (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCollateralCall(Long loanId, PostLoansLoanIdCollateralsRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/loans/{loanId}/collaterals"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createCollateralValidateBeforeCall(Long loanId, PostLoansLoanIdCollateralsRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling createCollateral(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createCollateral(Async)");
        }
        

        com.squareup.okhttp.Call call = createCollateralCall(loanId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a Collateral
     * Note: Currently, Collaterals may be added only before a Loan is approved
     * @param loanId loanId (required)
     * @param body body (required)
     * @return PostLoansLoanIdCollateralsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PostLoansLoanIdCollateralsResponse createCollateral(Long loanId, PostLoansLoanIdCollateralsRequest body) throws ApiException {
        ApiResponse<PostLoansLoanIdCollateralsResponse> resp = createCollateralWithHttpInfo(loanId, body);
        return resp.getData();
    }

    /**
     * Create a Collateral
     * Note: Currently, Collaterals may be added only before a Loan is approved
     * @param loanId loanId (required)
     * @param body body (required)
     * @return ApiResponse&lt;PostLoansLoanIdCollateralsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PostLoansLoanIdCollateralsResponse> createCollateralWithHttpInfo(Long loanId, PostLoansLoanIdCollateralsRequest body) throws ApiException {
        com.squareup.okhttp.Call call = createCollateralValidateBeforeCall(loanId, body, null, null);
        Type localVarReturnType = new TypeToken<PostLoansLoanIdCollateralsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Collateral (asynchronously)
     * Note: Currently, Collaterals may be added only before a Loan is approved
     * @param loanId loanId (required)
     * @param body body (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createCollateralAsync(Long loanId, PostLoansLoanIdCollateralsRequest body, final ApiCallback<PostLoansLoanIdCollateralsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCollateralValidateBeforeCall(loanId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PostLoansLoanIdCollateralsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteCollateral
     * @param loanId loanId (required)
     * @param collateralId collateralId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCollateralCall(Long loanId, Long collateralId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/loans/{loanId}/collaterals/{collateralId}"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()))
            .replaceAll("\\{" + "collateralId" + "\\}", apiClient.escapeString(collateralId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCollateralValidateBeforeCall(Long loanId, Long collateralId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling deleteCollateral(Async)");
        }
        
        // verify the required parameter 'collateralId' is set
        if (collateralId == null) {
            throw new ApiException("Missing the required parameter 'collateralId' when calling deleteCollateral(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteCollateralCall(loanId, collateralId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Remove a Collateral
     * Note: A collateral can only be removed from Loans that are not yet approved.
     * @param loanId loanId (required)
     * @param collateralId collateralId (required)
     * @return DeleteLoansLoanIdCollateralsCollateralIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeleteLoansLoanIdCollateralsCollateralIdResponse deleteCollateral(Long loanId, Long collateralId) throws ApiException {
        ApiResponse<DeleteLoansLoanIdCollateralsCollateralIdResponse> resp = deleteCollateralWithHttpInfo(loanId, collateralId);
        return resp.getData();
    }

    /**
     * Remove a Collateral
     * Note: A collateral can only be removed from Loans that are not yet approved.
     * @param loanId loanId (required)
     * @param collateralId collateralId (required)
     * @return ApiResponse&lt;DeleteLoansLoanIdCollateralsCollateralIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeleteLoansLoanIdCollateralsCollateralIdResponse> deleteCollateralWithHttpInfo(Long loanId, Long collateralId) throws ApiException {
        com.squareup.okhttp.Call call = deleteCollateralValidateBeforeCall(loanId, collateralId, null, null);
        Type localVarReturnType = new TypeToken<DeleteLoansLoanIdCollateralsCollateralIdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Remove a Collateral (asynchronously)
     * Note: A collateral can only be removed from Loans that are not yet approved.
     * @param loanId loanId (required)
     * @param collateralId collateralId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCollateralAsync(Long loanId, Long collateralId, final ApiCallback<DeleteLoansLoanIdCollateralsCollateralIdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCollateralValidateBeforeCall(loanId, collateralId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeleteLoansLoanIdCollateralsCollateralIdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for newCollateralTemplate
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call newCollateralTemplateCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/loans/{loanId}/collaterals/template";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call newCollateralTemplateValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = newCollateralTemplateCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve Collateral Details Template
     * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists Example Request:  loans/1/collaterals/template
     * @return GetLoansLoanIdCollateralsTemplateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetLoansLoanIdCollateralsTemplateResponse newCollateralTemplate() throws ApiException {
        ApiResponse<GetLoansLoanIdCollateralsTemplateResponse> resp = newCollateralTemplateWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve Collateral Details Template
     * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists Example Request:  loans/1/collaterals/template
     * @return ApiResponse&lt;GetLoansLoanIdCollateralsTemplateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetLoansLoanIdCollateralsTemplateResponse> newCollateralTemplateWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = newCollateralTemplateValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<GetLoansLoanIdCollateralsTemplateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve Collateral Details Template (asynchronously)
     * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists Example Request:  loans/1/collaterals/template
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call newCollateralTemplateAsync(final ApiCallback<GetLoansLoanIdCollateralsTemplateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = newCollateralTemplateValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetLoansLoanIdCollateralsTemplateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveCollateralDetails
     * @param loanId loanId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveCollateralDetailsCall(Long loanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/loans/{loanId}/collaterals"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveCollateralDetailsValidateBeforeCall(Long loanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling retrieveCollateralDetails(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveCollateralDetailsCall(loanId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Loan Collaterals
     * Example Requests:  loans/1/collaterals   loans/1/collaterals?fields&#x3D;value,description
     * @param loanId loanId (required)
     * @return List&lt;GetLoansLoanIdCollateralsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<GetLoansLoanIdCollateralsResponse> retrieveCollateralDetails(Long loanId) throws ApiException {
        ApiResponse<List<GetLoansLoanIdCollateralsResponse>> resp = retrieveCollateralDetailsWithHttpInfo(loanId);
        return resp.getData();
    }

    /**
     * List Loan Collaterals
     * Example Requests:  loans/1/collaterals   loans/1/collaterals?fields&#x3D;value,description
     * @param loanId loanId (required)
     * @return ApiResponse&lt;List&lt;GetLoansLoanIdCollateralsResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<GetLoansLoanIdCollateralsResponse>> retrieveCollateralDetailsWithHttpInfo(Long loanId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveCollateralDetailsValidateBeforeCall(loanId, null, null);
        Type localVarReturnType = new TypeToken<List<GetLoansLoanIdCollateralsResponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Loan Collaterals (asynchronously)
     * Example Requests:  loans/1/collaterals   loans/1/collaterals?fields&#x3D;value,description
     * @param loanId loanId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveCollateralDetailsAsync(Long loanId, final ApiCallback<List<GetLoansLoanIdCollateralsResponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveCollateralDetailsValidateBeforeCall(loanId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<GetLoansLoanIdCollateralsResponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveCollateralDetails_0
     * @param loanId loanId (required)
     * @param collateralId collateralId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveCollateralDetails_0Call(Long loanId, Long collateralId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/loans/{loanId}/collaterals/{collateralId}"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()))
            .replaceAll("\\{" + "collateralId" + "\\}", apiClient.escapeString(collateralId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveCollateralDetails_0ValidateBeforeCall(Long loanId, Long collateralId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling retrieveCollateralDetails_0(Async)");
        }
        
        // verify the required parameter 'collateralId' is set
        if (collateralId == null) {
            throw new ApiException("Missing the required parameter 'collateralId' when calling retrieveCollateralDetails_0(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveCollateralDetails_0Call(loanId, collateralId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a Collateral
     * Example Requests:  /loans/1/collaterals/1   /loans/1/collaterals/1?fields&#x3D;value,description
     * @param loanId loanId (required)
     * @param collateralId collateralId (required)
     * @return GetLoansLoanIdCollateralsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetLoansLoanIdCollateralsResponse retrieveCollateralDetails_0(Long loanId, Long collateralId) throws ApiException {
        ApiResponse<GetLoansLoanIdCollateralsResponse> resp = retrieveCollateralDetails_0WithHttpInfo(loanId, collateralId);
        return resp.getData();
    }

    /**
     * Retrieve a Collateral
     * Example Requests:  /loans/1/collaterals/1   /loans/1/collaterals/1?fields&#x3D;value,description
     * @param loanId loanId (required)
     * @param collateralId collateralId (required)
     * @return ApiResponse&lt;GetLoansLoanIdCollateralsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetLoansLoanIdCollateralsResponse> retrieveCollateralDetails_0WithHttpInfo(Long loanId, Long collateralId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveCollateralDetails_0ValidateBeforeCall(loanId, collateralId, null, null);
        Type localVarReturnType = new TypeToken<GetLoansLoanIdCollateralsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a Collateral (asynchronously)
     * Example Requests:  /loans/1/collaterals/1   /loans/1/collaterals/1?fields&#x3D;value,description
     * @param loanId loanId (required)
     * @param collateralId collateralId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveCollateralDetails_0Async(Long loanId, Long collateralId, final ApiCallback<GetLoansLoanIdCollateralsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveCollateralDetails_0ValidateBeforeCall(loanId, collateralId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetLoansLoanIdCollateralsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateCollateral
     * @param loanId loanId (required)
     * @param collateralId collateralId (required)
     * @param body body (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCollateralCall(Long loanId, Long collateralId, PutLoansLoandIdCollateralsCollateralIdRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/loans/{loanId}/collaterals/{collateralId}"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()))
            .replaceAll("\\{" + "collateralId" + "\\}", apiClient.escapeString(collateralId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCollateralValidateBeforeCall(Long loanId, Long collateralId, PutLoansLoandIdCollateralsCollateralIdRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling updateCollateral(Async)");
        }
        
        // verify the required parameter 'collateralId' is set
        if (collateralId == null) {
            throw new ApiException("Missing the required parameter 'collateralId' when calling updateCollateral(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateCollateral(Async)");
        }
        

        com.squareup.okhttp.Call call = updateCollateralCall(loanId, collateralId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a Collateral
     * 
     * @param loanId loanId (required)
     * @param collateralId collateralId (required)
     * @param body body (required)
     * @return PutLoansLoanIdCollateralsCollateralIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PutLoansLoanIdCollateralsCollateralIdResponse updateCollateral(Long loanId, Long collateralId, PutLoansLoandIdCollateralsCollateralIdRequest body) throws ApiException {
        ApiResponse<PutLoansLoanIdCollateralsCollateralIdResponse> resp = updateCollateralWithHttpInfo(loanId, collateralId, body);
        return resp.getData();
    }

    /**
     * Update a Collateral
     * 
     * @param loanId loanId (required)
     * @param collateralId collateralId (required)
     * @param body body (required)
     * @return ApiResponse&lt;PutLoansLoanIdCollateralsCollateralIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PutLoansLoanIdCollateralsCollateralIdResponse> updateCollateralWithHttpInfo(Long loanId, Long collateralId, PutLoansLoandIdCollateralsCollateralIdRequest body) throws ApiException {
        com.squareup.okhttp.Call call = updateCollateralValidateBeforeCall(loanId, collateralId, body, null, null);
        Type localVarReturnType = new TypeToken<PutLoansLoanIdCollateralsCollateralIdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a Collateral (asynchronously)
     * 
     * @param loanId loanId (required)
     * @param collateralId collateralId (required)
     * @param body body (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCollateralAsync(Long loanId, Long collateralId, PutLoansLoandIdCollateralsCollateralIdRequest body, final ApiCallback<PutLoansLoanIdCollateralsCollateralIdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCollateralValidateBeforeCall(loanId, collateralId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PutLoansLoanIdCollateralsCollateralIdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
