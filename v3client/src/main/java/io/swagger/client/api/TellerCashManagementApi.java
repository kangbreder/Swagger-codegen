/*
 * Apache Fineract API Documentation
 * Apache Fineract is a secure, multi-tenanted microfinance platform. <br />              The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The reference app [  https://demo.openmf.org  ] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation.              <br/>The API                 is organized around REST [ https://en.wikipedia.org/wiki/Representational_state_transfer ]               <br/> Find out more about Apache Fineract on [ https://demo.openmf.org/api-docs/apiLive.htm#top ]              <br/> You can Try The API From Your Browser itself at [ https://demo.openmf.org/api-docs/apiLive.htm#interact ]              <br/> The Generic Options are available at [ https://demo.openmf.org/api-docs/apiLive.htm#genopts ]              <br/> Find out more about Updating Dates and Numbers at [ https://demo.openmf.org/api-docs/apiLive.htm#dates_and_numbers ]              <br/> For the Authentication and the Basic of HTTP and HTTPS refer [ https://demo.openmf.org/api-docs/apiLive.htm#authentication_overview ]              <br/> Check about ERROR codes at [ https://demo.openmf.org/api-docs/apiLive.htm#errors ]               <br/> <br/> Please refer to the old documentation for any documentation queries [ https://demo.openmf.org/api-docs/apiLive.htm ]              <br/>             ______________________________________________________________________________________________________________________________          
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.DeleteTellersTellerIdCashiersCashierIdResponse;
import io.swagger.client.model.GetTellersResponse;
import io.swagger.client.model.GetTellersTellerIdCashiersCashierIdResponse;
import io.swagger.client.model.GetTellersTellerIdCashiersCashiersIdSummaryAndTransactionsResponse;
import io.swagger.client.model.GetTellersTellerIdCashiersCashiersIdTransactionsResponse;
import io.swagger.client.model.GetTellersTellerIdCashiersCashiersIdTransactionsTemplateResponse;
import io.swagger.client.model.GetTellersTellerIdCashiersResponse;
import io.swagger.client.model.GetTellersTellerIdCashiersTemplateResponse;
import io.swagger.client.model.PostTellersRequest;
import io.swagger.client.model.PostTellersResponse;
import io.swagger.client.model.PostTellersTellerIdCashiersCashierIdAllocateRequest;
import io.swagger.client.model.PostTellersTellerIdCashiersCashierIdAllocateResponse;
import io.swagger.client.model.PostTellersTellerIdCashiersCashierIdSettleRequest;
import io.swagger.client.model.PostTellersTellerIdCashiersCashierIdSettleResponse;
import io.swagger.client.model.PostTellersTellerIdCashiersRequest;
import io.swagger.client.model.PostTellersTellerIdCashiersResponse;
import io.swagger.client.model.PutTellersRequest;
import io.swagger.client.model.PutTellersResponse;
import io.swagger.client.model.PutTellersTellerIdCashiersCashierIdRequest;
import io.swagger.client.model.PutTellersTellerIdCashiersCashierIdResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TellerCashManagementApi {
    private ApiClient apiClient;

    public TellerCashManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TellerCashManagementApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for allocateCashToCashier
     * @param tellerId tellerId (required)
     * @param cashierId cashierId (required)
     * @param body body (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call allocateCashToCashierCall(Long tellerId, Long cashierId, PostTellersTellerIdCashiersCashierIdAllocateRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/tellers/{tellerId}/cashiers/{cashierId}/allocate"
            .replaceAll("\\{" + "tellerId" + "\\}", apiClient.escapeString(tellerId.toString()))
            .replaceAll("\\{" + "cashierId" + "\\}", apiClient.escapeString(cashierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/html", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call allocateCashToCashierValidateBeforeCall(Long tellerId, Long cashierId, PostTellersTellerIdCashiersCashierIdAllocateRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tellerId' is set
        if (tellerId == null) {
            throw new ApiException("Missing the required parameter 'tellerId' when calling allocateCashToCashier(Async)");
        }
        
        // verify the required parameter 'cashierId' is set
        if (cashierId == null) {
            throw new ApiException("Missing the required parameter 'cashierId' when calling allocateCashToCashier(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling allocateCashToCashier(Async)");
        }
        

        com.squareup.okhttp.Call call = allocateCashToCashierCall(tellerId, cashierId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Allocate Cash To Cashier
     * Mandatory Fields:  Date, Amount, Currency, Notes/Comments
     * @param tellerId tellerId (required)
     * @param cashierId cashierId (required)
     * @param body body (required)
     * @return PostTellersTellerIdCashiersCashierIdAllocateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PostTellersTellerIdCashiersCashierIdAllocateResponse allocateCashToCashier(Long tellerId, Long cashierId, PostTellersTellerIdCashiersCashierIdAllocateRequest body) throws ApiException {
        ApiResponse<PostTellersTellerIdCashiersCashierIdAllocateResponse> resp = allocateCashToCashierWithHttpInfo(tellerId, cashierId, body);
        return resp.getData();
    }

    /**
     * Allocate Cash To Cashier
     * Mandatory Fields:  Date, Amount, Currency, Notes/Comments
     * @param tellerId tellerId (required)
     * @param cashierId cashierId (required)
     * @param body body (required)
     * @return ApiResponse&lt;PostTellersTellerIdCashiersCashierIdAllocateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PostTellersTellerIdCashiersCashierIdAllocateResponse> allocateCashToCashierWithHttpInfo(Long tellerId, Long cashierId, PostTellersTellerIdCashiersCashierIdAllocateRequest body) throws ApiException {
        com.squareup.okhttp.Call call = allocateCashToCashierValidateBeforeCall(tellerId, cashierId, body, null, null);
        Type localVarReturnType = new TypeToken<PostTellersTellerIdCashiersCashierIdAllocateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Allocate Cash To Cashier (asynchronously)
     * Mandatory Fields:  Date, Amount, Currency, Notes/Comments
     * @param tellerId tellerId (required)
     * @param cashierId cashierId (required)
     * @param body body (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call allocateCashToCashierAsync(Long tellerId, Long cashierId, PostTellersTellerIdCashiersCashierIdAllocateRequest body, final ApiCallback<PostTellersTellerIdCashiersCashierIdAllocateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = allocateCashToCashierValidateBeforeCall(tellerId, cashierId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PostTellersTellerIdCashiersCashierIdAllocateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createCashier
     * @param tellerId tellerId (required)
     * @param body body (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCashierCall(Long tellerId, PostTellersTellerIdCashiersRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/tellers/{tellerId}/cashiers"
            .replaceAll("\\{" + "tellerId" + "\\}", apiClient.escapeString(tellerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createCashierValidateBeforeCall(Long tellerId, PostTellersTellerIdCashiersRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tellerId' is set
        if (tellerId == null) {
            throw new ApiException("Missing the required parameter 'tellerId' when calling createCashier(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createCashier(Async)");
        }
        

        com.squareup.okhttp.Call call = createCashierCall(tellerId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create Cashiers
     * Mandatory Fields:  Cashier/staff, Fromm Date, To Date, Full Day or From time and To time    Optional Fields:  Description/Notes
     * @param tellerId tellerId (required)
     * @param body body (required)
     * @return PostTellersTellerIdCashiersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PostTellersTellerIdCashiersResponse createCashier(Long tellerId, PostTellersTellerIdCashiersRequest body) throws ApiException {
        ApiResponse<PostTellersTellerIdCashiersResponse> resp = createCashierWithHttpInfo(tellerId, body);
        return resp.getData();
    }

    /**
     * Create Cashiers
     * Mandatory Fields:  Cashier/staff, Fromm Date, To Date, Full Day or From time and To time    Optional Fields:  Description/Notes
     * @param tellerId tellerId (required)
     * @param body body (required)
     * @return ApiResponse&lt;PostTellersTellerIdCashiersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PostTellersTellerIdCashiersResponse> createCashierWithHttpInfo(Long tellerId, PostTellersTellerIdCashiersRequest body) throws ApiException {
        com.squareup.okhttp.Call call = createCashierValidateBeforeCall(tellerId, body, null, null);
        Type localVarReturnType = new TypeToken<PostTellersTellerIdCashiersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Cashiers (asynchronously)
     * Mandatory Fields:  Cashier/staff, Fromm Date, To Date, Full Day or From time and To time    Optional Fields:  Description/Notes
     * @param tellerId tellerId (required)
     * @param body body (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createCashierAsync(Long tellerId, PostTellersTellerIdCashiersRequest body, final ApiCallback<PostTellersTellerIdCashiersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCashierValidateBeforeCall(tellerId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PostTellersTellerIdCashiersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createTeller
     * @param body body (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createTellerCall(PostTellersRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/tellers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createTellerValidateBeforeCall(PostTellersRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createTeller(Async)");
        }
        

        com.squareup.okhttp.Call call = createTellerCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create teller
     * Mandatory Fields Teller name, OfficeId, Description, Start Date, Status Optional Fields End Date
     * @param body body (required)
     * @return PostTellersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PostTellersResponse createTeller(PostTellersRequest body) throws ApiException {
        ApiResponse<PostTellersResponse> resp = createTellerWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create teller
     * Mandatory Fields Teller name, OfficeId, Description, Start Date, Status Optional Fields End Date
     * @param body body (required)
     * @return ApiResponse&lt;PostTellersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PostTellersResponse> createTellerWithHttpInfo(PostTellersRequest body) throws ApiException {
        com.squareup.okhttp.Call call = createTellerValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<PostTellersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create teller (asynchronously)
     * Mandatory Fields Teller name, OfficeId, Description, Start Date, Status Optional Fields End Date
     * @param body body (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTellerAsync(PostTellersRequest body, final ApiCallback<PostTellersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTellerValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PostTellersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteCashier
     * @param tellerId tellerId (required)
     * @param cashierId cashierId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCashierCall(Long tellerId, Long cashierId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tellers/{tellerId}/cashiers/{cashierId}"
            .replaceAll("\\{" + "tellerId" + "\\}", apiClient.escapeString(tellerId.toString()))
            .replaceAll("\\{" + "cashierId" + "\\}", apiClient.escapeString(cashierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/html", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCashierValidateBeforeCall(Long tellerId, Long cashierId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tellerId' is set
        if (tellerId == null) {
            throw new ApiException("Missing the required parameter 'tellerId' when calling deleteCashier(Async)");
        }
        
        // verify the required parameter 'cashierId' is set
        if (cashierId == null) {
            throw new ApiException("Missing the required parameter 'cashierId' when calling deleteCashier(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteCashierCall(tellerId, cashierId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete Cashier
     * 
     * @param tellerId tellerId (required)
     * @param cashierId cashierId (required)
     * @return DeleteTellersTellerIdCashiersCashierIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeleteTellersTellerIdCashiersCashierIdResponse deleteCashier(Long tellerId, Long cashierId) throws ApiException {
        ApiResponse<DeleteTellersTellerIdCashiersCashierIdResponse> resp = deleteCashierWithHttpInfo(tellerId, cashierId);
        return resp.getData();
    }

    /**
     * Delete Cashier
     * 
     * @param tellerId tellerId (required)
     * @param cashierId cashierId (required)
     * @return ApiResponse&lt;DeleteTellersTellerIdCashiersCashierIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeleteTellersTellerIdCashiersCashierIdResponse> deleteCashierWithHttpInfo(Long tellerId, Long cashierId) throws ApiException {
        com.squareup.okhttp.Call call = deleteCashierValidateBeforeCall(tellerId, cashierId, null, null);
        Type localVarReturnType = new TypeToken<DeleteTellersTellerIdCashiersCashierIdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Cashier (asynchronously)
     * 
     * @param tellerId tellerId (required)
     * @param cashierId cashierId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCashierAsync(Long tellerId, Long cashierId, final ApiCallback<DeleteTellersTellerIdCashiersCashierIdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCashierValidateBeforeCall(tellerId, cashierId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeleteTellersTellerIdCashiersCashierIdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteTeller
     * @param tellerId tellerId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTellerCall(Long tellerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tellers/{tellerId}"
            .replaceAll("\\{" + "tellerId" + "\\}", apiClient.escapeString(tellerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/html", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTellerValidateBeforeCall(Long tellerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tellerId' is set
        if (tellerId == null) {
            throw new ApiException("Missing the required parameter 'tellerId' when calling deleteTeller(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteTellerCall(tellerId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param tellerId tellerId (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String deleteTeller(Long tellerId) throws ApiException {
        ApiResponse<String> resp = deleteTellerWithHttpInfo(tellerId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param tellerId tellerId (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> deleteTellerWithHttpInfo(Long tellerId) throws ApiException {
        com.squareup.okhttp.Call call = deleteTellerValidateBeforeCall(tellerId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tellerId tellerId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTellerAsync(Long tellerId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTellerValidateBeforeCall(tellerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for findCashierData
     * @param tellerId tellerId (required)
     * @param cashierId cashierId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findCashierDataCall(Long tellerId, Long cashierId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tellers/{tellerId}/cashiers/{cashierId}"
            .replaceAll("\\{" + "tellerId" + "\\}", apiClient.escapeString(tellerId.toString()))
            .replaceAll("\\{" + "cashierId" + "\\}", apiClient.escapeString(cashierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/html", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findCashierDataValidateBeforeCall(Long tellerId, Long cashierId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tellerId' is set
        if (tellerId == null) {
            throw new ApiException("Missing the required parameter 'tellerId' when calling findCashierData(Async)");
        }
        
        // verify the required parameter 'cashierId' is set
        if (cashierId == null) {
            throw new ApiException("Missing the required parameter 'cashierId' when calling findCashierData(Async)");
        }
        

        com.squareup.okhttp.Call call = findCashierDataCall(tellerId, cashierId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a cashier
     * 
     * @param tellerId tellerId (required)
     * @param cashierId cashierId (required)
     * @return GetTellersTellerIdCashiersCashierIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetTellersTellerIdCashiersCashierIdResponse findCashierData(Long tellerId, Long cashierId) throws ApiException {
        ApiResponse<GetTellersTellerIdCashiersCashierIdResponse> resp = findCashierDataWithHttpInfo(tellerId, cashierId);
        return resp.getData();
    }

    /**
     * Retrieve a cashier
     * 
     * @param tellerId tellerId (required)
     * @param cashierId cashierId (required)
     * @return ApiResponse&lt;GetTellersTellerIdCashiersCashierIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetTellersTellerIdCashiersCashierIdResponse> findCashierDataWithHttpInfo(Long tellerId, Long cashierId) throws ApiException {
        com.squareup.okhttp.Call call = findCashierDataValidateBeforeCall(tellerId, cashierId, null, null);
        Type localVarReturnType = new TypeToken<GetTellersTellerIdCashiersCashierIdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a cashier (asynchronously)
     * 
     * @param tellerId tellerId (required)
     * @param cashierId cashierId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findCashierDataAsync(Long tellerId, Long cashierId, final ApiCallback<GetTellersTellerIdCashiersCashierIdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findCashierDataValidateBeforeCall(tellerId, cashierId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetTellersTellerIdCashiersCashierIdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for findTeller
     * @param tellerId tellerId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findTellerCall(Long tellerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tellers/{tellerId}"
            .replaceAll("\\{" + "tellerId" + "\\}", apiClient.escapeString(tellerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/html", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findTellerValidateBeforeCall(Long tellerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tellerId' is set
        if (tellerId == null) {
            throw new ApiException("Missing the required parameter 'tellerId' when calling findTeller(Async)");
        }
        

        com.squareup.okhttp.Call call = findTellerCall(tellerId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve tellers
     * 
     * @param tellerId tellerId (required)
     * @return GetTellersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetTellersResponse findTeller(Long tellerId) throws ApiException {
        ApiResponse<GetTellersResponse> resp = findTellerWithHttpInfo(tellerId);
        return resp.getData();
    }

    /**
     * Retrieve tellers
     * 
     * @param tellerId tellerId (required)
     * @return ApiResponse&lt;GetTellersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetTellersResponse> findTellerWithHttpInfo(Long tellerId) throws ApiException {
        com.squareup.okhttp.Call call = findTellerValidateBeforeCall(tellerId, null, null);
        Type localVarReturnType = new TypeToken<GetTellersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve tellers (asynchronously)
     * 
     * @param tellerId tellerId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findTellerAsync(Long tellerId, final ApiCallback<GetTellersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findTellerValidateBeforeCall(tellerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetTellersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for findTransactionData
     * @param tellerId tellerId (required)
     * @param transactionId transactionId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findTransactionDataCall(Long tellerId, Long transactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tellers/{tellerId}/transactions/{transactionId}"
            .replaceAll("\\{" + "tellerId" + "\\}", apiClient.escapeString(tellerId.toString()))
            .replaceAll("\\{" + "transactionId" + "\\}", apiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/html", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findTransactionDataValidateBeforeCall(Long tellerId, Long transactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tellerId' is set
        if (tellerId == null) {
            throw new ApiException("Missing the required parameter 'tellerId' when calling findTransactionData(Async)");
        }
        
        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling findTransactionData(Async)");
        }
        

        com.squareup.okhttp.Call call = findTransactionDataCall(tellerId, transactionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param tellerId tellerId (required)
     * @param transactionId transactionId (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String findTransactionData(Long tellerId, Long transactionId) throws ApiException {
        ApiResponse<String> resp = findTransactionDataWithHttpInfo(tellerId, transactionId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param tellerId tellerId (required)
     * @param transactionId transactionId (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> findTransactionDataWithHttpInfo(Long tellerId, Long transactionId) throws ApiException {
        com.squareup.okhttp.Call call = findTransactionDataValidateBeforeCall(tellerId, transactionId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tellerId tellerId (required)
     * @param transactionId transactionId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findTransactionDataAsync(Long tellerId, Long transactionId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findTransactionDataValidateBeforeCall(tellerId, transactionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCashierData
     * @param tellerId tellerId (required)
     * @param fromdate fromdate (optional)
     * @param todate todate (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCashierDataCall(Long tellerId, String fromdate, String todate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tellers/{tellerId}/cashiers"
            .replaceAll("\\{" + "tellerId" + "\\}", apiClient.escapeString(tellerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fromdate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fromdate", fromdate));
        if (todate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("todate", todate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/html", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCashierDataValidateBeforeCall(Long tellerId, String fromdate, String todate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tellerId' is set
        if (tellerId == null) {
            throw new ApiException("Missing the required parameter 'tellerId' when calling getCashierData(Async)");
        }
        

        com.squareup.okhttp.Call call = getCashierDataCall(tellerId, fromdate, todate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Cashiers
     * 
     * @param tellerId tellerId (required)
     * @param fromdate fromdate (optional)
     * @param todate todate (optional)
     * @return GetTellersTellerIdCashiersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetTellersTellerIdCashiersResponse getCashierData(Long tellerId, String fromdate, String todate) throws ApiException {
        ApiResponse<GetTellersTellerIdCashiersResponse> resp = getCashierDataWithHttpInfo(tellerId, fromdate, todate);
        return resp.getData();
    }

    /**
     * List Cashiers
     * 
     * @param tellerId tellerId (required)
     * @param fromdate fromdate (optional)
     * @param todate todate (optional)
     * @return ApiResponse&lt;GetTellersTellerIdCashiersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetTellersTellerIdCashiersResponse> getCashierDataWithHttpInfo(Long tellerId, String fromdate, String todate) throws ApiException {
        com.squareup.okhttp.Call call = getCashierDataValidateBeforeCall(tellerId, fromdate, todate, null, null);
        Type localVarReturnType = new TypeToken<GetTellersTellerIdCashiersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Cashiers (asynchronously)
     * 
     * @param tellerId tellerId (required)
     * @param fromdate fromdate (optional)
     * @param todate todate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCashierDataAsync(Long tellerId, String fromdate, String todate, final ApiCallback<GetTellersTellerIdCashiersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCashierDataValidateBeforeCall(tellerId, fromdate, todate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetTellersTellerIdCashiersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCashierTemplate
     * @param tellerId tellerId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCashierTemplateCall(Long tellerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tellers/{tellerId}/cashiers/template"
            .replaceAll("\\{" + "tellerId" + "\\}", apiClient.escapeString(tellerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/html", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCashierTemplateValidateBeforeCall(Long tellerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tellerId' is set
        if (tellerId == null) {
            throw new ApiException("Missing the required parameter 'tellerId' when calling getCashierTemplate(Async)");
        }
        

        com.squareup.okhttp.Call call = getCashierTemplateCall(tellerId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Find Cashiers
     * 
     * @param tellerId tellerId (required)
     * @return GetTellersTellerIdCashiersTemplateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetTellersTellerIdCashiersTemplateResponse getCashierTemplate(Long tellerId) throws ApiException {
        ApiResponse<GetTellersTellerIdCashiersTemplateResponse> resp = getCashierTemplateWithHttpInfo(tellerId);
        return resp.getData();
    }

    /**
     * Find Cashiers
     * 
     * @param tellerId tellerId (required)
     * @return ApiResponse&lt;GetTellersTellerIdCashiersTemplateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetTellersTellerIdCashiersTemplateResponse> getCashierTemplateWithHttpInfo(Long tellerId) throws ApiException {
        com.squareup.okhttp.Call call = getCashierTemplateValidateBeforeCall(tellerId, null, null);
        Type localVarReturnType = new TypeToken<GetTellersTellerIdCashiersTemplateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Find Cashiers (asynchronously)
     * 
     * @param tellerId tellerId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCashierTemplateAsync(Long tellerId, final ApiCallback<GetTellersTellerIdCashiersTemplateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCashierTemplateValidateBeforeCall(tellerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetTellersTellerIdCashiersTemplateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCashierTxnTemplate
     * @param tellerId tellerId (required)
     * @param cashierId cashierId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCashierTxnTemplateCall(Long tellerId, Long cashierId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tellers/{tellerId}/cashiers/{cashierId}/transactions/template"
            .replaceAll("\\{" + "tellerId" + "\\}", apiClient.escapeString(tellerId.toString()))
            .replaceAll("\\{" + "cashierId" + "\\}", apiClient.escapeString(cashierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/html", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCashierTxnTemplateValidateBeforeCall(Long tellerId, Long cashierId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tellerId' is set
        if (tellerId == null) {
            throw new ApiException("Missing the required parameter 'tellerId' when calling getCashierTxnTemplate(Async)");
        }
        
        // verify the required parameter 'cashierId' is set
        if (cashierId == null) {
            throw new ApiException("Missing the required parameter 'cashierId' when calling getCashierTxnTemplate(Async)");
        }
        

        com.squareup.okhttp.Call call = getCashierTxnTemplateCall(tellerId, cashierId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve Cashier Transaction Template
     * 
     * @param tellerId tellerId (required)
     * @param cashierId cashierId (required)
     * @return GetTellersTellerIdCashiersCashiersIdTransactionsTemplateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetTellersTellerIdCashiersCashiersIdTransactionsTemplateResponse getCashierTxnTemplate(Long tellerId, Long cashierId) throws ApiException {
        ApiResponse<GetTellersTellerIdCashiersCashiersIdTransactionsTemplateResponse> resp = getCashierTxnTemplateWithHttpInfo(tellerId, cashierId);
        return resp.getData();
    }

    /**
     * Retrieve Cashier Transaction Template
     * 
     * @param tellerId tellerId (required)
     * @param cashierId cashierId (required)
     * @return ApiResponse&lt;GetTellersTellerIdCashiersCashiersIdTransactionsTemplateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetTellersTellerIdCashiersCashiersIdTransactionsTemplateResponse> getCashierTxnTemplateWithHttpInfo(Long tellerId, Long cashierId) throws ApiException {
        com.squareup.okhttp.Call call = getCashierTxnTemplateValidateBeforeCall(tellerId, cashierId, null, null);
        Type localVarReturnType = new TypeToken<GetTellersTellerIdCashiersCashiersIdTransactionsTemplateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve Cashier Transaction Template (asynchronously)
     * 
     * @param tellerId tellerId (required)
     * @param cashierId cashierId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCashierTxnTemplateAsync(Long tellerId, Long cashierId, final ApiCallback<GetTellersTellerIdCashiersCashiersIdTransactionsTemplateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCashierTxnTemplateValidateBeforeCall(tellerId, cashierId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetTellersTellerIdCashiersCashiersIdTransactionsTemplateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getJournalData
     * @param tellerId tellerId (required)
     * @param cashierId cashierId (optional)
     * @param dateRange dateRange (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getJournalDataCall(Long tellerId, Long cashierId, String dateRange, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tellers/{tellerId}/journals"
            .replaceAll("\\{" + "tellerId" + "\\}", apiClient.escapeString(tellerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cashierId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cashierId", cashierId));
        if (dateRange != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dateRange", dateRange));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/html", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getJournalDataValidateBeforeCall(Long tellerId, Long cashierId, String dateRange, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tellerId' is set
        if (tellerId == null) {
            throw new ApiException("Missing the required parameter 'tellerId' when calling getJournalData(Async)");
        }
        

        com.squareup.okhttp.Call call = getJournalDataCall(tellerId, cashierId, dateRange, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param tellerId tellerId (required)
     * @param cashierId cashierId (optional)
     * @param dateRange dateRange (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getJournalData(Long tellerId, Long cashierId, String dateRange) throws ApiException {
        ApiResponse<String> resp = getJournalDataWithHttpInfo(tellerId, cashierId, dateRange);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param tellerId tellerId (required)
     * @param cashierId cashierId (optional)
     * @param dateRange dateRange (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getJournalDataWithHttpInfo(Long tellerId, Long cashierId, String dateRange) throws ApiException {
        com.squareup.okhttp.Call call = getJournalDataValidateBeforeCall(tellerId, cashierId, dateRange, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tellerId tellerId (required)
     * @param cashierId cashierId (optional)
     * @param dateRange dateRange (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getJournalDataAsync(Long tellerId, Long cashierId, String dateRange, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getJournalDataValidateBeforeCall(tellerId, cashierId, dateRange, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTellerData
     * @param officeId officeId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTellerDataCall(Long officeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tellers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (officeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("officeId", officeId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/html", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTellerDataValidateBeforeCall(Long officeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getTellerDataCall(officeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all tellers
     * Retrieves list tellers
     * @param officeId officeId (optional)
     * @return List&lt;GetTellersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<GetTellersResponse> getTellerData(Long officeId) throws ApiException {
        ApiResponse<List<GetTellersResponse>> resp = getTellerDataWithHttpInfo(officeId);
        return resp.getData();
    }

    /**
     * List all tellers
     * Retrieves list tellers
     * @param officeId officeId (optional)
     * @return ApiResponse&lt;List&lt;GetTellersResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<GetTellersResponse>> getTellerDataWithHttpInfo(Long officeId) throws ApiException {
        com.squareup.okhttp.Call call = getTellerDataValidateBeforeCall(officeId, null, null);
        Type localVarReturnType = new TypeToken<List<GetTellersResponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all tellers (asynchronously)
     * Retrieves list tellers
     * @param officeId officeId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTellerDataAsync(Long officeId, final ApiCallback<List<GetTellersResponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTellerDataValidateBeforeCall(officeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<GetTellersResponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTransactionData
     * @param tellerId tellerId (required)
     * @param dateRange dateRange (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTransactionDataCall(Long tellerId, String dateRange, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tellers/{tellerId}/transactions"
            .replaceAll("\\{" + "tellerId" + "\\}", apiClient.escapeString(tellerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (dateRange != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dateRange", dateRange));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/html", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTransactionDataValidateBeforeCall(Long tellerId, String dateRange, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tellerId' is set
        if (tellerId == null) {
            throw new ApiException("Missing the required parameter 'tellerId' when calling getTransactionData(Async)");
        }
        

        com.squareup.okhttp.Call call = getTransactionDataCall(tellerId, dateRange, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param tellerId tellerId (required)
     * @param dateRange dateRange (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getTransactionData(Long tellerId, String dateRange) throws ApiException {
        ApiResponse<String> resp = getTransactionDataWithHttpInfo(tellerId, dateRange);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param tellerId tellerId (required)
     * @param dateRange dateRange (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getTransactionDataWithHttpInfo(Long tellerId, String dateRange) throws ApiException {
        com.squareup.okhttp.Call call = getTransactionDataValidateBeforeCall(tellerId, dateRange, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tellerId tellerId (required)
     * @param dateRange dateRange (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTransactionDataAsync(Long tellerId, String dateRange, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransactionDataValidateBeforeCall(tellerId, dateRange, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTransactionsForCashier
     * @param tellerId tellerId (required)
     * @param cashierId cashierId (required)
     * @param currencyCode currencyCode (optional)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param orderBy orderBy (optional)
     * @param sortOrder sortOrder (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTransactionsForCashierCall(Long tellerId, Long cashierId, String currencyCode, Integer offset, Integer limit, String orderBy, String sortOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tellers/{tellerId}/cashiers/{cashierId}/transactions"
            .replaceAll("\\{" + "tellerId" + "\\}", apiClient.escapeString(tellerId.toString()))
            .replaceAll("\\{" + "cashierId" + "\\}", apiClient.escapeString(cashierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currencyCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currencyCode", currencyCode));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderBy", orderBy));
        if (sortOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTransactionsForCashierValidateBeforeCall(Long tellerId, Long cashierId, String currencyCode, Integer offset, Integer limit, String orderBy, String sortOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tellerId' is set
        if (tellerId == null) {
            throw new ApiException("Missing the required parameter 'tellerId' when calling getTransactionsForCashier(Async)");
        }
        
        // verify the required parameter 'cashierId' is set
        if (cashierId == null) {
            throw new ApiException("Missing the required parameter 'cashierId' when calling getTransactionsForCashier(Async)");
        }
        

        com.squareup.okhttp.Call call = getTransactionsForCashierCall(tellerId, cashierId, currencyCode, offset, limit, orderBy, sortOrder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve Cashier Transaction
     * 
     * @param tellerId tellerId (required)
     * @param cashierId cashierId (required)
     * @param currencyCode currencyCode (optional)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param orderBy orderBy (optional)
     * @param sortOrder sortOrder (optional)
     * @return List&lt;GetTellersTellerIdCashiersCashiersIdTransactionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<GetTellersTellerIdCashiersCashiersIdTransactionsResponse> getTransactionsForCashier(Long tellerId, Long cashierId, String currencyCode, Integer offset, Integer limit, String orderBy, String sortOrder) throws ApiException {
        ApiResponse<List<GetTellersTellerIdCashiersCashiersIdTransactionsResponse>> resp = getTransactionsForCashierWithHttpInfo(tellerId, cashierId, currencyCode, offset, limit, orderBy, sortOrder);
        return resp.getData();
    }

    /**
     * Retrieve Cashier Transaction
     * 
     * @param tellerId tellerId (required)
     * @param cashierId cashierId (required)
     * @param currencyCode currencyCode (optional)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param orderBy orderBy (optional)
     * @param sortOrder sortOrder (optional)
     * @return ApiResponse&lt;List&lt;GetTellersTellerIdCashiersCashiersIdTransactionsResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<GetTellersTellerIdCashiersCashiersIdTransactionsResponse>> getTransactionsForCashierWithHttpInfo(Long tellerId, Long cashierId, String currencyCode, Integer offset, Integer limit, String orderBy, String sortOrder) throws ApiException {
        com.squareup.okhttp.Call call = getTransactionsForCashierValidateBeforeCall(tellerId, cashierId, currencyCode, offset, limit, orderBy, sortOrder, null, null);
        Type localVarReturnType = new TypeToken<List<GetTellersTellerIdCashiersCashiersIdTransactionsResponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve Cashier Transaction (asynchronously)
     * 
     * @param tellerId tellerId (required)
     * @param cashierId cashierId (required)
     * @param currencyCode currencyCode (optional)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param orderBy orderBy (optional)
     * @param sortOrder sortOrder (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTransactionsForCashierAsync(Long tellerId, Long cashierId, String currencyCode, Integer offset, Integer limit, String orderBy, String sortOrder, final ApiCallback<List<GetTellersTellerIdCashiersCashiersIdTransactionsResponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransactionsForCashierValidateBeforeCall(tellerId, cashierId, currencyCode, offset, limit, orderBy, sortOrder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<GetTellersTellerIdCashiersCashiersIdTransactionsResponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTransactionsWtihSummaryForCashier
     * @param tellerId tellerId (required)
     * @param cashierId cashierId (required)
     * @param currencyCode currencyCode (optional)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param orderBy orderBy (optional)
     * @param sortOrder sortOrder (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTransactionsWtihSummaryForCashierCall(Long tellerId, Long cashierId, String currencyCode, Integer offset, Integer limit, String orderBy, String sortOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tellers/{tellerId}/cashiers/{cashierId}/summaryandtransactions"
            .replaceAll("\\{" + "tellerId" + "\\}", apiClient.escapeString(tellerId.toString()))
            .replaceAll("\\{" + "cashierId" + "\\}", apiClient.escapeString(cashierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currencyCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currencyCode", currencyCode));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderBy", orderBy));
        if (sortOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTransactionsWtihSummaryForCashierValidateBeforeCall(Long tellerId, Long cashierId, String currencyCode, Integer offset, Integer limit, String orderBy, String sortOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tellerId' is set
        if (tellerId == null) {
            throw new ApiException("Missing the required parameter 'tellerId' when calling getTransactionsWtihSummaryForCashier(Async)");
        }
        
        // verify the required parameter 'cashierId' is set
        if (cashierId == null) {
            throw new ApiException("Missing the required parameter 'cashierId' when calling getTransactionsWtihSummaryForCashier(Async)");
        }
        

        com.squareup.okhttp.Call call = getTransactionsWtihSummaryForCashierCall(tellerId, cashierId, currencyCode, offset, limit, orderBy, sortOrder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Transactions Wtih Summary For Cashier
     * 
     * @param tellerId tellerId (required)
     * @param cashierId cashierId (required)
     * @param currencyCode currencyCode (optional)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param orderBy orderBy (optional)
     * @param sortOrder sortOrder (optional)
     * @return GetTellersTellerIdCashiersCashiersIdSummaryAndTransactionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetTellersTellerIdCashiersCashiersIdSummaryAndTransactionsResponse getTransactionsWtihSummaryForCashier(Long tellerId, Long cashierId, String currencyCode, Integer offset, Integer limit, String orderBy, String sortOrder) throws ApiException {
        ApiResponse<GetTellersTellerIdCashiersCashiersIdSummaryAndTransactionsResponse> resp = getTransactionsWtihSummaryForCashierWithHttpInfo(tellerId, cashierId, currencyCode, offset, limit, orderBy, sortOrder);
        return resp.getData();
    }

    /**
     * Transactions Wtih Summary For Cashier
     * 
     * @param tellerId tellerId (required)
     * @param cashierId cashierId (required)
     * @param currencyCode currencyCode (optional)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param orderBy orderBy (optional)
     * @param sortOrder sortOrder (optional)
     * @return ApiResponse&lt;GetTellersTellerIdCashiersCashiersIdSummaryAndTransactionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetTellersTellerIdCashiersCashiersIdSummaryAndTransactionsResponse> getTransactionsWtihSummaryForCashierWithHttpInfo(Long tellerId, Long cashierId, String currencyCode, Integer offset, Integer limit, String orderBy, String sortOrder) throws ApiException {
        com.squareup.okhttp.Call call = getTransactionsWtihSummaryForCashierValidateBeforeCall(tellerId, cashierId, currencyCode, offset, limit, orderBy, sortOrder, null, null);
        Type localVarReturnType = new TypeToken<GetTellersTellerIdCashiersCashiersIdSummaryAndTransactionsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Transactions Wtih Summary For Cashier (asynchronously)
     * 
     * @param tellerId tellerId (required)
     * @param cashierId cashierId (required)
     * @param currencyCode currencyCode (optional)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param orderBy orderBy (optional)
     * @param sortOrder sortOrder (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTransactionsWtihSummaryForCashierAsync(Long tellerId, Long cashierId, String currencyCode, Integer offset, Integer limit, String orderBy, String sortOrder, final ApiCallback<GetTellersTellerIdCashiersCashiersIdSummaryAndTransactionsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransactionsWtihSummaryForCashierValidateBeforeCall(tellerId, cashierId, currencyCode, offset, limit, orderBy, sortOrder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetTellersTellerIdCashiersCashiersIdSummaryAndTransactionsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for settleCashFromCashier
     * @param tellerId tellerId (required)
     * @param cashierId cashierId (required)
     * @param body body (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call settleCashFromCashierCall(Long tellerId, Long cashierId, PostTellersTellerIdCashiersCashierIdSettleRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/tellers/{tellerId}/cashiers/{cashierId}/settle"
            .replaceAll("\\{" + "tellerId" + "\\}", apiClient.escapeString(tellerId.toString()))
            .replaceAll("\\{" + "cashierId" + "\\}", apiClient.escapeString(cashierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/html", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call settleCashFromCashierValidateBeforeCall(Long tellerId, Long cashierId, PostTellersTellerIdCashiersCashierIdSettleRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tellerId' is set
        if (tellerId == null) {
            throw new ApiException("Missing the required parameter 'tellerId' when calling settleCashFromCashier(Async)");
        }
        
        // verify the required parameter 'cashierId' is set
        if (cashierId == null) {
            throw new ApiException("Missing the required parameter 'cashierId' when calling settleCashFromCashier(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling settleCashFromCashier(Async)");
        }
        

        com.squareup.okhttp.Call call = settleCashFromCashierCall(tellerId, cashierId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Settle Cash From Cashier
     * Mandatory Fields Date, Amount, Currency, Notes/Comments
     * @param tellerId tellerId (required)
     * @param cashierId cashierId (required)
     * @param body body (required)
     * @return PostTellersTellerIdCashiersCashierIdSettleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PostTellersTellerIdCashiersCashierIdSettleResponse settleCashFromCashier(Long tellerId, Long cashierId, PostTellersTellerIdCashiersCashierIdSettleRequest body) throws ApiException {
        ApiResponse<PostTellersTellerIdCashiersCashierIdSettleResponse> resp = settleCashFromCashierWithHttpInfo(tellerId, cashierId, body);
        return resp.getData();
    }

    /**
     * Settle Cash From Cashier
     * Mandatory Fields Date, Amount, Currency, Notes/Comments
     * @param tellerId tellerId (required)
     * @param cashierId cashierId (required)
     * @param body body (required)
     * @return ApiResponse&lt;PostTellersTellerIdCashiersCashierIdSettleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PostTellersTellerIdCashiersCashierIdSettleResponse> settleCashFromCashierWithHttpInfo(Long tellerId, Long cashierId, PostTellersTellerIdCashiersCashierIdSettleRequest body) throws ApiException {
        com.squareup.okhttp.Call call = settleCashFromCashierValidateBeforeCall(tellerId, cashierId, body, null, null);
        Type localVarReturnType = new TypeToken<PostTellersTellerIdCashiersCashierIdSettleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Settle Cash From Cashier (asynchronously)
     * Mandatory Fields Date, Amount, Currency, Notes/Comments
     * @param tellerId tellerId (required)
     * @param cashierId cashierId (required)
     * @param body body (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call settleCashFromCashierAsync(Long tellerId, Long cashierId, PostTellersTellerIdCashiersCashierIdSettleRequest body, final ApiCallback<PostTellersTellerIdCashiersCashierIdSettleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = settleCashFromCashierValidateBeforeCall(tellerId, cashierId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PostTellersTellerIdCashiersCashierIdSettleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateCashier
     * @param tellerId tellerId (required)
     * @param cashierId cashierId (required)
     * @param body body (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCashierCall(Long tellerId, Long cashierId, PutTellersTellerIdCashiersCashierIdRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/tellers/{tellerId}/cashiers/{cashierId}"
            .replaceAll("\\{" + "tellerId" + "\\}", apiClient.escapeString(tellerId.toString()))
            .replaceAll("\\{" + "cashierId" + "\\}", apiClient.escapeString(cashierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCashierValidateBeforeCall(Long tellerId, Long cashierId, PutTellersTellerIdCashiersCashierIdRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tellerId' is set
        if (tellerId == null) {
            throw new ApiException("Missing the required parameter 'tellerId' when calling updateCashier(Async)");
        }
        
        // verify the required parameter 'cashierId' is set
        if (cashierId == null) {
            throw new ApiException("Missing the required parameter 'cashierId' when calling updateCashier(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateCashier(Async)");
        }
        

        com.squareup.okhttp.Call call = updateCashierCall(tellerId, cashierId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update Cashier
     * 
     * @param tellerId tellerId (required)
     * @param cashierId cashierId (required)
     * @param body body (required)
     * @return PutTellersTellerIdCashiersCashierIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PutTellersTellerIdCashiersCashierIdResponse updateCashier(Long tellerId, Long cashierId, PutTellersTellerIdCashiersCashierIdRequest body) throws ApiException {
        ApiResponse<PutTellersTellerIdCashiersCashierIdResponse> resp = updateCashierWithHttpInfo(tellerId, cashierId, body);
        return resp.getData();
    }

    /**
     * Update Cashier
     * 
     * @param tellerId tellerId (required)
     * @param cashierId cashierId (required)
     * @param body body (required)
     * @return ApiResponse&lt;PutTellersTellerIdCashiersCashierIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PutTellersTellerIdCashiersCashierIdResponse> updateCashierWithHttpInfo(Long tellerId, Long cashierId, PutTellersTellerIdCashiersCashierIdRequest body) throws ApiException {
        com.squareup.okhttp.Call call = updateCashierValidateBeforeCall(tellerId, cashierId, body, null, null);
        Type localVarReturnType = new TypeToken<PutTellersTellerIdCashiersCashierIdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Cashier (asynchronously)
     * 
     * @param tellerId tellerId (required)
     * @param cashierId cashierId (required)
     * @param body body (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCashierAsync(Long tellerId, Long cashierId, PutTellersTellerIdCashiersCashierIdRequest body, final ApiCallback<PutTellersTellerIdCashiersCashierIdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCashierValidateBeforeCall(tellerId, cashierId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PutTellersTellerIdCashiersCashierIdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateTeller
     * @param tellerId tellerId (required)
     * @param body body (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTellerCall(Long tellerId, PutTellersRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/tellers/{tellerId}"
            .replaceAll("\\{" + "tellerId" + "\\}", apiClient.escapeString(tellerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTellerValidateBeforeCall(Long tellerId, PutTellersRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tellerId' is set
        if (tellerId == null) {
            throw new ApiException("Missing the required parameter 'tellerId' when calling updateTeller(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateTeller(Async)");
        }
        

        com.squareup.okhttp.Call call = updateTellerCall(tellerId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update teller
     * 
     * @param tellerId tellerId (required)
     * @param body body (required)
     * @return PutTellersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PutTellersResponse updateTeller(Long tellerId, PutTellersRequest body) throws ApiException {
        ApiResponse<PutTellersResponse> resp = updateTellerWithHttpInfo(tellerId, body);
        return resp.getData();
    }

    /**
     * Update teller
     * 
     * @param tellerId tellerId (required)
     * @param body body (required)
     * @return ApiResponse&lt;PutTellersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PutTellersResponse> updateTellerWithHttpInfo(Long tellerId, PutTellersRequest body) throws ApiException {
        com.squareup.okhttp.Call call = updateTellerValidateBeforeCall(tellerId, body, null, null);
        Type localVarReturnType = new TypeToken<PutTellersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update teller (asynchronously)
     * 
     * @param tellerId tellerId (required)
     * @param body body (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTellerAsync(Long tellerId, PutTellersRequest body, final ApiCallback<PutTellersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTellerValidateBeforeCall(tellerId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PutTellersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
