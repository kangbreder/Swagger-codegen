/*
 * Apache Fineract API Documentation
 * Apache Fineract is a secure, multi-tenanted microfinance platform. <br />              The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The reference app [  https://demo.openmf.org  ] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation.              <br/>The API                 is organized around REST [ https://en.wikipedia.org/wiki/Representational_state_transfer ]               <br/> Find out more about Apache Fineract on [ https://demo.openmf.org/api-docs/apiLive.htm#top ]              <br/> You can Try The API From Your Browser itself at [ https://demo.openmf.org/api-docs/apiLive.htm#interact ]              <br/> The Generic Options are available at [ https://demo.openmf.org/api-docs/apiLive.htm#genopts ]              <br/> Find out more about Updating Dates and Numbers at [ https://demo.openmf.org/api-docs/apiLive.htm#dates_and_numbers ]              <br/> For the Authentication and the Basic of HTTP and HTTPS refer [ https://demo.openmf.org/api-docs/apiLive.htm#authentication_overview ]              <br/> Check about ERROR codes at [ https://demo.openmf.org/api-docs/apiLive.htm#errors ]               <br/> <br/> Please refer to the old documentation for any documentation queries [ https://demo.openmf.org/api-docs/apiLive.htm ]              <br/>             ______________________________________________________________________________________________________________________________          
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.DeleteSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse;
import io.swagger.client.model.GetSavingsAccountsSavingsAccountIdChargesResponse;
import io.swagger.client.model.GetSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse;
import io.swagger.client.model.GetSavingsAccountsSavingsAccountIdChargesTemplateResponse;
import io.swagger.client.model.PostSavingsAccountsSavingsAccountIdChargesRequest;
import io.swagger.client.model.PostSavingsAccountsSavingsAccountIdChargesResponse;
import io.swagger.client.model.PostSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest;
import io.swagger.client.model.PostSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse;
import io.swagger.client.model.PutSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest;
import io.swagger.client.model.PutSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SavingsChargesApi {
    private ApiClient apiClient;

    public SavingsChargesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SavingsChargesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addSavingsAccountCharge
     * @param savingsAccountId savingsAccountId (required)
     * @param body body (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addSavingsAccountChargeCall(Long savingsAccountId, PostSavingsAccountsSavingsAccountIdChargesRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/savingsaccounts/{savingsAccountId}/charges"
            .replaceAll("\\{" + "savingsAccountId" + "\\}", apiClient.escapeString(savingsAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addSavingsAccountChargeValidateBeforeCall(Long savingsAccountId, PostSavingsAccountsSavingsAccountIdChargesRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'savingsAccountId' is set
        if (savingsAccountId == null) {
            throw new ApiException("Missing the required parameter 'savingsAccountId' when calling addSavingsAccountCharge(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addSavingsAccountCharge(Async)");
        }
        

        com.squareup.okhttp.Call call = addSavingsAccountChargeCall(savingsAccountId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a Savings account Charge
     * Creates a Savings account Charge  Mandatory Fields for Savings account Charges: chargeId, amount  chargeId, amount, dueDate, dateFormat, locale  chargeId, amount, feeOnMonthDay, monthDayFormat, locale
     * @param savingsAccountId savingsAccountId (required)
     * @param body body (required)
     * @return PostSavingsAccountsSavingsAccountIdChargesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PostSavingsAccountsSavingsAccountIdChargesResponse addSavingsAccountCharge(Long savingsAccountId, PostSavingsAccountsSavingsAccountIdChargesRequest body) throws ApiException {
        ApiResponse<PostSavingsAccountsSavingsAccountIdChargesResponse> resp = addSavingsAccountChargeWithHttpInfo(savingsAccountId, body);
        return resp.getData();
    }

    /**
     * Create a Savings account Charge
     * Creates a Savings account Charge  Mandatory Fields for Savings account Charges: chargeId, amount  chargeId, amount, dueDate, dateFormat, locale  chargeId, amount, feeOnMonthDay, monthDayFormat, locale
     * @param savingsAccountId savingsAccountId (required)
     * @param body body (required)
     * @return ApiResponse&lt;PostSavingsAccountsSavingsAccountIdChargesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PostSavingsAccountsSavingsAccountIdChargesResponse> addSavingsAccountChargeWithHttpInfo(Long savingsAccountId, PostSavingsAccountsSavingsAccountIdChargesRequest body) throws ApiException {
        com.squareup.okhttp.Call call = addSavingsAccountChargeValidateBeforeCall(savingsAccountId, body, null, null);
        Type localVarReturnType = new TypeToken<PostSavingsAccountsSavingsAccountIdChargesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Savings account Charge (asynchronously)
     * Creates a Savings account Charge  Mandatory Fields for Savings account Charges: chargeId, amount  chargeId, amount, dueDate, dateFormat, locale  chargeId, amount, feeOnMonthDay, monthDayFormat, locale
     * @param savingsAccountId savingsAccountId (required)
     * @param body body (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addSavingsAccountChargeAsync(Long savingsAccountId, PostSavingsAccountsSavingsAccountIdChargesRequest body, final ApiCallback<PostSavingsAccountsSavingsAccountIdChargesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addSavingsAccountChargeValidateBeforeCall(savingsAccountId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PostSavingsAccountsSavingsAccountIdChargesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteSavingsAccountCharge
     * @param savingsAccountId savingsAccountId (required)
     * @param savingsAccountChargeId savingsAccountChargeId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSavingsAccountChargeCall(Long savingsAccountId, Long savingsAccountChargeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/savingsaccounts/{savingsAccountId}/charges/{savingsAccountChargeId}"
            .replaceAll("\\{" + "savingsAccountId" + "\\}", apiClient.escapeString(savingsAccountId.toString()))
            .replaceAll("\\{" + "savingsAccountChargeId" + "\\}", apiClient.escapeString(savingsAccountChargeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSavingsAccountChargeValidateBeforeCall(Long savingsAccountId, Long savingsAccountChargeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'savingsAccountId' is set
        if (savingsAccountId == null) {
            throw new ApiException("Missing the required parameter 'savingsAccountId' when calling deleteSavingsAccountCharge(Async)");
        }
        
        // verify the required parameter 'savingsAccountChargeId' is set
        if (savingsAccountChargeId == null) {
            throw new ApiException("Missing the required parameter 'savingsAccountChargeId' when calling deleteSavingsAccountCharge(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteSavingsAccountChargeCall(savingsAccountId, savingsAccountChargeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a Savings account Charge
     * Note: Currently, A Savings account Charge may only be removed from Savings that are not yet approved.
     * @param savingsAccountId savingsAccountId (required)
     * @param savingsAccountChargeId savingsAccountChargeId (required)
     * @return DeleteSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeleteSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse deleteSavingsAccountCharge(Long savingsAccountId, Long savingsAccountChargeId) throws ApiException {
        ApiResponse<DeleteSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse> resp = deleteSavingsAccountChargeWithHttpInfo(savingsAccountId, savingsAccountChargeId);
        return resp.getData();
    }

    /**
     * Delete a Savings account Charge
     * Note: Currently, A Savings account Charge may only be removed from Savings that are not yet approved.
     * @param savingsAccountId savingsAccountId (required)
     * @param savingsAccountChargeId savingsAccountChargeId (required)
     * @return ApiResponse&lt;DeleteSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeleteSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse> deleteSavingsAccountChargeWithHttpInfo(Long savingsAccountId, Long savingsAccountChargeId) throws ApiException {
        com.squareup.okhttp.Call call = deleteSavingsAccountChargeValidateBeforeCall(savingsAccountId, savingsAccountChargeId, null, null);
        Type localVarReturnType = new TypeToken<DeleteSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a Savings account Charge (asynchronously)
     * Note: Currently, A Savings account Charge may only be removed from Savings that are not yet approved.
     * @param savingsAccountId savingsAccountId (required)
     * @param savingsAccountChargeId savingsAccountChargeId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSavingsAccountChargeAsync(Long savingsAccountId, Long savingsAccountChargeId, final ApiCallback<DeleteSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSavingsAccountChargeValidateBeforeCall(savingsAccountId, savingsAccountChargeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeleteSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for payOrWaiveSavingsAccountCharge
     * @param savingsAccountId savingsAccountId (required)
     * @param savingsAccountChargeId savingsAccountChargeId (required)
     * @param body body (required)
     * @param command command (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call payOrWaiveSavingsAccountChargeCall(Long savingsAccountId, Long savingsAccountChargeId, PostSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest body, String command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/savingsaccounts/{savingsAccountId}/charges/{savingsAccountChargeId}"
            .replaceAll("\\{" + "savingsAccountId" + "\\}", apiClient.escapeString(savingsAccountId.toString()))
            .replaceAll("\\{" + "savingsAccountChargeId" + "\\}", apiClient.escapeString(savingsAccountChargeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (command != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("command", command));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call payOrWaiveSavingsAccountChargeValidateBeforeCall(Long savingsAccountId, Long savingsAccountChargeId, PostSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest body, String command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'savingsAccountId' is set
        if (savingsAccountId == null) {
            throw new ApiException("Missing the required parameter 'savingsAccountId' when calling payOrWaiveSavingsAccountCharge(Async)");
        }
        
        // verify the required parameter 'savingsAccountChargeId' is set
        if (savingsAccountChargeId == null) {
            throw new ApiException("Missing the required parameter 'savingsAccountChargeId' when calling payOrWaiveSavingsAccountCharge(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling payOrWaiveSavingsAccountCharge(Async)");
        }
        

        com.squareup.okhttp.Call call = payOrWaiveSavingsAccountChargeCall(savingsAccountId, savingsAccountChargeId, body, command, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Pay a Savings account Charge | Waive off a Savings account Charge | Inactivate a Savings account Charge
     * Pay a Savings account Charge:  An active charge will be paid when savings account is active and having sufficient balance.  Waive off a Savings account Charge:  Outstanding charge amount will be waived off.  Inactivate a Savings account Charge:  A charge will be allowed to inactivate when savings account is active and not having any dues as of today. If charge is overpaid, corresponding charge payment transactions will be reversed.  Showing request/response for &#39;Pay a Savings account Charge&#39;
     * @param savingsAccountId savingsAccountId (required)
     * @param savingsAccountChargeId savingsAccountChargeId (required)
     * @param body body (required)
     * @param command command (optional)
     * @return PostSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PostSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse payOrWaiveSavingsAccountCharge(Long savingsAccountId, Long savingsAccountChargeId, PostSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest body, String command) throws ApiException {
        ApiResponse<PostSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse> resp = payOrWaiveSavingsAccountChargeWithHttpInfo(savingsAccountId, savingsAccountChargeId, body, command);
        return resp.getData();
    }

    /**
     * Pay a Savings account Charge | Waive off a Savings account Charge | Inactivate a Savings account Charge
     * Pay a Savings account Charge:  An active charge will be paid when savings account is active and having sufficient balance.  Waive off a Savings account Charge:  Outstanding charge amount will be waived off.  Inactivate a Savings account Charge:  A charge will be allowed to inactivate when savings account is active and not having any dues as of today. If charge is overpaid, corresponding charge payment transactions will be reversed.  Showing request/response for &#39;Pay a Savings account Charge&#39;
     * @param savingsAccountId savingsAccountId (required)
     * @param savingsAccountChargeId savingsAccountChargeId (required)
     * @param body body (required)
     * @param command command (optional)
     * @return ApiResponse&lt;PostSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PostSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse> payOrWaiveSavingsAccountChargeWithHttpInfo(Long savingsAccountId, Long savingsAccountChargeId, PostSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest body, String command) throws ApiException {
        com.squareup.okhttp.Call call = payOrWaiveSavingsAccountChargeValidateBeforeCall(savingsAccountId, savingsAccountChargeId, body, command, null, null);
        Type localVarReturnType = new TypeToken<PostSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Pay a Savings account Charge | Waive off a Savings account Charge | Inactivate a Savings account Charge (asynchronously)
     * Pay a Savings account Charge:  An active charge will be paid when savings account is active and having sufficient balance.  Waive off a Savings account Charge:  Outstanding charge amount will be waived off.  Inactivate a Savings account Charge:  A charge will be allowed to inactivate when savings account is active and not having any dues as of today. If charge is overpaid, corresponding charge payment transactions will be reversed.  Showing request/response for &#39;Pay a Savings account Charge&#39;
     * @param savingsAccountId savingsAccountId (required)
     * @param savingsAccountChargeId savingsAccountChargeId (required)
     * @param body body (required)
     * @param command command (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call payOrWaiveSavingsAccountChargeAsync(Long savingsAccountId, Long savingsAccountChargeId, PostSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest body, String command, final ApiCallback<PostSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = payOrWaiveSavingsAccountChargeValidateBeforeCall(savingsAccountId, savingsAccountChargeId, body, command, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PostSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveAllSavingsAccountCharges
     * @param savingsAccountId savingsAccountId (required)
     * @param chargeStatus chargeStatus (optional, default to all)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveAllSavingsAccountChargesCall(Long savingsAccountId, String chargeStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/savingsaccounts/{savingsAccountId}/charges"
            .replaceAll("\\{" + "savingsAccountId" + "\\}", apiClient.escapeString(savingsAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (chargeStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("chargeStatus", chargeStatus));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveAllSavingsAccountChargesValidateBeforeCall(Long savingsAccountId, String chargeStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'savingsAccountId' is set
        if (savingsAccountId == null) {
            throw new ApiException("Missing the required parameter 'savingsAccountId' when calling retrieveAllSavingsAccountCharges(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveAllSavingsAccountChargesCall(savingsAccountId, chargeStatus, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Savings Charges
     * Lists Savings Charges  Example Requests:  savingsaccounts/1/charges  savingsaccounts/1/charges?chargeStatus&#x3D;all  savingsaccounts/1/charges?chargeStatus&#x3D;inactive  savingsaccounts/1/charges?chargeStatus&#x3D;active  savingsaccounts/1/charges?fields&#x3D;name,amountOrPercentage
     * @param savingsAccountId savingsAccountId (required)
     * @param chargeStatus chargeStatus (optional, default to all)
     * @return List&lt;GetSavingsAccountsSavingsAccountIdChargesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<GetSavingsAccountsSavingsAccountIdChargesResponse> retrieveAllSavingsAccountCharges(Long savingsAccountId, String chargeStatus) throws ApiException {
        ApiResponse<List<GetSavingsAccountsSavingsAccountIdChargesResponse>> resp = retrieveAllSavingsAccountChargesWithHttpInfo(savingsAccountId, chargeStatus);
        return resp.getData();
    }

    /**
     * List Savings Charges
     * Lists Savings Charges  Example Requests:  savingsaccounts/1/charges  savingsaccounts/1/charges?chargeStatus&#x3D;all  savingsaccounts/1/charges?chargeStatus&#x3D;inactive  savingsaccounts/1/charges?chargeStatus&#x3D;active  savingsaccounts/1/charges?fields&#x3D;name,amountOrPercentage
     * @param savingsAccountId savingsAccountId (required)
     * @param chargeStatus chargeStatus (optional, default to all)
     * @return ApiResponse&lt;List&lt;GetSavingsAccountsSavingsAccountIdChargesResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<GetSavingsAccountsSavingsAccountIdChargesResponse>> retrieveAllSavingsAccountChargesWithHttpInfo(Long savingsAccountId, String chargeStatus) throws ApiException {
        com.squareup.okhttp.Call call = retrieveAllSavingsAccountChargesValidateBeforeCall(savingsAccountId, chargeStatus, null, null);
        Type localVarReturnType = new TypeToken<List<GetSavingsAccountsSavingsAccountIdChargesResponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Savings Charges (asynchronously)
     * Lists Savings Charges  Example Requests:  savingsaccounts/1/charges  savingsaccounts/1/charges?chargeStatus&#x3D;all  savingsaccounts/1/charges?chargeStatus&#x3D;inactive  savingsaccounts/1/charges?chargeStatus&#x3D;active  savingsaccounts/1/charges?fields&#x3D;name,amountOrPercentage
     * @param savingsAccountId savingsAccountId (required)
     * @param chargeStatus chargeStatus (optional, default to all)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveAllSavingsAccountChargesAsync(Long savingsAccountId, String chargeStatus, final ApiCallback<List<GetSavingsAccountsSavingsAccountIdChargesResponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveAllSavingsAccountChargesValidateBeforeCall(savingsAccountId, chargeStatus, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<GetSavingsAccountsSavingsAccountIdChargesResponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveSavingsAccountCharge
     * @param savingsAccountId savingsAccountId (required)
     * @param savingsAccountChargeId savingsAccountChargeId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveSavingsAccountChargeCall(Long savingsAccountId, Long savingsAccountChargeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/savingsaccounts/{savingsAccountId}/charges/{savingsAccountChargeId}"
            .replaceAll("\\{" + "savingsAccountId" + "\\}", apiClient.escapeString(savingsAccountId.toString()))
            .replaceAll("\\{" + "savingsAccountChargeId" + "\\}", apiClient.escapeString(savingsAccountChargeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveSavingsAccountChargeValidateBeforeCall(Long savingsAccountId, Long savingsAccountChargeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'savingsAccountId' is set
        if (savingsAccountId == null) {
            throw new ApiException("Missing the required parameter 'savingsAccountId' when calling retrieveSavingsAccountCharge(Async)");
        }
        
        // verify the required parameter 'savingsAccountChargeId' is set
        if (savingsAccountChargeId == null) {
            throw new ApiException("Missing the required parameter 'savingsAccountChargeId' when calling retrieveSavingsAccountCharge(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveSavingsAccountChargeCall(savingsAccountId, savingsAccountChargeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a Savings account Charge
     * Retrieves a Savings account Charge  Example Requests:  /savingsaccounts/1/charges/5   /savingsaccounts/1/charges/5?fields&#x3D;name,amountOrPercentage
     * @param savingsAccountId savingsAccountId (required)
     * @param savingsAccountChargeId savingsAccountChargeId (required)
     * @return GetSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse retrieveSavingsAccountCharge(Long savingsAccountId, Long savingsAccountChargeId) throws ApiException {
        ApiResponse<GetSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse> resp = retrieveSavingsAccountChargeWithHttpInfo(savingsAccountId, savingsAccountChargeId);
        return resp.getData();
    }

    /**
     * Retrieve a Savings account Charge
     * Retrieves a Savings account Charge  Example Requests:  /savingsaccounts/1/charges/5   /savingsaccounts/1/charges/5?fields&#x3D;name,amountOrPercentage
     * @param savingsAccountId savingsAccountId (required)
     * @param savingsAccountChargeId savingsAccountChargeId (required)
     * @return ApiResponse&lt;GetSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse> retrieveSavingsAccountChargeWithHttpInfo(Long savingsAccountId, Long savingsAccountChargeId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveSavingsAccountChargeValidateBeforeCall(savingsAccountId, savingsAccountChargeId, null, null);
        Type localVarReturnType = new TypeToken<GetSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a Savings account Charge (asynchronously)
     * Retrieves a Savings account Charge  Example Requests:  /savingsaccounts/1/charges/5   /savingsaccounts/1/charges/5?fields&#x3D;name,amountOrPercentage
     * @param savingsAccountId savingsAccountId (required)
     * @param savingsAccountChargeId savingsAccountChargeId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveSavingsAccountChargeAsync(Long savingsAccountId, Long savingsAccountChargeId, final ApiCallback<GetSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveSavingsAccountChargeValidateBeforeCall(savingsAccountId, savingsAccountChargeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveTemplate
     * @param savingsAccountId savingsAccountId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveTemplateCall(Long savingsAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/savingsaccounts/{savingsAccountId}/charges/template"
            .replaceAll("\\{" + "savingsAccountId" + "\\}", apiClient.escapeString(savingsAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveTemplateValidateBeforeCall(Long savingsAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'savingsAccountId' is set
        if (savingsAccountId == null) {
            throw new ApiException("Missing the required parameter 'savingsAccountId' when calling retrieveTemplate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveTemplateCall(savingsAccountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve Savings Charges Template
     * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists Example Request:  savingsaccounts/1/charges/template
     * @param savingsAccountId savingsAccountId (required)
     * @return GetSavingsAccountsSavingsAccountIdChargesTemplateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetSavingsAccountsSavingsAccountIdChargesTemplateResponse retrieveTemplate(Long savingsAccountId) throws ApiException {
        ApiResponse<GetSavingsAccountsSavingsAccountIdChargesTemplateResponse> resp = retrieveTemplateWithHttpInfo(savingsAccountId);
        return resp.getData();
    }

    /**
     * Retrieve Savings Charges Template
     * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists Example Request:  savingsaccounts/1/charges/template
     * @param savingsAccountId savingsAccountId (required)
     * @return ApiResponse&lt;GetSavingsAccountsSavingsAccountIdChargesTemplateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetSavingsAccountsSavingsAccountIdChargesTemplateResponse> retrieveTemplateWithHttpInfo(Long savingsAccountId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveTemplateValidateBeforeCall(savingsAccountId, null, null);
        Type localVarReturnType = new TypeToken<GetSavingsAccountsSavingsAccountIdChargesTemplateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve Savings Charges Template (asynchronously)
     * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists Example Request:  savingsaccounts/1/charges/template
     * @param savingsAccountId savingsAccountId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveTemplateAsync(Long savingsAccountId, final ApiCallback<GetSavingsAccountsSavingsAccountIdChargesTemplateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveTemplateValidateBeforeCall(savingsAccountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetSavingsAccountsSavingsAccountIdChargesTemplateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateSavingsAccountCharge
     * @param savingsAccountId savingsAccountId (required)
     * @param savingsAccountChargeId savingsAccountChargeId (required)
     * @param body body (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSavingsAccountChargeCall(Long savingsAccountId, Long savingsAccountChargeId, PutSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/savingsaccounts/{savingsAccountId}/charges/{savingsAccountChargeId}"
            .replaceAll("\\{" + "savingsAccountId" + "\\}", apiClient.escapeString(savingsAccountId.toString()))
            .replaceAll("\\{" + "savingsAccountChargeId" + "\\}", apiClient.escapeString(savingsAccountChargeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSavingsAccountChargeValidateBeforeCall(Long savingsAccountId, Long savingsAccountChargeId, PutSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'savingsAccountId' is set
        if (savingsAccountId == null) {
            throw new ApiException("Missing the required parameter 'savingsAccountId' when calling updateSavingsAccountCharge(Async)");
        }
        
        // verify the required parameter 'savingsAccountChargeId' is set
        if (savingsAccountChargeId == null) {
            throw new ApiException("Missing the required parameter 'savingsAccountChargeId' when calling updateSavingsAccountCharge(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateSavingsAccountCharge(Async)");
        }
        

        com.squareup.okhttp.Call call = updateSavingsAccountChargeCall(savingsAccountId, savingsAccountChargeId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a Savings account Charge
     * Currently Savings account Charges may be updated only if the Savings account is not yet approved.
     * @param savingsAccountId savingsAccountId (required)
     * @param savingsAccountChargeId savingsAccountChargeId (required)
     * @param body body (required)
     * @return PutSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PutSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse updateSavingsAccountCharge(Long savingsAccountId, Long savingsAccountChargeId, PutSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest body) throws ApiException {
        ApiResponse<PutSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse> resp = updateSavingsAccountChargeWithHttpInfo(savingsAccountId, savingsAccountChargeId, body);
        return resp.getData();
    }

    /**
     * Update a Savings account Charge
     * Currently Savings account Charges may be updated only if the Savings account is not yet approved.
     * @param savingsAccountId savingsAccountId (required)
     * @param savingsAccountChargeId savingsAccountChargeId (required)
     * @param body body (required)
     * @return ApiResponse&lt;PutSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PutSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse> updateSavingsAccountChargeWithHttpInfo(Long savingsAccountId, Long savingsAccountChargeId, PutSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest body) throws ApiException {
        com.squareup.okhttp.Call call = updateSavingsAccountChargeValidateBeforeCall(savingsAccountId, savingsAccountChargeId, body, null, null);
        Type localVarReturnType = new TypeToken<PutSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a Savings account Charge (asynchronously)
     * Currently Savings account Charges may be updated only if the Savings account is not yet approved.
     * @param savingsAccountId savingsAccountId (required)
     * @param savingsAccountChargeId savingsAccountChargeId (required)
     * @param body body (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSavingsAccountChargeAsync(Long savingsAccountId, Long savingsAccountChargeId, PutSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest body, final ApiCallback<PutSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSavingsAccountChargeValidateBeforeCall(savingsAccountId, savingsAccountChargeId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PutSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
