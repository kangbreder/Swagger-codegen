/*
 * Apache Fineract API Documentation
 * Apache Fineract is a secure, multi-tenanted microfinance platform. <br />              The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The reference app [  https://demo.openmf.org  ] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation.              <br/>The API                 is organized around REST [ https://en.wikipedia.org/wiki/Representational_state_transfer ]               <br/> Find out more about Apache Fineract on [ https://demo.openmf.org/api-docs/apiLive.htm#top ]              <br/> You can Try The API From Your Browser itself at [ https://demo.openmf.org/api-docs/apiLive.htm#interact ]              <br/> The Generic Options are available at [ https://demo.openmf.org/api-docs/apiLive.htm#genopts ]              <br/> Find out more about Updating Dates and Numbers at [ https://demo.openmf.org/api-docs/apiLive.htm#dates_and_numbers ]              <br/> For the Authentication and the Basic of HTTP and HTTPS refer [ https://demo.openmf.org/api-docs/apiLive.htm#authentication_overview ]              <br/> Check about ERROR codes at [ https://demo.openmf.org/api-docs/apiLive.htm#errors ]               <br/> <br/> Please refer to the old documentation for any documentation queries [ https://demo.openmf.org/api-docs/apiLive.htm ]              <br/>             ______________________________________________________________________________________________________________________________          
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.DeleteDataTablesDatatableAppTableIdDatatableIdResponse;
import io.swagger.client.model.DeleteDataTablesDatatableAppTableIdResponse;
import io.swagger.client.model.DeleteDataTablesResponse;
import io.swagger.client.model.GetDataTablesAppTableIdResponse;
import io.swagger.client.model.GetDataTablesResponse;
import io.swagger.client.model.PostDataTablesAppTableIdRequest;
import io.swagger.client.model.PostDataTablesAppTableIdResponse;
import io.swagger.client.model.PostDataTablesRegisterDatatableAppTable;
import io.swagger.client.model.PostDataTablesRequest;
import io.swagger.client.model.PostDataTablesResponse;
import io.swagger.client.model.PutDataTablesAppTableIdDatatableIdRequest;
import io.swagger.client.model.PutDataTablesAppTableIdDatatableIdResponse;
import io.swagger.client.model.PutDataTablesAppTableIdRequest;
import io.swagger.client.model.PutDataTablesAppTableIdResponse;
import io.swagger.client.model.PutDataTablesRequest;
import io.swagger.client.model.PutDataTablesResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DataTablesApi {
    private ApiClient apiClient;

    public DataTablesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DataTablesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createDatatable
     * @param body body (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDatatableCall(PostDataTablesRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/datatables";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDatatableValidateBeforeCall(PostDataTablesRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createDatatable(Async)");
        }
        

        com.squareup.okhttp.Call call = createDatatableCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create Data Table
     * Create a new data table and registers it with the Apache Fineract Core application table.  Field Descriptions  Mandatory - datatableName :   The name of the Data Table.  Mandatory - apptableName  Application table name. Must be one of the following:  m_client  m_group  m_loan  m_office  m_saving_account  m_product_loan  m_savings_product  Mandatory - columns   An array of columns in the new Data Table.  Optional - multiRow  Allows to create multiple entries in the Data Table. Optional, defaults to false. If this property is not provided Data Table will allow only one entry.  Field Descriptions - columns  Mandatory - name  Name of the created column. Can contain only alphanumeric characters, underscores and spaces, but cannot start with a number. Cannot start or end with an underscore or space.  Mandatory - type  Column type. Must be one of the following:  Boolean  Date  DateTime  Decimal  Dropdown   Number  String  Text  Mandatory [type &#x3D; Dropdown] - code  Used in Code Value fields. Column name becomes: code_cd_name. Mandatory if using type Dropdown, otherwise an error is returned.  Optional - mandatory  Determines whether this column must have a value in every entry. Optional, defaults to false.  Mandatory [type &#x3D; String] - length  Length of the text field. Mandatory if type String is used, otherwise an error is returned.
     * @param body body (required)
     * @return PostDataTablesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PostDataTablesResponse createDatatable(PostDataTablesRequest body) throws ApiException {
        ApiResponse<PostDataTablesResponse> resp = createDatatableWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create Data Table
     * Create a new data table and registers it with the Apache Fineract Core application table.  Field Descriptions  Mandatory - datatableName :   The name of the Data Table.  Mandatory - apptableName  Application table name. Must be one of the following:  m_client  m_group  m_loan  m_office  m_saving_account  m_product_loan  m_savings_product  Mandatory - columns   An array of columns in the new Data Table.  Optional - multiRow  Allows to create multiple entries in the Data Table. Optional, defaults to false. If this property is not provided Data Table will allow only one entry.  Field Descriptions - columns  Mandatory - name  Name of the created column. Can contain only alphanumeric characters, underscores and spaces, but cannot start with a number. Cannot start or end with an underscore or space.  Mandatory - type  Column type. Must be one of the following:  Boolean  Date  DateTime  Decimal  Dropdown   Number  String  Text  Mandatory [type &#x3D; Dropdown] - code  Used in Code Value fields. Column name becomes: code_cd_name. Mandatory if using type Dropdown, otherwise an error is returned.  Optional - mandatory  Determines whether this column must have a value in every entry. Optional, defaults to false.  Mandatory [type &#x3D; String] - length  Length of the text field. Mandatory if type String is used, otherwise an error is returned.
     * @param body body (required)
     * @return ApiResponse&lt;PostDataTablesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PostDataTablesResponse> createDatatableWithHttpInfo(PostDataTablesRequest body) throws ApiException {
        com.squareup.okhttp.Call call = createDatatableValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<PostDataTablesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Data Table (asynchronously)
     * Create a new data table and registers it with the Apache Fineract Core application table.  Field Descriptions  Mandatory - datatableName :   The name of the Data Table.  Mandatory - apptableName  Application table name. Must be one of the following:  m_client  m_group  m_loan  m_office  m_saving_account  m_product_loan  m_savings_product  Mandatory - columns   An array of columns in the new Data Table.  Optional - multiRow  Allows to create multiple entries in the Data Table. Optional, defaults to false. If this property is not provided Data Table will allow only one entry.  Field Descriptions - columns  Mandatory - name  Name of the created column. Can contain only alphanumeric characters, underscores and spaces, but cannot start with a number. Cannot start or end with an underscore or space.  Mandatory - type  Column type. Must be one of the following:  Boolean  Date  DateTime  Decimal  Dropdown   Number  String  Text  Mandatory [type &#x3D; Dropdown] - code  Used in Code Value fields. Column name becomes: code_cd_name. Mandatory if using type Dropdown, otherwise an error is returned.  Optional - mandatory  Determines whether this column must have a value in every entry. Optional, defaults to false.  Mandatory [type &#x3D; String] - length  Length of the text field. Mandatory if type String is used, otherwise an error is returned.
     * @param body body (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDatatableAsync(PostDataTablesRequest body, final ApiCallback<PostDataTablesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDatatableValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PostDataTablesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createDatatableEntry
     * @param datatable datatable (required)
     * @param apptableId apptableId (required)
     * @param body body (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDatatableEntryCall(String datatable, Long apptableId, PostDataTablesAppTableIdRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/datatables/{datatable}/{apptableId}"
            .replaceAll("\\{" + "datatable" + "\\}", apiClient.escapeString(datatable.toString()))
            .replaceAll("\\{" + "apptableId" + "\\}", apiClient.escapeString(apptableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDatatableEntryValidateBeforeCall(String datatable, Long apptableId, PostDataTablesAppTableIdRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'datatable' is set
        if (datatable == null) {
            throw new ApiException("Missing the required parameter 'datatable' when calling createDatatableEntry(Async)");
        }
        
        // verify the required parameter 'apptableId' is set
        if (apptableId == null) {
            throw new ApiException("Missing the required parameter 'apptableId' when calling createDatatableEntry(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createDatatableEntry(Async)");
        }
        

        com.squareup.okhttp.Call call = createDatatableEntryCall(datatable, apptableId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create Entry in Data Table
     * Adds a row to the data table.  Note that the default datatable UI functionality converts any field name containing spaces to underscores when using the API. This means the field name \&quot;Business Description\&quot; is considered the same as \&quot;Business_Description\&quot;. So you shouldn&#39;t have both \&quot;versions\&quot; in any data table.
     * @param datatable datatable (required)
     * @param apptableId apptableId (required)
     * @param body body (required)
     * @return PostDataTablesAppTableIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PostDataTablesAppTableIdResponse createDatatableEntry(String datatable, Long apptableId, PostDataTablesAppTableIdRequest body) throws ApiException {
        ApiResponse<PostDataTablesAppTableIdResponse> resp = createDatatableEntryWithHttpInfo(datatable, apptableId, body);
        return resp.getData();
    }

    /**
     * Create Entry in Data Table
     * Adds a row to the data table.  Note that the default datatable UI functionality converts any field name containing spaces to underscores when using the API. This means the field name \&quot;Business Description\&quot; is considered the same as \&quot;Business_Description\&quot;. So you shouldn&#39;t have both \&quot;versions\&quot; in any data table.
     * @param datatable datatable (required)
     * @param apptableId apptableId (required)
     * @param body body (required)
     * @return ApiResponse&lt;PostDataTablesAppTableIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PostDataTablesAppTableIdResponse> createDatatableEntryWithHttpInfo(String datatable, Long apptableId, PostDataTablesAppTableIdRequest body) throws ApiException {
        com.squareup.okhttp.Call call = createDatatableEntryValidateBeforeCall(datatable, apptableId, body, null, null);
        Type localVarReturnType = new TypeToken<PostDataTablesAppTableIdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Entry in Data Table (asynchronously)
     * Adds a row to the data table.  Note that the default datatable UI functionality converts any field name containing spaces to underscores when using the API. This means the field name \&quot;Business Description\&quot; is considered the same as \&quot;Business_Description\&quot;. So you shouldn&#39;t have both \&quot;versions\&quot; in any data table.
     * @param datatable datatable (required)
     * @param apptableId apptableId (required)
     * @param body body (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDatatableEntryAsync(String datatable, Long apptableId, PostDataTablesAppTableIdRequest body, final ApiCallback<PostDataTablesAppTableIdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDatatableEntryValidateBeforeCall(datatable, apptableId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PostDataTablesAppTableIdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteDatatable
     * @param datatableName datatableName (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDatatableCall(String datatableName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datatables/{datatableName}"
            .replaceAll("\\{" + "datatableName" + "\\}", apiClient.escapeString(datatableName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDatatableValidateBeforeCall(String datatableName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'datatableName' is set
        if (datatableName == null) {
            throw new ApiException("Missing the required parameter 'datatableName' when calling deleteDatatable(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteDatatableCall(datatableName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete Data Table
     * Deletes a data table and deregisters it from the Apache Fineract Core application table.
     * @param datatableName datatableName (required)
     * @return DeleteDataTablesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeleteDataTablesResponse deleteDatatable(String datatableName) throws ApiException {
        ApiResponse<DeleteDataTablesResponse> resp = deleteDatatableWithHttpInfo(datatableName);
        return resp.getData();
    }

    /**
     * Delete Data Table
     * Deletes a data table and deregisters it from the Apache Fineract Core application table.
     * @param datatableName datatableName (required)
     * @return ApiResponse&lt;DeleteDataTablesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeleteDataTablesResponse> deleteDatatableWithHttpInfo(String datatableName) throws ApiException {
        com.squareup.okhttp.Call call = deleteDatatableValidateBeforeCall(datatableName, null, null);
        Type localVarReturnType = new TypeToken<DeleteDataTablesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Data Table (asynchronously)
     * Deletes a data table and deregisters it from the Apache Fineract Core application table.
     * @param datatableName datatableName (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDatatableAsync(String datatableName, final ApiCallback<DeleteDataTablesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDatatableValidateBeforeCall(datatableName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeleteDataTablesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteDatatableEntries
     * @param datatable datatable (required)
     * @param apptableId apptableId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDatatableEntriesCall(String datatable, Long apptableId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datatables/{datatable}/{apptableId}"
            .replaceAll("\\{" + "datatable" + "\\}", apiClient.escapeString(datatable.toString()))
            .replaceAll("\\{" + "apptableId" + "\\}", apiClient.escapeString(apptableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDatatableEntriesValidateBeforeCall(String datatable, Long apptableId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'datatable' is set
        if (datatable == null) {
            throw new ApiException("Missing the required parameter 'datatable' when calling deleteDatatableEntries(Async)");
        }
        
        // verify the required parameter 'apptableId' is set
        if (apptableId == null) {
            throw new ApiException("Missing the required parameter 'apptableId' when calling deleteDatatableEntries(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteDatatableEntriesCall(datatable, apptableId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete Entry(s) in Data Table
     * Deletes the entry (if it exists) for data tables that are one-to-one with the application table.  Deletes the entries (if they exist) for data tables that are one-to-many with the application table.
     * @param datatable datatable (required)
     * @param apptableId apptableId (required)
     * @return DeleteDataTablesDatatableAppTableIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeleteDataTablesDatatableAppTableIdResponse deleteDatatableEntries(String datatable, Long apptableId) throws ApiException {
        ApiResponse<DeleteDataTablesDatatableAppTableIdResponse> resp = deleteDatatableEntriesWithHttpInfo(datatable, apptableId);
        return resp.getData();
    }

    /**
     * Delete Entry(s) in Data Table
     * Deletes the entry (if it exists) for data tables that are one-to-one with the application table.  Deletes the entries (if they exist) for data tables that are one-to-many with the application table.
     * @param datatable datatable (required)
     * @param apptableId apptableId (required)
     * @return ApiResponse&lt;DeleteDataTablesDatatableAppTableIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeleteDataTablesDatatableAppTableIdResponse> deleteDatatableEntriesWithHttpInfo(String datatable, Long apptableId) throws ApiException {
        com.squareup.okhttp.Call call = deleteDatatableEntriesValidateBeforeCall(datatable, apptableId, null, null);
        Type localVarReturnType = new TypeToken<DeleteDataTablesDatatableAppTableIdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Entry(s) in Data Table (asynchronously)
     * Deletes the entry (if it exists) for data tables that are one-to-one with the application table.  Deletes the entries (if they exist) for data tables that are one-to-many with the application table.
     * @param datatable datatable (required)
     * @param apptableId apptableId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDatatableEntriesAsync(String datatable, Long apptableId, final ApiCallback<DeleteDataTablesDatatableAppTableIdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDatatableEntriesValidateBeforeCall(datatable, apptableId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeleteDataTablesDatatableAppTableIdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteDatatableEntries_0
     * @param datatable datatable (required)
     * @param apptableId apptableId (required)
     * @param datatableId datatableId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDatatableEntries_0Call(Object datatable, Long apptableId, Long datatableId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datatables/{datatable}/{apptableId}/{datatableId}"
            .replaceAll("\\{" + "datatable" + "\\}", apiClient.escapeString(datatable.toString()))
            .replaceAll("\\{" + "apptableId" + "\\}", apiClient.escapeString(apptableId.toString()))
            .replaceAll("\\{" + "datatableId" + "\\}", apiClient.escapeString(datatableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDatatableEntries_0ValidateBeforeCall(Object datatable, Long apptableId, Long datatableId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'datatable' is set
        if (datatable == null) {
            throw new ApiException("Missing the required parameter 'datatable' when calling deleteDatatableEntries_0(Async)");
        }
        
        // verify the required parameter 'apptableId' is set
        if (apptableId == null) {
            throw new ApiException("Missing the required parameter 'apptableId' when calling deleteDatatableEntries_0(Async)");
        }
        
        // verify the required parameter 'datatableId' is set
        if (datatableId == null) {
            throw new ApiException("Missing the required parameter 'datatableId' when calling deleteDatatableEntries_0(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteDatatableEntries_0Call(datatable, apptableId, datatableId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete Entry in Datatable (One to Many)
     * Deletes the entry (if it exists) for data tables that are one to many with the application table.  
     * @param datatable datatable (required)
     * @param apptableId apptableId (required)
     * @param datatableId datatableId (required)
     * @return DeleteDataTablesDatatableAppTableIdDatatableIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeleteDataTablesDatatableAppTableIdDatatableIdResponse deleteDatatableEntries_0(Object datatable, Long apptableId, Long datatableId) throws ApiException {
        ApiResponse<DeleteDataTablesDatatableAppTableIdDatatableIdResponse> resp = deleteDatatableEntries_0WithHttpInfo(datatable, apptableId, datatableId);
        return resp.getData();
    }

    /**
     * Delete Entry in Datatable (One to Many)
     * Deletes the entry (if it exists) for data tables that are one to many with the application table.  
     * @param datatable datatable (required)
     * @param apptableId apptableId (required)
     * @param datatableId datatableId (required)
     * @return ApiResponse&lt;DeleteDataTablesDatatableAppTableIdDatatableIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeleteDataTablesDatatableAppTableIdDatatableIdResponse> deleteDatatableEntries_0WithHttpInfo(Object datatable, Long apptableId, Long datatableId) throws ApiException {
        com.squareup.okhttp.Call call = deleteDatatableEntries_0ValidateBeforeCall(datatable, apptableId, datatableId, null, null);
        Type localVarReturnType = new TypeToken<DeleteDataTablesDatatableAppTableIdDatatableIdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Entry in Datatable (One to Many) (asynchronously)
     * Deletes the entry (if it exists) for data tables that are one to many with the application table.  
     * @param datatable datatable (required)
     * @param apptableId apptableId (required)
     * @param datatableId datatableId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDatatableEntries_0Async(Object datatable, Long apptableId, Long datatableId, final ApiCallback<DeleteDataTablesDatatableAppTableIdDatatableIdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDatatableEntries_0ValidateBeforeCall(datatable, apptableId, datatableId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeleteDataTablesDatatableAppTableIdDatatableIdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deregisterDatatable
     * @param datatable datatable (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deregisterDatatableCall(String datatable, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datatables/deregister/{datatable}"
            .replaceAll("\\{" + "datatable" + "\\}", apiClient.escapeString(datatable.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deregisterDatatableValidateBeforeCall(String datatable, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'datatable' is set
        if (datatable == null) {
            throw new ApiException("Missing the required parameter 'datatable' when calling deregisterDatatable(Async)");
        }
        

        com.squareup.okhttp.Call call = deregisterDatatableCall(datatable, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deregister Data Table
     * Deregisters a data table. It will no longer be available through the API.
     * @param datatable datatable (required)
     * @return PutDataTablesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PutDataTablesResponse deregisterDatatable(String datatable) throws ApiException {
        ApiResponse<PutDataTablesResponse> resp = deregisterDatatableWithHttpInfo(datatable);
        return resp.getData();
    }

    /**
     * Deregister Data Table
     * Deregisters a data table. It will no longer be available through the API.
     * @param datatable datatable (required)
     * @return ApiResponse&lt;PutDataTablesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PutDataTablesResponse> deregisterDatatableWithHttpInfo(String datatable) throws ApiException {
        com.squareup.okhttp.Call call = deregisterDatatableValidateBeforeCall(datatable, null, null);
        Type localVarReturnType = new TypeToken<PutDataTablesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deregister Data Table (asynchronously)
     * Deregisters a data table. It will no longer be available through the API.
     * @param datatable datatable (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deregisterDatatableAsync(String datatable, final ApiCallback<PutDataTablesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deregisterDatatableValidateBeforeCall(datatable, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PutDataTablesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDatatable
     * @param datatable datatable (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDatatableCall(String datatable, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datatables/{datatable}"
            .replaceAll("\\{" + "datatable" + "\\}", apiClient.escapeString(datatable.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDatatableValidateBeforeCall(String datatable, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'datatable' is set
        if (datatable == null) {
            throw new ApiException("Missing the required parameter 'datatable' when calling getDatatable(Async)");
        }
        

        com.squareup.okhttp.Call call = getDatatableCall(datatable, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve Data Table Details
     * Lists a registered data table details and the Apache Fineract Core application table they are registered to.
     * @param datatable datatable (required)
     * @return GetDataTablesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetDataTablesResponse getDatatable(String datatable) throws ApiException {
        ApiResponse<GetDataTablesResponse> resp = getDatatableWithHttpInfo(datatable);
        return resp.getData();
    }

    /**
     * Retrieve Data Table Details
     * Lists a registered data table details and the Apache Fineract Core application table they are registered to.
     * @param datatable datatable (required)
     * @return ApiResponse&lt;GetDataTablesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetDataTablesResponse> getDatatableWithHttpInfo(String datatable) throws ApiException {
        com.squareup.okhttp.Call call = getDatatableValidateBeforeCall(datatable, null, null);
        Type localVarReturnType = new TypeToken<GetDataTablesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve Data Table Details (asynchronously)
     * Lists a registered data table details and the Apache Fineract Core application table they are registered to.
     * @param datatable datatable (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDatatableAsync(String datatable, final ApiCallback<GetDataTablesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDatatableValidateBeforeCall(datatable, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetDataTablesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDatatableManyEntry
     * @param datatable  (required)
     * @param apptableId  (required)
     * @param datatableId  (required)
     * @param order  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDatatableManyEntryCall(String datatable, Long apptableId, Long datatableId, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datatables/{datatable}/{apptableId}/{datatableId}"
            .replaceAll("\\{" + "datatable" + "\\}", apiClient.escapeString(datatable.toString()))
            .replaceAll("\\{" + "apptableId" + "\\}", apiClient.escapeString(apptableId.toString()))
            .replaceAll("\\{" + "datatableId" + "\\}", apiClient.escapeString(datatableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order", order));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDatatableManyEntryValidateBeforeCall(String datatable, Long apptableId, Long datatableId, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'datatable' is set
        if (datatable == null) {
            throw new ApiException("Missing the required parameter 'datatable' when calling getDatatableManyEntry(Async)");
        }
        
        // verify the required parameter 'apptableId' is set
        if (apptableId == null) {
            throw new ApiException("Missing the required parameter 'apptableId' when calling getDatatableManyEntry(Async)");
        }
        
        // verify the required parameter 'datatableId' is set
        if (datatableId == null) {
            throw new ApiException("Missing the required parameter 'datatableId' when calling getDatatableManyEntry(Async)");
        }
        

        com.squareup.okhttp.Call call = getDatatableManyEntryCall(datatable, apptableId, datatableId, order, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param datatable  (required)
     * @param apptableId  (required)
     * @param datatableId  (required)
     * @param order  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getDatatableManyEntry(String datatable, Long apptableId, Long datatableId, String order) throws ApiException {
        ApiResponse<String> resp = getDatatableManyEntryWithHttpInfo(datatable, apptableId, datatableId, order);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param datatable  (required)
     * @param apptableId  (required)
     * @param datatableId  (required)
     * @param order  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getDatatableManyEntryWithHttpInfo(String datatable, Long apptableId, Long datatableId, String order) throws ApiException {
        com.squareup.okhttp.Call call = getDatatableManyEntryValidateBeforeCall(datatable, apptableId, datatableId, order, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param datatable  (required)
     * @param apptableId  (required)
     * @param datatableId  (required)
     * @param order  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDatatableManyEntryAsync(String datatable, Long apptableId, Long datatableId, String order, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDatatableManyEntryValidateBeforeCall(datatable, apptableId, datatableId, order, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDatatable_0
     * @param datatable datatable (required)
     * @param apptableId apptableId (required)
     * @param order order (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDatatable_0Call(String datatable, Long apptableId, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datatables/{datatable}/{apptableId}"
            .replaceAll("\\{" + "datatable" + "\\}", apiClient.escapeString(datatable.toString()))
            .replaceAll("\\{" + "apptableId" + "\\}", apiClient.escapeString(apptableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order", order));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDatatable_0ValidateBeforeCall(String datatable, Long apptableId, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'datatable' is set
        if (datatable == null) {
            throw new ApiException("Missing the required parameter 'datatable' when calling getDatatable_0(Async)");
        }
        
        // verify the required parameter 'apptableId' is set
        if (apptableId == null) {
            throw new ApiException("Missing the required parameter 'apptableId' when calling getDatatable_0(Async)");
        }
        

        com.squareup.okhttp.Call call = getDatatable_0Call(datatable, apptableId, order, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve Entry(s) from Data Table
     * Gets the entry (if it exists) for data tables that are one to one with the application table.  Gets the entries (if they exist) for data tables that are one to many with the application table.  Note: The &#39;fields&#39; parameter is not available for datatables.  ARGUMENTS orderoptional Specifies the order in which data is returned.genericResultSetoptional, defaults to false If &#39;true&#39; an optimised JSON format is returned suitable for tabular display of data. This format is used by the default data tables UI functionality. Example Requests:  datatables/extra_client_details/1   datatables/extra_family_details/1?order&#x3D;&#x60;Date of Birth&#x60; desc   datatables/extra_client_details/1?genericResultSet&#x3D;true
     * @param datatable datatable (required)
     * @param apptableId apptableId (required)
     * @param order order (optional)
     * @return GetDataTablesAppTableIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetDataTablesAppTableIdResponse getDatatable_0(String datatable, Long apptableId, String order) throws ApiException {
        ApiResponse<GetDataTablesAppTableIdResponse> resp = getDatatable_0WithHttpInfo(datatable, apptableId, order);
        return resp.getData();
    }

    /**
     * Retrieve Entry(s) from Data Table
     * Gets the entry (if it exists) for data tables that are one to one with the application table.  Gets the entries (if they exist) for data tables that are one to many with the application table.  Note: The &#39;fields&#39; parameter is not available for datatables.  ARGUMENTS orderoptional Specifies the order in which data is returned.genericResultSetoptional, defaults to false If &#39;true&#39; an optimised JSON format is returned suitable for tabular display of data. This format is used by the default data tables UI functionality. Example Requests:  datatables/extra_client_details/1   datatables/extra_family_details/1?order&#x3D;&#x60;Date of Birth&#x60; desc   datatables/extra_client_details/1?genericResultSet&#x3D;true
     * @param datatable datatable (required)
     * @param apptableId apptableId (required)
     * @param order order (optional)
     * @return ApiResponse&lt;GetDataTablesAppTableIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetDataTablesAppTableIdResponse> getDatatable_0WithHttpInfo(String datatable, Long apptableId, String order) throws ApiException {
        com.squareup.okhttp.Call call = getDatatable_0ValidateBeforeCall(datatable, apptableId, order, null, null);
        Type localVarReturnType = new TypeToken<GetDataTablesAppTableIdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve Entry(s) from Data Table (asynchronously)
     * Gets the entry (if it exists) for data tables that are one to one with the application table.  Gets the entries (if they exist) for data tables that are one to many with the application table.  Note: The &#39;fields&#39; parameter is not available for datatables.  ARGUMENTS orderoptional Specifies the order in which data is returned.genericResultSetoptional, defaults to false If &#39;true&#39; an optimised JSON format is returned suitable for tabular display of data. This format is used by the default data tables UI functionality. Example Requests:  datatables/extra_client_details/1   datatables/extra_family_details/1?order&#x3D;&#x60;Date of Birth&#x60; desc   datatables/extra_client_details/1?genericResultSet&#x3D;true
     * @param datatable datatable (required)
     * @param apptableId apptableId (required)
     * @param order order (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDatatable_0Async(String datatable, Long apptableId, String order, final ApiCallback<GetDataTablesAppTableIdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDatatable_0ValidateBeforeCall(datatable, apptableId, order, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetDataTablesAppTableIdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDatatables
     * @param apptable apptable (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDatatablesCall(String apptable, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datatables";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apptable != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apptable", apptable));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDatatablesValidateBeforeCall(String apptable, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getDatatablesCall(apptable, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Data Tables
     * Lists registered data tables and the Apache Fineract Core application table they are registered to.  ARGUMENTS  apptable  - optional The Apache Fineract core application table.  Example Requests:  datatables?apptable&#x3D;m_client   datatables
     * @param apptable apptable (optional)
     * @return List&lt;GetDataTablesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<GetDataTablesResponse> getDatatables(String apptable) throws ApiException {
        ApiResponse<List<GetDataTablesResponse>> resp = getDatatablesWithHttpInfo(apptable);
        return resp.getData();
    }

    /**
     * List Data Tables
     * Lists registered data tables and the Apache Fineract Core application table they are registered to.  ARGUMENTS  apptable  - optional The Apache Fineract core application table.  Example Requests:  datatables?apptable&#x3D;m_client   datatables
     * @param apptable apptable (optional)
     * @return ApiResponse&lt;List&lt;GetDataTablesResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<GetDataTablesResponse>> getDatatablesWithHttpInfo(String apptable) throws ApiException {
        com.squareup.okhttp.Call call = getDatatablesValidateBeforeCall(apptable, null, null);
        Type localVarReturnType = new TypeToken<List<GetDataTablesResponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Data Tables (asynchronously)
     * Lists registered data tables and the Apache Fineract Core application table they are registered to.  ARGUMENTS  apptable  - optional The Apache Fineract core application table.  Example Requests:  datatables?apptable&#x3D;m_client   datatables
     * @param apptable apptable (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDatatablesAsync(String apptable, final ApiCallback<List<GetDataTablesResponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDatatablesValidateBeforeCall(apptable, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<GetDataTablesResponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for registerDatatable
     * @param datatable datatable (required)
     * @param apptable apptable (required)
     * @param body body (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call registerDatatableCall(String datatable, String apptable, PostDataTablesRegisterDatatableAppTable body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/datatables/register/{datatable}/{apptable}"
            .replaceAll("\\{" + "datatable" + "\\}", apiClient.escapeString(datatable.toString()))
            .replaceAll("\\{" + "apptable" + "\\}", apiClient.escapeString(apptable.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call registerDatatableValidateBeforeCall(String datatable, String apptable, PostDataTablesRegisterDatatableAppTable body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'datatable' is set
        if (datatable == null) {
            throw new ApiException("Missing the required parameter 'datatable' when calling registerDatatable(Async)");
        }
        
        // verify the required parameter 'apptable' is set
        if (apptable == null) {
            throw new ApiException("Missing the required parameter 'apptable' when calling registerDatatable(Async)");
        }
        

        com.squareup.okhttp.Call call = registerDatatableCall(datatable, apptable, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Register Data Table
     * Registers a data table with the Apache Fineract Core application table. This allows the data table to be maintained through the API. In case the datatable is a PPI (survey table), a parameter category should be pass along with the request. The API currently support one category (200)
     * @param datatable datatable (required)
     * @param apptable apptable (required)
     * @param body body (optional)
     * @return PutDataTablesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PutDataTablesResponse registerDatatable(String datatable, String apptable, PostDataTablesRegisterDatatableAppTable body) throws ApiException {
        ApiResponse<PutDataTablesResponse> resp = registerDatatableWithHttpInfo(datatable, apptable, body);
        return resp.getData();
    }

    /**
     * Register Data Table
     * Registers a data table with the Apache Fineract Core application table. This allows the data table to be maintained through the API. In case the datatable is a PPI (survey table), a parameter category should be pass along with the request. The API currently support one category (200)
     * @param datatable datatable (required)
     * @param apptable apptable (required)
     * @param body body (optional)
     * @return ApiResponse&lt;PutDataTablesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PutDataTablesResponse> registerDatatableWithHttpInfo(String datatable, String apptable, PostDataTablesRegisterDatatableAppTable body) throws ApiException {
        com.squareup.okhttp.Call call = registerDatatableValidateBeforeCall(datatable, apptable, body, null, null);
        Type localVarReturnType = new TypeToken<PutDataTablesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Register Data Table (asynchronously)
     * Registers a data table with the Apache Fineract Core application table. This allows the data table to be maintained through the API. In case the datatable is a PPI (survey table), a parameter category should be pass along with the request. The API currently support one category (200)
     * @param datatable datatable (required)
     * @param apptable apptable (required)
     * @param body body (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call registerDatatableAsync(String datatable, String apptable, PostDataTablesRegisterDatatableAppTable body, final ApiCallback<PutDataTablesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = registerDatatableValidateBeforeCall(datatable, apptable, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PutDataTablesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDatatable
     * @param datatableName datatableName (required)
     * @param body body (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDatatableCall(String datatableName, PutDataTablesRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/datatables/{datatableName}"
            .replaceAll("\\{" + "datatableName" + "\\}", apiClient.escapeString(datatableName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDatatableValidateBeforeCall(String datatableName, PutDataTablesRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'datatableName' is set
        if (datatableName == null) {
            throw new ApiException("Missing the required parameter 'datatableName' when calling updateDatatable(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDatatable(Async)");
        }
        

        com.squareup.okhttp.Call call = updateDatatableCall(datatableName, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update Data Table
     * Modifies fields of a data table. If the apptableName parameter is passed, data table is deregistered and registered with the new application table.
     * @param datatableName datatableName (required)
     * @param body body (required)
     * @return PutDataTablesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PutDataTablesResponse updateDatatable(String datatableName, PutDataTablesRequest body) throws ApiException {
        ApiResponse<PutDataTablesResponse> resp = updateDatatableWithHttpInfo(datatableName, body);
        return resp.getData();
    }

    /**
     * Update Data Table
     * Modifies fields of a data table. If the apptableName parameter is passed, data table is deregistered and registered with the new application table.
     * @param datatableName datatableName (required)
     * @param body body (required)
     * @return ApiResponse&lt;PutDataTablesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PutDataTablesResponse> updateDatatableWithHttpInfo(String datatableName, PutDataTablesRequest body) throws ApiException {
        com.squareup.okhttp.Call call = updateDatatableValidateBeforeCall(datatableName, body, null, null);
        Type localVarReturnType = new TypeToken<PutDataTablesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Data Table (asynchronously)
     * Modifies fields of a data table. If the apptableName parameter is passed, data table is deregistered and registered with the new application table.
     * @param datatableName datatableName (required)
     * @param body body (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDatatableAsync(String datatableName, PutDataTablesRequest body, final ApiCallback<PutDataTablesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDatatableValidateBeforeCall(datatableName, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PutDataTablesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDatatableEntryOneToMany
     * @param datatable datatable (required)
     * @param apptableId apptableId (required)
     * @param datatableId datatableId (required)
     * @param body body (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDatatableEntryOneToManyCall(String datatable, Long apptableId, Long datatableId, PutDataTablesAppTableIdDatatableIdRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/datatables/{datatable}/{apptableId}/{datatableId}"
            .replaceAll("\\{" + "datatable" + "\\}", apiClient.escapeString(datatable.toString()))
            .replaceAll("\\{" + "apptableId" + "\\}", apiClient.escapeString(apptableId.toString()))
            .replaceAll("\\{" + "datatableId" + "\\}", apiClient.escapeString(datatableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDatatableEntryOneToManyValidateBeforeCall(String datatable, Long apptableId, Long datatableId, PutDataTablesAppTableIdDatatableIdRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'datatable' is set
        if (datatable == null) {
            throw new ApiException("Missing the required parameter 'datatable' when calling updateDatatableEntryOneToMany(Async)");
        }
        
        // verify the required parameter 'apptableId' is set
        if (apptableId == null) {
            throw new ApiException("Missing the required parameter 'apptableId' when calling updateDatatableEntryOneToMany(Async)");
        }
        
        // verify the required parameter 'datatableId' is set
        if (datatableId == null) {
            throw new ApiException("Missing the required parameter 'datatableId' when calling updateDatatableEntryOneToMany(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDatatableEntryOneToMany(Async)");
        }
        

        com.squareup.okhttp.Call call = updateDatatableEntryOneToManyCall(datatable, apptableId, datatableId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update Entry in Data Table (One to Many)
     * Updates the row (if it exists) of the data table.
     * @param datatable datatable (required)
     * @param apptableId apptableId (required)
     * @param datatableId datatableId (required)
     * @param body body (required)
     * @return PutDataTablesAppTableIdDatatableIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PutDataTablesAppTableIdDatatableIdResponse updateDatatableEntryOneToMany(String datatable, Long apptableId, Long datatableId, PutDataTablesAppTableIdDatatableIdRequest body) throws ApiException {
        ApiResponse<PutDataTablesAppTableIdDatatableIdResponse> resp = updateDatatableEntryOneToManyWithHttpInfo(datatable, apptableId, datatableId, body);
        return resp.getData();
    }

    /**
     * Update Entry in Data Table (One to Many)
     * Updates the row (if it exists) of the data table.
     * @param datatable datatable (required)
     * @param apptableId apptableId (required)
     * @param datatableId datatableId (required)
     * @param body body (required)
     * @return ApiResponse&lt;PutDataTablesAppTableIdDatatableIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PutDataTablesAppTableIdDatatableIdResponse> updateDatatableEntryOneToManyWithHttpInfo(String datatable, Long apptableId, Long datatableId, PutDataTablesAppTableIdDatatableIdRequest body) throws ApiException {
        com.squareup.okhttp.Call call = updateDatatableEntryOneToManyValidateBeforeCall(datatable, apptableId, datatableId, body, null, null);
        Type localVarReturnType = new TypeToken<PutDataTablesAppTableIdDatatableIdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Entry in Data Table (One to Many) (asynchronously)
     * Updates the row (if it exists) of the data table.
     * @param datatable datatable (required)
     * @param apptableId apptableId (required)
     * @param datatableId datatableId (required)
     * @param body body (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDatatableEntryOneToManyAsync(String datatable, Long apptableId, Long datatableId, PutDataTablesAppTableIdDatatableIdRequest body, final ApiCallback<PutDataTablesAppTableIdDatatableIdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDatatableEntryOneToManyValidateBeforeCall(datatable, apptableId, datatableId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PutDataTablesAppTableIdDatatableIdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDatatableEntryOnetoOne
     * @param datatable datatable (required)
     * @param apptableId apptableId (required)
     * @param body body (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDatatableEntryOnetoOneCall(String datatable, Long apptableId, PutDataTablesAppTableIdRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/datatables/{datatable}/{apptableId}"
            .replaceAll("\\{" + "datatable" + "\\}", apiClient.escapeString(datatable.toString()))
            .replaceAll("\\{" + "apptableId" + "\\}", apiClient.escapeString(apptableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDatatableEntryOnetoOneValidateBeforeCall(String datatable, Long apptableId, PutDataTablesAppTableIdRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'datatable' is set
        if (datatable == null) {
            throw new ApiException("Missing the required parameter 'datatable' when calling updateDatatableEntryOnetoOne(Async)");
        }
        
        // verify the required parameter 'apptableId' is set
        if (apptableId == null) {
            throw new ApiException("Missing the required parameter 'apptableId' when calling updateDatatableEntryOnetoOne(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDatatableEntryOnetoOne(Async)");
        }
        

        com.squareup.okhttp.Call call = updateDatatableEntryOnetoOneCall(datatable, apptableId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update Entry in Data Table (One to One)
     * Updates the row (if it exists) of the data table.
     * @param datatable datatable (required)
     * @param apptableId apptableId (required)
     * @param body body (required)
     * @return PutDataTablesAppTableIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PutDataTablesAppTableIdResponse updateDatatableEntryOnetoOne(String datatable, Long apptableId, PutDataTablesAppTableIdRequest body) throws ApiException {
        ApiResponse<PutDataTablesAppTableIdResponse> resp = updateDatatableEntryOnetoOneWithHttpInfo(datatable, apptableId, body);
        return resp.getData();
    }

    /**
     * Update Entry in Data Table (One to One)
     * Updates the row (if it exists) of the data table.
     * @param datatable datatable (required)
     * @param apptableId apptableId (required)
     * @param body body (required)
     * @return ApiResponse&lt;PutDataTablesAppTableIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PutDataTablesAppTableIdResponse> updateDatatableEntryOnetoOneWithHttpInfo(String datatable, Long apptableId, PutDataTablesAppTableIdRequest body) throws ApiException {
        com.squareup.okhttp.Call call = updateDatatableEntryOnetoOneValidateBeforeCall(datatable, apptableId, body, null, null);
        Type localVarReturnType = new TypeToken<PutDataTablesAppTableIdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Entry in Data Table (One to One) (asynchronously)
     * Updates the row (if it exists) of the data table.
     * @param datatable datatable (required)
     * @param apptableId apptableId (required)
     * @param body body (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDatatableEntryOnetoOneAsync(String datatable, Long apptableId, PutDataTablesAppTableIdRequest body, final ApiCallback<PutDataTablesAppTableIdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDatatableEntryOnetoOneValidateBeforeCall(datatable, apptableId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PutDataTablesAppTableIdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
