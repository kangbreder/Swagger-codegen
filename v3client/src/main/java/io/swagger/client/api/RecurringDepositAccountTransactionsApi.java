/*
 * Apache Fineract API Documentation
 * Apache Fineract is a secure, multi-tenanted microfinance platform. <br />              The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The reference app [  https://demo.openmf.org  ] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation.              <br/>The API                 is organized around REST [ https://en.wikipedia.org/wiki/Representational_state_transfer ]               <br/> Find out more about Apache Fineract on [ https://demo.openmf.org/api-docs/apiLive.htm#top ]              <br/> You can Try The API From Your Browser itself at [ https://demo.openmf.org/api-docs/apiLive.htm#interact ]              <br/> The Generic Options are available at [ https://demo.openmf.org/api-docs/apiLive.htm#genopts ]              <br/> Find out more about Updating Dates and Numbers at [ https://demo.openmf.org/api-docs/apiLive.htm#dates_and_numbers ]              <br/> For the Authentication and the Basic of HTTP and HTTPS refer [ https://demo.openmf.org/api-docs/apiLive.htm#authentication_overview ]              <br/> Check about ERROR codes at [ https://demo.openmf.org/api-docs/apiLive.htm#errors ]               <br/> <br/> Please refer to the old documentation for any documentation queries [ https://demo.openmf.org/api-docs/apiLive.htm ]              <br/>             ______________________________________________________________________________________________________________________________          
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.GetRecurringDepositAccountsRecurringDepositAccountIdTransactionsTemplateResponse;
import io.swagger.client.model.GetRecurringDepositAccountsRecurringDepositAccountIdTransactionsTransactionIdResponse;
import io.swagger.client.model.PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsRequest;
import io.swagger.client.model.PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsResponse;
import io.swagger.client.model.PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsTransactionIdResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RecurringDepositAccountTransactionsApi {
    private ApiClient apiClient;

    public RecurringDepositAccountTransactionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RecurringDepositAccountTransactionsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for handleTransactionCommands
     * @param recurringDepositAccountId recurringDepositAccountId (required)
     * @param transactionId transactionId (required)
     * @param body body (required)
     * @param command command (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call handleTransactionCommandsCall(Long recurringDepositAccountId, Long transactionId, PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsRequest body, String command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/recurringdepositaccounts/{recurringDepositAccountId}/transactions/{transactionId}"
            .replaceAll("\\{" + "recurringDepositAccountId" + "\\}", apiClient.escapeString(recurringDepositAccountId.toString()))
            .replaceAll("\\{" + "transactionId" + "\\}", apiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (command != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("command", command));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call handleTransactionCommandsValidateBeforeCall(Long recurringDepositAccountId, Long transactionId, PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsRequest body, String command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'recurringDepositAccountId' is set
        if (recurringDepositAccountId == null) {
            throw new ApiException("Missing the required parameter 'recurringDepositAccountId' when calling handleTransactionCommands(Async)");
        }
        
        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling handleTransactionCommands(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling handleTransactionCommands(Async)");
        }
        

        com.squareup.okhttp.Call call = handleTransactionCommandsCall(recurringDepositAccountId, transactionId, body, command, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Adjust Transaction | Undo transaction
     * Adjust Transaction:  This command modifies the given transaction.  Undo transaction:  This command reverses the given transaction.  Showing request/response for &#39;Adjust Transaction&#39;
     * @param recurringDepositAccountId recurringDepositAccountId (required)
     * @param transactionId transactionId (required)
     * @param body body (required)
     * @param command command (optional)
     * @return PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsTransactionIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsTransactionIdResponse handleTransactionCommands(Long recurringDepositAccountId, Long transactionId, PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsRequest body, String command) throws ApiException {
        ApiResponse<PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsTransactionIdResponse> resp = handleTransactionCommandsWithHttpInfo(recurringDepositAccountId, transactionId, body, command);
        return resp.getData();
    }

    /**
     * Adjust Transaction | Undo transaction
     * Adjust Transaction:  This command modifies the given transaction.  Undo transaction:  This command reverses the given transaction.  Showing request/response for &#39;Adjust Transaction&#39;
     * @param recurringDepositAccountId recurringDepositAccountId (required)
     * @param transactionId transactionId (required)
     * @param body body (required)
     * @param command command (optional)
     * @return ApiResponse&lt;PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsTransactionIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsTransactionIdResponse> handleTransactionCommandsWithHttpInfo(Long recurringDepositAccountId, Long transactionId, PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsRequest body, String command) throws ApiException {
        com.squareup.okhttp.Call call = handleTransactionCommandsValidateBeforeCall(recurringDepositAccountId, transactionId, body, command, null, null);
        Type localVarReturnType = new TypeToken<PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsTransactionIdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Adjust Transaction | Undo transaction (asynchronously)
     * Adjust Transaction:  This command modifies the given transaction.  Undo transaction:  This command reverses the given transaction.  Showing request/response for &#39;Adjust Transaction&#39;
     * @param recurringDepositAccountId recurringDepositAccountId (required)
     * @param transactionId transactionId (required)
     * @param body body (required)
     * @param command command (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call handleTransactionCommandsAsync(Long recurringDepositAccountId, Long transactionId, PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsRequest body, String command, final ApiCallback<PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsTransactionIdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = handleTransactionCommandsValidateBeforeCall(recurringDepositAccountId, transactionId, body, command, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsTransactionIdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveOne
     * @param recurringDepositAccountId recurringDepositAccountId (required)
     * @param transactionId transactionId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveOneCall(Long recurringDepositAccountId, Long transactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recurringdepositaccounts/{recurringDepositAccountId}/transactions/{transactionId}"
            .replaceAll("\\{" + "recurringDepositAccountId" + "\\}", apiClient.escapeString(recurringDepositAccountId.toString()))
            .replaceAll("\\{" + "transactionId" + "\\}", apiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveOneValidateBeforeCall(Long recurringDepositAccountId, Long transactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'recurringDepositAccountId' is set
        if (recurringDepositAccountId == null) {
            throw new ApiException("Missing the required parameter 'recurringDepositAccountId' when calling retrieveOne(Async)");
        }
        
        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling retrieveOne(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveOneCall(recurringDepositAccountId, transactionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve Recurring Deposit Account Transaction
     * Retrieves Recurring Deposit Account Transaction  Example Requests:  recurringdepositaccounts/1/transactions/1
     * @param recurringDepositAccountId recurringDepositAccountId (required)
     * @param transactionId transactionId (required)
     * @return GetRecurringDepositAccountsRecurringDepositAccountIdTransactionsTransactionIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetRecurringDepositAccountsRecurringDepositAccountIdTransactionsTransactionIdResponse retrieveOne(Long recurringDepositAccountId, Long transactionId) throws ApiException {
        ApiResponse<GetRecurringDepositAccountsRecurringDepositAccountIdTransactionsTransactionIdResponse> resp = retrieveOneWithHttpInfo(recurringDepositAccountId, transactionId);
        return resp.getData();
    }

    /**
     * Retrieve Recurring Deposit Account Transaction
     * Retrieves Recurring Deposit Account Transaction  Example Requests:  recurringdepositaccounts/1/transactions/1
     * @param recurringDepositAccountId recurringDepositAccountId (required)
     * @param transactionId transactionId (required)
     * @return ApiResponse&lt;GetRecurringDepositAccountsRecurringDepositAccountIdTransactionsTransactionIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetRecurringDepositAccountsRecurringDepositAccountIdTransactionsTransactionIdResponse> retrieveOneWithHttpInfo(Long recurringDepositAccountId, Long transactionId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveOneValidateBeforeCall(recurringDepositAccountId, transactionId, null, null);
        Type localVarReturnType = new TypeToken<GetRecurringDepositAccountsRecurringDepositAccountIdTransactionsTransactionIdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve Recurring Deposit Account Transaction (asynchronously)
     * Retrieves Recurring Deposit Account Transaction  Example Requests:  recurringdepositaccounts/1/transactions/1
     * @param recurringDepositAccountId recurringDepositAccountId (required)
     * @param transactionId transactionId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveOneAsync(Long recurringDepositAccountId, Long transactionId, final ApiCallback<GetRecurringDepositAccountsRecurringDepositAccountIdTransactionsTransactionIdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveOneValidateBeforeCall(recurringDepositAccountId, transactionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetRecurringDepositAccountsRecurringDepositAccountIdTransactionsTransactionIdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveTemplate
     * @param recurringDepositAccountId recurringDepositAccountId (required)
     * @param command command (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveTemplateCall(Long recurringDepositAccountId, String command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recurringdepositaccounts/{recurringDepositAccountId}/transactions/template"
            .replaceAll("\\{" + "recurringDepositAccountId" + "\\}", apiClient.escapeString(recurringDepositAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (command != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("command", command));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveTemplateValidateBeforeCall(Long recurringDepositAccountId, String command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'recurringDepositAccountId' is set
        if (recurringDepositAccountId == null) {
            throw new ApiException("Missing the required parameter 'recurringDepositAccountId' when calling retrieveTemplate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveTemplateCall(recurringDepositAccountId, command, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve Recurring Deposit Account Transaction Template
     * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists Example Requests:  recurringdepositaccounts/1/transactions/template?command&#x3D;deposit  recurringdepositaccounts/1/transactions/template?command&#x3D;withdrawal
     * @param recurringDepositAccountId recurringDepositAccountId (required)
     * @param command command (optional)
     * @return GetRecurringDepositAccountsRecurringDepositAccountIdTransactionsTemplateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetRecurringDepositAccountsRecurringDepositAccountIdTransactionsTemplateResponse retrieveTemplate(Long recurringDepositAccountId, String command) throws ApiException {
        ApiResponse<GetRecurringDepositAccountsRecurringDepositAccountIdTransactionsTemplateResponse> resp = retrieveTemplateWithHttpInfo(recurringDepositAccountId, command);
        return resp.getData();
    }

    /**
     * Retrieve Recurring Deposit Account Transaction Template
     * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists Example Requests:  recurringdepositaccounts/1/transactions/template?command&#x3D;deposit  recurringdepositaccounts/1/transactions/template?command&#x3D;withdrawal
     * @param recurringDepositAccountId recurringDepositAccountId (required)
     * @param command command (optional)
     * @return ApiResponse&lt;GetRecurringDepositAccountsRecurringDepositAccountIdTransactionsTemplateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetRecurringDepositAccountsRecurringDepositAccountIdTransactionsTemplateResponse> retrieveTemplateWithHttpInfo(Long recurringDepositAccountId, String command) throws ApiException {
        com.squareup.okhttp.Call call = retrieveTemplateValidateBeforeCall(recurringDepositAccountId, command, null, null);
        Type localVarReturnType = new TypeToken<GetRecurringDepositAccountsRecurringDepositAccountIdTransactionsTemplateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve Recurring Deposit Account Transaction Template (asynchronously)
     * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists Example Requests:  recurringdepositaccounts/1/transactions/template?command&#x3D;deposit  recurringdepositaccounts/1/transactions/template?command&#x3D;withdrawal
     * @param recurringDepositAccountId recurringDepositAccountId (required)
     * @param command command (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveTemplateAsync(Long recurringDepositAccountId, String command, final ApiCallback<GetRecurringDepositAccountsRecurringDepositAccountIdTransactionsTemplateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveTemplateValidateBeforeCall(recurringDepositAccountId, command, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetRecurringDepositAccountsRecurringDepositAccountIdTransactionsTemplateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for transaction
     * @param recurringDepositAccountId recurringDepositAccountId (required)
     * @param body body (required)
     * @param command command (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transactionCall(Long recurringDepositAccountId, PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsRequest body, String command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/recurringdepositaccounts/{recurringDepositAccountId}/transactions"
            .replaceAll("\\{" + "recurringDepositAccountId" + "\\}", apiClient.escapeString(recurringDepositAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (command != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("command", command));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transactionValidateBeforeCall(Long recurringDepositAccountId, PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsRequest body, String command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'recurringDepositAccountId' is set
        if (recurringDepositAccountId == null) {
            throw new ApiException("Missing the required parameter 'recurringDepositAccountId' when calling transaction(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling transaction(Async)");
        }
        

        com.squareup.okhttp.Call call = transactionCall(recurringDepositAccountId, body, command, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deposit Transaction | Withdrawal Transaction
     * Deposit Transaction:  Used for a deposit transaction  Withdrawal Transaction:  Used for a Withdrawal Transaction  Showing request/response for Deposit Transaction
     * @param recurringDepositAccountId recurringDepositAccountId (required)
     * @param body body (required)
     * @param command command (optional)
     * @return PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsResponse transaction(Long recurringDepositAccountId, PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsRequest body, String command) throws ApiException {
        ApiResponse<PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsResponse> resp = transactionWithHttpInfo(recurringDepositAccountId, body, command);
        return resp.getData();
    }

    /**
     * Deposit Transaction | Withdrawal Transaction
     * Deposit Transaction:  Used for a deposit transaction  Withdrawal Transaction:  Used for a Withdrawal Transaction  Showing request/response for Deposit Transaction
     * @param recurringDepositAccountId recurringDepositAccountId (required)
     * @param body body (required)
     * @param command command (optional)
     * @return ApiResponse&lt;PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsResponse> transactionWithHttpInfo(Long recurringDepositAccountId, PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsRequest body, String command) throws ApiException {
        com.squareup.okhttp.Call call = transactionValidateBeforeCall(recurringDepositAccountId, body, command, null, null);
        Type localVarReturnType = new TypeToken<PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deposit Transaction | Withdrawal Transaction (asynchronously)
     * Deposit Transaction:  Used for a deposit transaction  Withdrawal Transaction:  Used for a Withdrawal Transaction  Showing request/response for Deposit Transaction
     * @param recurringDepositAccountId recurringDepositAccountId (required)
     * @param body body (required)
     * @param command command (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transactionAsync(Long recurringDepositAccountId, PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsRequest body, String command, final ApiCallback<PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transactionValidateBeforeCall(recurringDepositAccountId, body, command, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
