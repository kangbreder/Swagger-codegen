/*
 * Apache Fineract API Documentation
 * Apache Fineract is a secure, multi-tenanted microfinance platform. <br />              The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The reference app [  https://demo.openmf.org  ] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation.              <br/>The API                 is organized around REST [ https://en.wikipedia.org/wiki/Representational_state_transfer ]               <br/> Find out more about Apache Fineract on [ https://demo.openmf.org/api-docs/apiLive.htm#top ]              <br/> You can Try The API From Your Browser itself at [ https://demo.openmf.org/api-docs/apiLive.htm#interact ]              <br/> The Generic Options are available at [ https://demo.openmf.org/api-docs/apiLive.htm#genopts ]              <br/> Find out more about Updating Dates and Numbers at [ https://demo.openmf.org/api-docs/apiLive.htm#dates_and_numbers ]              <br/> For the Authentication and the Basic of HTTP and HTTPS refer [ https://demo.openmf.org/api-docs/apiLive.htm#authentication_overview ]              <br/> Check about ERROR codes at [ https://demo.openmf.org/api-docs/apiLive.htm#errors ]               <br/> <br/> Please refer to the old documentation for any documentation queries [ https://demo.openmf.org/api-docs/apiLive.htm ]              <br/>             ______________________________________________________________________________________________________________________________          
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.DeleteLoansLoanIdChargesChargeIdResponse;
import io.swagger.client.model.GetLoansLoanIdChargesChargeIdResponse;
import io.swagger.client.model.GetLoansLoanIdChargesTemplateResponse;
import io.swagger.client.model.PostLoansLoanIdChargesChargeIdRequest;
import io.swagger.client.model.PostLoansLoanIdChargesChargeIdResponse;
import io.swagger.client.model.PostLoansLoanIdChargesRequest;
import io.swagger.client.model.PostLoansLoanIdChargesResponse;
import io.swagger.client.model.PutLoansLoanIdChargesChargeIdRequest;
import io.swagger.client.model.PutLoansLoanIdChargesChargeIdResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LoanChargesApi {
    private ApiClient apiClient;

    public LoanChargesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LoanChargesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteLoanCharge
     * @param loanId loanId (required)
     * @param chargeId chargeId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteLoanChargeCall(Long loanId, Long chargeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/loans/{loanId}/charges/{chargeId}"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()))
            .replaceAll("\\{" + "chargeId" + "\\}", apiClient.escapeString(chargeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteLoanChargeValidateBeforeCall(Long loanId, Long chargeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling deleteLoanCharge(Async)");
        }
        
        // verify the required parameter 'chargeId' is set
        if (chargeId == null) {
            throw new ApiException("Missing the required parameter 'chargeId' when calling deleteLoanCharge(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteLoanChargeCall(loanId, chargeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a Loan Charge
     * Note: Currently, A Loan Charge may only be removed from Loans that are not yet approved.
     * @param loanId loanId (required)
     * @param chargeId chargeId (required)
     * @return DeleteLoansLoanIdChargesChargeIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeleteLoansLoanIdChargesChargeIdResponse deleteLoanCharge(Long loanId, Long chargeId) throws ApiException {
        ApiResponse<DeleteLoansLoanIdChargesChargeIdResponse> resp = deleteLoanChargeWithHttpInfo(loanId, chargeId);
        return resp.getData();
    }

    /**
     * Delete a Loan Charge
     * Note: Currently, A Loan Charge may only be removed from Loans that are not yet approved.
     * @param loanId loanId (required)
     * @param chargeId chargeId (required)
     * @return ApiResponse&lt;DeleteLoansLoanIdChargesChargeIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeleteLoansLoanIdChargesChargeIdResponse> deleteLoanChargeWithHttpInfo(Long loanId, Long chargeId) throws ApiException {
        com.squareup.okhttp.Call call = deleteLoanChargeValidateBeforeCall(loanId, chargeId, null, null);
        Type localVarReturnType = new TypeToken<DeleteLoansLoanIdChargesChargeIdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a Loan Charge (asynchronously)
     * Note: Currently, A Loan Charge may only be removed from Loans that are not yet approved.
     * @param loanId loanId (required)
     * @param chargeId chargeId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteLoanChargeAsync(Long loanId, Long chargeId, final ApiCallback<DeleteLoansLoanIdChargesChargeIdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteLoanChargeValidateBeforeCall(loanId, chargeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeleteLoansLoanIdChargesChargeIdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for executeLoanCharge
     * @param loanId loanId (required)
     * @param chargeId chargeId (required)
     * @param body body (required)
     * @param command command (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call executeLoanChargeCall(Long loanId, Long chargeId, PostLoansLoanIdChargesChargeIdRequest body, String command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/loans/{loanId}/charges/{chargeId}"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()))
            .replaceAll("\\{" + "chargeId" + "\\}", apiClient.escapeString(chargeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (command != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("command", command));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call executeLoanChargeValidateBeforeCall(Long loanId, Long chargeId, PostLoansLoanIdChargesChargeIdRequest body, String command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling executeLoanCharge(Async)");
        }
        
        // verify the required parameter 'chargeId' is set
        if (chargeId == null) {
            throw new ApiException("Missing the required parameter 'chargeId' when calling executeLoanCharge(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling executeLoanCharge(Async)");
        }
        

        com.squareup.okhttp.Call call = executeLoanChargeCall(loanId, chargeId, body, command, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Pay Loan Charge
     * Loan Charge will be paid if the loan is linked with a savings account
     * @param loanId loanId (required)
     * @param chargeId chargeId (required)
     * @param body body (required)
     * @param command command (optional)
     * @return PostLoansLoanIdChargesChargeIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PostLoansLoanIdChargesChargeIdResponse executeLoanCharge(Long loanId, Long chargeId, PostLoansLoanIdChargesChargeIdRequest body, String command) throws ApiException {
        ApiResponse<PostLoansLoanIdChargesChargeIdResponse> resp = executeLoanChargeWithHttpInfo(loanId, chargeId, body, command);
        return resp.getData();
    }

    /**
     * Pay Loan Charge
     * Loan Charge will be paid if the loan is linked with a savings account
     * @param loanId loanId (required)
     * @param chargeId chargeId (required)
     * @param body body (required)
     * @param command command (optional)
     * @return ApiResponse&lt;PostLoansLoanIdChargesChargeIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PostLoansLoanIdChargesChargeIdResponse> executeLoanChargeWithHttpInfo(Long loanId, Long chargeId, PostLoansLoanIdChargesChargeIdRequest body, String command) throws ApiException {
        com.squareup.okhttp.Call call = executeLoanChargeValidateBeforeCall(loanId, chargeId, body, command, null, null);
        Type localVarReturnType = new TypeToken<PostLoansLoanIdChargesChargeIdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Pay Loan Charge (asynchronously)
     * Loan Charge will be paid if the loan is linked with a savings account
     * @param loanId loanId (required)
     * @param chargeId chargeId (required)
     * @param body body (required)
     * @param command command (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call executeLoanChargeAsync(Long loanId, Long chargeId, PostLoansLoanIdChargesChargeIdRequest body, String command, final ApiCallback<PostLoansLoanIdChargesChargeIdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = executeLoanChargeValidateBeforeCall(loanId, chargeId, body, command, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PostLoansLoanIdChargesChargeIdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for executeLoanCharge_0
     * @param loanId loanId (required)
     * @param body body (required)
     * @param command command (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call executeLoanCharge_0Call(Long loanId, PostLoansLoanIdChargesRequest body, String command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/loans/{loanId}/charges"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (command != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("command", command));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call executeLoanCharge_0ValidateBeforeCall(Long loanId, PostLoansLoanIdChargesRequest body, String command, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling executeLoanCharge_0(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling executeLoanCharge_0(Async)");
        }
        

        com.squareup.okhttp.Call call = executeLoanCharge_0Call(loanId, body, command, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a Loan Charge
     * It Creates a Loan Charge
     * @param loanId loanId (required)
     * @param body body (required)
     * @param command command (optional)
     * @return PostLoansLoanIdChargesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PostLoansLoanIdChargesResponse executeLoanCharge_0(Long loanId, PostLoansLoanIdChargesRequest body, String command) throws ApiException {
        ApiResponse<PostLoansLoanIdChargesResponse> resp = executeLoanCharge_0WithHttpInfo(loanId, body, command);
        return resp.getData();
    }

    /**
     * Create a Loan Charge
     * It Creates a Loan Charge
     * @param loanId loanId (required)
     * @param body body (required)
     * @param command command (optional)
     * @return ApiResponse&lt;PostLoansLoanIdChargesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PostLoansLoanIdChargesResponse> executeLoanCharge_0WithHttpInfo(Long loanId, PostLoansLoanIdChargesRequest body, String command) throws ApiException {
        com.squareup.okhttp.Call call = executeLoanCharge_0ValidateBeforeCall(loanId, body, command, null, null);
        Type localVarReturnType = new TypeToken<PostLoansLoanIdChargesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Loan Charge (asynchronously)
     * It Creates a Loan Charge
     * @param loanId loanId (required)
     * @param body body (required)
     * @param command command (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call executeLoanCharge_0Async(Long loanId, PostLoansLoanIdChargesRequest body, String command, final ApiCallback<PostLoansLoanIdChargesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = executeLoanCharge_0ValidateBeforeCall(loanId, body, command, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PostLoansLoanIdChargesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveAllLoanCharges
     * @param loanId loanId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveAllLoanChargesCall(Long loanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/loans/{loanId}/charges"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveAllLoanChargesValidateBeforeCall(Long loanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling retrieveAllLoanCharges(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveAllLoanChargesCall(loanId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Loan Charges
     * It lists all the Loan Charges specific to a Loan   Example Requests:  loans/1/charges   loans/1/charges?fields&#x3D;name,amountOrPercentage
     * @param loanId loanId (required)
     * @return List&lt;GetLoansLoanIdChargesChargeIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<GetLoansLoanIdChargesChargeIdResponse> retrieveAllLoanCharges(Long loanId) throws ApiException {
        ApiResponse<List<GetLoansLoanIdChargesChargeIdResponse>> resp = retrieveAllLoanChargesWithHttpInfo(loanId);
        return resp.getData();
    }

    /**
     * List Loan Charges
     * It lists all the Loan Charges specific to a Loan   Example Requests:  loans/1/charges   loans/1/charges?fields&#x3D;name,amountOrPercentage
     * @param loanId loanId (required)
     * @return ApiResponse&lt;List&lt;GetLoansLoanIdChargesChargeIdResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<GetLoansLoanIdChargesChargeIdResponse>> retrieveAllLoanChargesWithHttpInfo(Long loanId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveAllLoanChargesValidateBeforeCall(loanId, null, null);
        Type localVarReturnType = new TypeToken<List<GetLoansLoanIdChargesChargeIdResponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Loan Charges (asynchronously)
     * It lists all the Loan Charges specific to a Loan   Example Requests:  loans/1/charges   loans/1/charges?fields&#x3D;name,amountOrPercentage
     * @param loanId loanId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveAllLoanChargesAsync(Long loanId, final ApiCallback<List<GetLoansLoanIdChargesChargeIdResponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveAllLoanChargesValidateBeforeCall(loanId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<GetLoansLoanIdChargesChargeIdResponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveLoanCharge
     * @param loanId loanId (required)
     * @param chargeId chargeId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveLoanChargeCall(Long loanId, Long chargeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/loans/{loanId}/charges/{chargeId}"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()))
            .replaceAll("\\{" + "chargeId" + "\\}", apiClient.escapeString(chargeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveLoanChargeValidateBeforeCall(Long loanId, Long chargeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling retrieveLoanCharge(Async)");
        }
        
        // verify the required parameter 'chargeId' is set
        if (chargeId == null) {
            throw new ApiException("Missing the required parameter 'chargeId' when calling retrieveLoanCharge(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveLoanChargeCall(loanId, chargeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a Loan Charge
     * Retrieves Loan Charge according to the Loan ID and Charge IDExample Requests:  /loans/1/charges/1   /loans/1/charges/1?fields&#x3D;name,amountOrPercentage
     * @param loanId loanId (required)
     * @param chargeId chargeId (required)
     * @return GetLoansLoanIdChargesChargeIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetLoansLoanIdChargesChargeIdResponse retrieveLoanCharge(Long loanId, Long chargeId) throws ApiException {
        ApiResponse<GetLoansLoanIdChargesChargeIdResponse> resp = retrieveLoanChargeWithHttpInfo(loanId, chargeId);
        return resp.getData();
    }

    /**
     * Retrieve a Loan Charge
     * Retrieves Loan Charge according to the Loan ID and Charge IDExample Requests:  /loans/1/charges/1   /loans/1/charges/1?fields&#x3D;name,amountOrPercentage
     * @param loanId loanId (required)
     * @param chargeId chargeId (required)
     * @return ApiResponse&lt;GetLoansLoanIdChargesChargeIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetLoansLoanIdChargesChargeIdResponse> retrieveLoanChargeWithHttpInfo(Long loanId, Long chargeId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveLoanChargeValidateBeforeCall(loanId, chargeId, null, null);
        Type localVarReturnType = new TypeToken<GetLoansLoanIdChargesChargeIdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a Loan Charge (asynchronously)
     * Retrieves Loan Charge according to the Loan ID and Charge IDExample Requests:  /loans/1/charges/1   /loans/1/charges/1?fields&#x3D;name,amountOrPercentage
     * @param loanId loanId (required)
     * @param chargeId chargeId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveLoanChargeAsync(Long loanId, Long chargeId, final ApiCallback<GetLoansLoanIdChargesChargeIdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveLoanChargeValidateBeforeCall(loanId, chargeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetLoansLoanIdChargesChargeIdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveTemplate
     * @param loanId loanId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveTemplateCall(Long loanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/loans/{loanId}/charges/template"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveTemplateValidateBeforeCall(Long loanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling retrieveTemplate(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveTemplateCall(loanId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve Loan Charges Template
     * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists Example Request:  loans/1/charges/template  
     * @param loanId loanId (required)
     * @return GetLoansLoanIdChargesTemplateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetLoansLoanIdChargesTemplateResponse retrieveTemplate(Long loanId) throws ApiException {
        ApiResponse<GetLoansLoanIdChargesTemplateResponse> resp = retrieveTemplateWithHttpInfo(loanId);
        return resp.getData();
    }

    /**
     * Retrieve Loan Charges Template
     * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists Example Request:  loans/1/charges/template  
     * @param loanId loanId (required)
     * @return ApiResponse&lt;GetLoansLoanIdChargesTemplateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetLoansLoanIdChargesTemplateResponse> retrieveTemplateWithHttpInfo(Long loanId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveTemplateValidateBeforeCall(loanId, null, null);
        Type localVarReturnType = new TypeToken<GetLoansLoanIdChargesTemplateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve Loan Charges Template (asynchronously)
     * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists Example Request:  loans/1/charges/template  
     * @param loanId loanId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveTemplateAsync(Long loanId, final ApiCallback<GetLoansLoanIdChargesTemplateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveTemplateValidateBeforeCall(loanId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetLoansLoanIdChargesTemplateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateLoanCharge
     * @param loanId loanId (required)
     * @param chargeId chargeId (required)
     * @param body body (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateLoanChargeCall(Long loanId, Long chargeId, PutLoansLoanIdChargesChargeIdRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/loans/{loanId}/charges/{chargeId}"
            .replaceAll("\\{" + "loanId" + "\\}", apiClient.escapeString(loanId.toString()))
            .replaceAll("\\{" + "chargeId" + "\\}", apiClient.escapeString(chargeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateLoanChargeValidateBeforeCall(Long loanId, Long chargeId, PutLoansLoanIdChargesChargeIdRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling updateLoanCharge(Async)");
        }
        
        // verify the required parameter 'chargeId' is set
        if (chargeId == null) {
            throw new ApiException("Missing the required parameter 'chargeId' when calling updateLoanCharge(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateLoanCharge(Async)");
        }
        

        com.squareup.okhttp.Call call = updateLoanChargeCall(loanId, chargeId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a Loan Charge
     * Currently Loan Charges may be updated only if the Loan is not yet approved
     * @param loanId loanId (required)
     * @param chargeId chargeId (required)
     * @param body body (required)
     * @return PutLoansLoanIdChargesChargeIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PutLoansLoanIdChargesChargeIdResponse updateLoanCharge(Long loanId, Long chargeId, PutLoansLoanIdChargesChargeIdRequest body) throws ApiException {
        ApiResponse<PutLoansLoanIdChargesChargeIdResponse> resp = updateLoanChargeWithHttpInfo(loanId, chargeId, body);
        return resp.getData();
    }

    /**
     * Update a Loan Charge
     * Currently Loan Charges may be updated only if the Loan is not yet approved
     * @param loanId loanId (required)
     * @param chargeId chargeId (required)
     * @param body body (required)
     * @return ApiResponse&lt;PutLoansLoanIdChargesChargeIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PutLoansLoanIdChargesChargeIdResponse> updateLoanChargeWithHttpInfo(Long loanId, Long chargeId, PutLoansLoanIdChargesChargeIdRequest body) throws ApiException {
        com.squareup.okhttp.Call call = updateLoanChargeValidateBeforeCall(loanId, chargeId, body, null, null);
        Type localVarReturnType = new TypeToken<PutLoansLoanIdChargesChargeIdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a Loan Charge (asynchronously)
     * Currently Loan Charges may be updated only if the Loan is not yet approved
     * @param loanId loanId (required)
     * @param chargeId chargeId (required)
     * @param body body (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateLoanChargeAsync(Long loanId, Long chargeId, PutLoansLoanIdChargesChargeIdRequest body, final ApiCallback<PutLoansLoanIdChargesChargeIdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateLoanChargeValidateBeforeCall(loanId, chargeId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PutLoansLoanIdChargesChargeIdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
