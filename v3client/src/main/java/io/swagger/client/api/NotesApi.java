/*
 * Apache Fineract API Documentation
 * Apache Fineract is a secure, multi-tenanted microfinance platform. <br />              The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The reference app [  https://demo.openmf.org  ] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation.              <br/>The API                 is organized around REST [ https://en.wikipedia.org/wiki/Representational_state_transfer ]               <br/> Find out more about Apache Fineract on [ https://demo.openmf.org/api-docs/apiLive.htm#top ]              <br/> You can Try The API From Your Browser itself at [ https://demo.openmf.org/api-docs/apiLive.htm#interact ]              <br/> The Generic Options are available at [ https://demo.openmf.org/api-docs/apiLive.htm#genopts ]              <br/> Find out more about Updating Dates and Numbers at [ https://demo.openmf.org/api-docs/apiLive.htm#dates_and_numbers ]              <br/> For the Authentication and the Basic of HTTP and HTTPS refer [ https://demo.openmf.org/api-docs/apiLive.htm#authentication_overview ]              <br/> Check about ERROR codes at [ https://demo.openmf.org/api-docs/apiLive.htm#errors ]               <br/> <br/> Please refer to the old documentation for any documentation queries [ https://demo.openmf.org/api-docs/apiLive.htm ]              <br/>             ______________________________________________________________________________________________________________________________          
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.DeleteResourceTypeResourceIdNotesNoteIdResponse;
import io.swagger.client.model.GetResourceTypeResourceIdNotesNoteIdResponse;
import io.swagger.client.model.GetResourceTypeResourceIdNotesResponse;
import io.swagger.client.model.PostResourceTypeResourceIdNotesRequest;
import io.swagger.client.model.PostResourceTypeResourceIdNotesResponse;
import io.swagger.client.model.PutResourceTypeResourceIdNotesNoteIdRequest;
import io.swagger.client.model.PutResourceTypeResourceIdNotesNoteIdResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NotesApi {
    private ApiClient apiClient;

    public NotesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NotesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addNewNote
     * @param resourceType resourceType (required)
     * @param resourceId resourceId (required)
     * @param body body (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addNewNoteCall(String resourceType, Long resourceId, PostResourceTypeResourceIdNotesRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/{resourceType}/{resourceId}/notes"
            .replaceAll("\\{" + "resourceType" + "\\}", apiClient.escapeString(resourceType.toString()))
            .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addNewNoteValidateBeforeCall(String resourceType, Long resourceId, PostResourceTypeResourceIdNotesRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'resourceType' is set
        if (resourceType == null) {
            throw new ApiException("Missing the required parameter 'resourceType' when calling addNewNote(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling addNewNote(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addNewNote(Async)");
        }
        

        com.squareup.okhttp.Call call = addNewNoteCall(resourceType, resourceId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add a Resource Note
     * Adds a new note to a supported resource.  Example Requests:  clients/1/notes   groups/1/notes
     * @param resourceType resourceType (required)
     * @param resourceId resourceId (required)
     * @param body body (required)
     * @return PostResourceTypeResourceIdNotesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PostResourceTypeResourceIdNotesResponse addNewNote(String resourceType, Long resourceId, PostResourceTypeResourceIdNotesRequest body) throws ApiException {
        ApiResponse<PostResourceTypeResourceIdNotesResponse> resp = addNewNoteWithHttpInfo(resourceType, resourceId, body);
        return resp.getData();
    }

    /**
     * Add a Resource Note
     * Adds a new note to a supported resource.  Example Requests:  clients/1/notes   groups/1/notes
     * @param resourceType resourceType (required)
     * @param resourceId resourceId (required)
     * @param body body (required)
     * @return ApiResponse&lt;PostResourceTypeResourceIdNotesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PostResourceTypeResourceIdNotesResponse> addNewNoteWithHttpInfo(String resourceType, Long resourceId, PostResourceTypeResourceIdNotesRequest body) throws ApiException {
        com.squareup.okhttp.Call call = addNewNoteValidateBeforeCall(resourceType, resourceId, body, null, null);
        Type localVarReturnType = new TypeToken<PostResourceTypeResourceIdNotesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a Resource Note (asynchronously)
     * Adds a new note to a supported resource.  Example Requests:  clients/1/notes   groups/1/notes
     * @param resourceType resourceType (required)
     * @param resourceId resourceId (required)
     * @param body body (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addNewNoteAsync(String resourceType, Long resourceId, PostResourceTypeResourceIdNotesRequest body, final ApiCallback<PostResourceTypeResourceIdNotesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addNewNoteValidateBeforeCall(resourceType, resourceId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PostResourceTypeResourceIdNotesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteNote
     * @param resourceType resourceType (required)
     * @param resourceId resourceId (required)
     * @param noteId noteId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNoteCall(String resourceType, Long resourceId, Long noteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{resourceType}/{resourceId}/notes/{noteId}"
            .replaceAll("\\{" + "resourceType" + "\\}", apiClient.escapeString(resourceType.toString()))
            .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()))
            .replaceAll("\\{" + "noteId" + "\\}", apiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteNoteValidateBeforeCall(String resourceType, Long resourceId, Long noteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'resourceType' is set
        if (resourceType == null) {
            throw new ApiException("Missing the required parameter 'resourceType' when calling deleteNote(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling deleteNote(Async)");
        }
        
        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling deleteNote(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteNoteCall(resourceType, resourceId, noteId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a Resource Note
     * Deletes a Resource Note
     * @param resourceType resourceType (required)
     * @param resourceId resourceId (required)
     * @param noteId noteId (required)
     * @return DeleteResourceTypeResourceIdNotesNoteIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeleteResourceTypeResourceIdNotesNoteIdResponse deleteNote(String resourceType, Long resourceId, Long noteId) throws ApiException {
        ApiResponse<DeleteResourceTypeResourceIdNotesNoteIdResponse> resp = deleteNoteWithHttpInfo(resourceType, resourceId, noteId);
        return resp.getData();
    }

    /**
     * Delete a Resource Note
     * Deletes a Resource Note
     * @param resourceType resourceType (required)
     * @param resourceId resourceId (required)
     * @param noteId noteId (required)
     * @return ApiResponse&lt;DeleteResourceTypeResourceIdNotesNoteIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeleteResourceTypeResourceIdNotesNoteIdResponse> deleteNoteWithHttpInfo(String resourceType, Long resourceId, Long noteId) throws ApiException {
        com.squareup.okhttp.Call call = deleteNoteValidateBeforeCall(resourceType, resourceId, noteId, null, null);
        Type localVarReturnType = new TypeToken<DeleteResourceTypeResourceIdNotesNoteIdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a Resource Note (asynchronously)
     * Deletes a Resource Note
     * @param resourceType resourceType (required)
     * @param resourceId resourceId (required)
     * @param noteId noteId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNoteAsync(String resourceType, Long resourceId, Long noteId, final ApiCallback<DeleteResourceTypeResourceIdNotesNoteIdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNoteValidateBeforeCall(resourceType, resourceId, noteId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeleteResourceTypeResourceIdNotesNoteIdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveNote
     * @param resourceType resourceType (required)
     * @param resourceId resourceId (required)
     * @param noteId noteId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveNoteCall(String resourceType, Long resourceId, Long noteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{resourceType}/{resourceId}/notes/{noteId}"
            .replaceAll("\\{" + "resourceType" + "\\}", apiClient.escapeString(resourceType.toString()))
            .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()))
            .replaceAll("\\{" + "noteId" + "\\}", apiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveNoteValidateBeforeCall(String resourceType, Long resourceId, Long noteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'resourceType' is set
        if (resourceType == null) {
            throw new ApiException("Missing the required parameter 'resourceType' when calling retrieveNote(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling retrieveNote(Async)");
        }
        
        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling retrieveNote(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveNoteCall(resourceType, resourceId, noteId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a Resource Note
     * Retrieves a Resource Note  Example Requests:  clients/1/notes/76   groups/1/notes/20   clients/1/notes/76?fields&#x3D;note,createdOn,createdByUsername   groups/1/notes/20?fields&#x3D;note,createdOn,createdByUsername
     * @param resourceType resourceType (required)
     * @param resourceId resourceId (required)
     * @param noteId noteId (required)
     * @return GetResourceTypeResourceIdNotesNoteIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetResourceTypeResourceIdNotesNoteIdResponse retrieveNote(String resourceType, Long resourceId, Long noteId) throws ApiException {
        ApiResponse<GetResourceTypeResourceIdNotesNoteIdResponse> resp = retrieveNoteWithHttpInfo(resourceType, resourceId, noteId);
        return resp.getData();
    }

    /**
     * Retrieve a Resource Note
     * Retrieves a Resource Note  Example Requests:  clients/1/notes/76   groups/1/notes/20   clients/1/notes/76?fields&#x3D;note,createdOn,createdByUsername   groups/1/notes/20?fields&#x3D;note,createdOn,createdByUsername
     * @param resourceType resourceType (required)
     * @param resourceId resourceId (required)
     * @param noteId noteId (required)
     * @return ApiResponse&lt;GetResourceTypeResourceIdNotesNoteIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetResourceTypeResourceIdNotesNoteIdResponse> retrieveNoteWithHttpInfo(String resourceType, Long resourceId, Long noteId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveNoteValidateBeforeCall(resourceType, resourceId, noteId, null, null);
        Type localVarReturnType = new TypeToken<GetResourceTypeResourceIdNotesNoteIdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a Resource Note (asynchronously)
     * Retrieves a Resource Note  Example Requests:  clients/1/notes/76   groups/1/notes/20   clients/1/notes/76?fields&#x3D;note,createdOn,createdByUsername   groups/1/notes/20?fields&#x3D;note,createdOn,createdByUsername
     * @param resourceType resourceType (required)
     * @param resourceId resourceId (required)
     * @param noteId noteId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveNoteAsync(String resourceType, Long resourceId, Long noteId, final ApiCallback<GetResourceTypeResourceIdNotesNoteIdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveNoteValidateBeforeCall(resourceType, resourceId, noteId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetResourceTypeResourceIdNotesNoteIdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveNotesByResource
     * @param resourceType resourceType (required)
     * @param resourceId resourceId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveNotesByResourceCall(String resourceType, Long resourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{resourceType}/{resourceId}/notes"
            .replaceAll("\\{" + "resourceType" + "\\}", apiClient.escapeString(resourceType.toString()))
            .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveNotesByResourceValidateBeforeCall(String resourceType, Long resourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'resourceType' is set
        if (resourceType == null) {
            throw new ApiException("Missing the required parameter 'resourceType' when calling retrieveNotesByResource(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling retrieveNotesByResource(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveNotesByResourceCall(resourceType, resourceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a Resource&#39;s Notes
     * Retrieves a Resource&#39;s Notes  Note: Notes are returned in descending createOn order.  Example Requests:  clients/2/notes   groups/2/notes?fields&#x3D;note,createdOn,createdByUsername
     * @param resourceType resourceType (required)
     * @param resourceId resourceId (required)
     * @return List&lt;GetResourceTypeResourceIdNotesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<GetResourceTypeResourceIdNotesResponse> retrieveNotesByResource(String resourceType, Long resourceId) throws ApiException {
        ApiResponse<List<GetResourceTypeResourceIdNotesResponse>> resp = retrieveNotesByResourceWithHttpInfo(resourceType, resourceId);
        return resp.getData();
    }

    /**
     * Retrieve a Resource&#39;s Notes
     * Retrieves a Resource&#39;s Notes  Note: Notes are returned in descending createOn order.  Example Requests:  clients/2/notes   groups/2/notes?fields&#x3D;note,createdOn,createdByUsername
     * @param resourceType resourceType (required)
     * @param resourceId resourceId (required)
     * @return ApiResponse&lt;List&lt;GetResourceTypeResourceIdNotesResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<GetResourceTypeResourceIdNotesResponse>> retrieveNotesByResourceWithHttpInfo(String resourceType, Long resourceId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveNotesByResourceValidateBeforeCall(resourceType, resourceId, null, null);
        Type localVarReturnType = new TypeToken<List<GetResourceTypeResourceIdNotesResponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a Resource&#39;s Notes (asynchronously)
     * Retrieves a Resource&#39;s Notes  Note: Notes are returned in descending createOn order.  Example Requests:  clients/2/notes   groups/2/notes?fields&#x3D;note,createdOn,createdByUsername
     * @param resourceType resourceType (required)
     * @param resourceId resourceId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveNotesByResourceAsync(String resourceType, Long resourceId, final ApiCallback<List<GetResourceTypeResourceIdNotesResponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveNotesByResourceValidateBeforeCall(resourceType, resourceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<GetResourceTypeResourceIdNotesResponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateNote
     * @param resourceType resourceType (required)
     * @param resourceId resourceId (required)
     * @param noteId noteId (required)
     * @param body body (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNoteCall(String resourceType, Long resourceId, Long noteId, PutResourceTypeResourceIdNotesNoteIdRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/{resourceType}/{resourceId}/notes/{noteId}"
            .replaceAll("\\{" + "resourceType" + "\\}", apiClient.escapeString(resourceType.toString()))
            .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()))
            .replaceAll("\\{" + "noteId" + "\\}", apiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateNoteValidateBeforeCall(String resourceType, Long resourceId, Long noteId, PutResourceTypeResourceIdNotesNoteIdRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'resourceType' is set
        if (resourceType == null) {
            throw new ApiException("Missing the required parameter 'resourceType' when calling updateNote(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling updateNote(Async)");
        }
        
        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling updateNote(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateNote(Async)");
        }
        

        com.squareup.okhttp.Call call = updateNoteCall(resourceType, resourceId, noteId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a Resource Note
     * Updates a Resource Note
     * @param resourceType resourceType (required)
     * @param resourceId resourceId (required)
     * @param noteId noteId (required)
     * @param body body (required)
     * @return PutResourceTypeResourceIdNotesNoteIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PutResourceTypeResourceIdNotesNoteIdResponse updateNote(String resourceType, Long resourceId, Long noteId, PutResourceTypeResourceIdNotesNoteIdRequest body) throws ApiException {
        ApiResponse<PutResourceTypeResourceIdNotesNoteIdResponse> resp = updateNoteWithHttpInfo(resourceType, resourceId, noteId, body);
        return resp.getData();
    }

    /**
     * Update a Resource Note
     * Updates a Resource Note
     * @param resourceType resourceType (required)
     * @param resourceId resourceId (required)
     * @param noteId noteId (required)
     * @param body body (required)
     * @return ApiResponse&lt;PutResourceTypeResourceIdNotesNoteIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PutResourceTypeResourceIdNotesNoteIdResponse> updateNoteWithHttpInfo(String resourceType, Long resourceId, Long noteId, PutResourceTypeResourceIdNotesNoteIdRequest body) throws ApiException {
        com.squareup.okhttp.Call call = updateNoteValidateBeforeCall(resourceType, resourceId, noteId, body, null, null);
        Type localVarReturnType = new TypeToken<PutResourceTypeResourceIdNotesNoteIdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a Resource Note (asynchronously)
     * Updates a Resource Note
     * @param resourceType resourceType (required)
     * @param resourceId resourceId (required)
     * @param noteId noteId (required)
     * @param body body (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNoteAsync(String resourceType, Long resourceId, Long noteId, PutResourceTypeResourceIdNotesNoteIdRequest body, final ApiCallback<PutResourceTypeResourceIdNotesNoteIdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNoteValidateBeforeCall(resourceType, resourceId, noteId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PutResourceTypeResourceIdNotesNoteIdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
