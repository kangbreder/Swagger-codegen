/*
 * Apache Fineract API Documentation
 * Apache Fineract is a secure, multi-tenanted microfinance platform. <br />              The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The reference app [  https://demo.openmf.org  ] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation.              <br/>The API                 is organized around REST [ https://en.wikipedia.org/wiki/Representational_state_transfer ]               <br/> Find out more about Apache Fineract on [ https://demo.openmf.org/api-docs/apiLive.htm#top ]              <br/> You can Try The API From Your Browser itself at [ https://demo.openmf.org/api-docs/apiLive.htm#interact ]              <br/> The Generic Options are available at [ https://demo.openmf.org/api-docs/apiLive.htm#genopts ]              <br/> Find out more about Updating Dates and Numbers at [ https://demo.openmf.org/api-docs/apiLive.htm#dates_and_numbers ]              <br/> For the Authentication and the Basic of HTTP and HTTPS refer [ https://demo.openmf.org/api-docs/apiLive.htm#authentication_overview ]              <br/> Check about ERROR codes at [ https://demo.openmf.org/api-docs/apiLive.htm#errors ]               <br/> <br/> Please refer to the old documentation for any documentation queries [ https://demo.openmf.org/api-docs/apiLive.htm ]              <br/>             ______________________________________________________________________________________________________________________________          
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.DeleteClientsClientIdIdentifiersIdentifierIdResponse;
import io.swagger.client.model.GetClientsClientIdIdentifiersResponse;
import io.swagger.client.model.GetClientsClientIdIdentifiersTemplateResponse;
import io.swagger.client.model.PostClientsClientIdIdentifiersRequest;
import io.swagger.client.model.PostClientsClientIdIdentifiersResponse;
import io.swagger.client.model.PutClientsClientIdIdentifiersIdentifierIdRequest;
import io.swagger.client.model.PutClientsClientIdIdentifiersIdentifierIdResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ClientIdentifierApi {
    private ApiClient apiClient;

    public ClientIdentifierApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ClientIdentifierApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createClientIdentifier
     * @param clientId clientId (required)
     * @param body body (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createClientIdentifierCall(Long clientId, PostClientsClientIdIdentifiersRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/clients/{clientId}/identifiers"
            .replaceAll("\\{" + "clientId" + "\\}", apiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createClientIdentifierValidateBeforeCall(Long clientId, PostClientsClientIdIdentifiersRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling createClientIdentifier(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createClientIdentifier(Async)");
        }
        

        com.squareup.okhttp.Call call = createClientIdentifierCall(clientId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an Identifier for a Client
     * Mandatory Fields documentKey, documentTypeId 
     * @param clientId clientId (required)
     * @param body body (required)
     * @return PostClientsClientIdIdentifiersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PostClientsClientIdIdentifiersResponse createClientIdentifier(Long clientId, PostClientsClientIdIdentifiersRequest body) throws ApiException {
        ApiResponse<PostClientsClientIdIdentifiersResponse> resp = createClientIdentifierWithHttpInfo(clientId, body);
        return resp.getData();
    }

    /**
     * Create an Identifier for a Client
     * Mandatory Fields documentKey, documentTypeId 
     * @param clientId clientId (required)
     * @param body body (required)
     * @return ApiResponse&lt;PostClientsClientIdIdentifiersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PostClientsClientIdIdentifiersResponse> createClientIdentifierWithHttpInfo(Long clientId, PostClientsClientIdIdentifiersRequest body) throws ApiException {
        com.squareup.okhttp.Call call = createClientIdentifierValidateBeforeCall(clientId, body, null, null);
        Type localVarReturnType = new TypeToken<PostClientsClientIdIdentifiersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an Identifier for a Client (asynchronously)
     * Mandatory Fields documentKey, documentTypeId 
     * @param clientId clientId (required)
     * @param body body (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createClientIdentifierAsync(Long clientId, PostClientsClientIdIdentifiersRequest body, final ApiCallback<PostClientsClientIdIdentifiersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createClientIdentifierValidateBeforeCall(clientId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PostClientsClientIdIdentifiersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteClientIdentifier
     * @param clientId clientId (required)
     * @param identifierId identifierId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteClientIdentifierCall(Long clientId, Long identifierId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clients/{clientId}/identifiers/{identifierId}"
            .replaceAll("\\{" + "clientId" + "\\}", apiClient.escapeString(clientId.toString()))
            .replaceAll("\\{" + "identifierId" + "\\}", apiClient.escapeString(identifierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteClientIdentifierValidateBeforeCall(Long clientId, Long identifierId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling deleteClientIdentifier(Async)");
        }
        
        // verify the required parameter 'identifierId' is set
        if (identifierId == null) {
            throw new ApiException("Missing the required parameter 'identifierId' when calling deleteClientIdentifier(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteClientIdentifierCall(clientId, identifierId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a Client Identifier
     * Deletes a Client Identifier
     * @param clientId clientId (required)
     * @param identifierId identifierId (required)
     * @return DeleteClientsClientIdIdentifiersIdentifierIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeleteClientsClientIdIdentifiersIdentifierIdResponse deleteClientIdentifier(Long clientId, Long identifierId) throws ApiException {
        ApiResponse<DeleteClientsClientIdIdentifiersIdentifierIdResponse> resp = deleteClientIdentifierWithHttpInfo(clientId, identifierId);
        return resp.getData();
    }

    /**
     * Delete a Client Identifier
     * Deletes a Client Identifier
     * @param clientId clientId (required)
     * @param identifierId identifierId (required)
     * @return ApiResponse&lt;DeleteClientsClientIdIdentifiersIdentifierIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeleteClientsClientIdIdentifiersIdentifierIdResponse> deleteClientIdentifierWithHttpInfo(Long clientId, Long identifierId) throws ApiException {
        com.squareup.okhttp.Call call = deleteClientIdentifierValidateBeforeCall(clientId, identifierId, null, null);
        Type localVarReturnType = new TypeToken<DeleteClientsClientIdIdentifiersIdentifierIdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a Client Identifier (asynchronously)
     * Deletes a Client Identifier
     * @param clientId clientId (required)
     * @param identifierId identifierId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteClientIdentifierAsync(Long clientId, Long identifierId, final ApiCallback<DeleteClientsClientIdIdentifiersIdentifierIdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteClientIdentifierValidateBeforeCall(clientId, identifierId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeleteClientsClientIdIdentifiersIdentifierIdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for newClientIdentifierDetails
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call newClientIdentifierDetailsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clients/{clientId}/identifiers/template";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call newClientIdentifierDetailsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = newClientIdentifierDetailsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve Client Identifier Details Template
     * This is a convenience resource useful for building maintenance user interface screens for client applications. The template data returned consists of any or all of:   Field Defaults  Allowed Value Lists   Example Request: clients/1/identifiers/template
     * @return GetClientsClientIdIdentifiersTemplateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetClientsClientIdIdentifiersTemplateResponse newClientIdentifierDetails() throws ApiException {
        ApiResponse<GetClientsClientIdIdentifiersTemplateResponse> resp = newClientIdentifierDetailsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve Client Identifier Details Template
     * This is a convenience resource useful for building maintenance user interface screens for client applications. The template data returned consists of any or all of:   Field Defaults  Allowed Value Lists   Example Request: clients/1/identifiers/template
     * @return ApiResponse&lt;GetClientsClientIdIdentifiersTemplateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetClientsClientIdIdentifiersTemplateResponse> newClientIdentifierDetailsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = newClientIdentifierDetailsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<GetClientsClientIdIdentifiersTemplateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve Client Identifier Details Template (asynchronously)
     * This is a convenience resource useful for building maintenance user interface screens for client applications. The template data returned consists of any or all of:   Field Defaults  Allowed Value Lists   Example Request: clients/1/identifiers/template
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call newClientIdentifierDetailsAsync(final ApiCallback<GetClientsClientIdIdentifiersTemplateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = newClientIdentifierDetailsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetClientsClientIdIdentifiersTemplateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveAllClientIdentifiers
     * @param clientId clientId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveAllClientIdentifiersCall(Long clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clients/{clientId}/identifiers"
            .replaceAll("\\{" + "clientId" + "\\}", apiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveAllClientIdentifiersValidateBeforeCall(Long clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling retrieveAllClientIdentifiers(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveAllClientIdentifiersCall(clientId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all Identifiers for a Client
     * Example Requests: clients/1/identifiers   clients/1/identifiers?fields&#x3D;documentKey,documentType,description
     * @param clientId clientId (required)
     * @return List&lt;GetClientsClientIdIdentifiersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<GetClientsClientIdIdentifiersResponse> retrieveAllClientIdentifiers(Long clientId) throws ApiException {
        ApiResponse<List<GetClientsClientIdIdentifiersResponse>> resp = retrieveAllClientIdentifiersWithHttpInfo(clientId);
        return resp.getData();
    }

    /**
     * List all Identifiers for a Client
     * Example Requests: clients/1/identifiers   clients/1/identifiers?fields&#x3D;documentKey,documentType,description
     * @param clientId clientId (required)
     * @return ApiResponse&lt;List&lt;GetClientsClientIdIdentifiersResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<GetClientsClientIdIdentifiersResponse>> retrieveAllClientIdentifiersWithHttpInfo(Long clientId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveAllClientIdentifiersValidateBeforeCall(clientId, null, null);
        Type localVarReturnType = new TypeToken<List<GetClientsClientIdIdentifiersResponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all Identifiers for a Client (asynchronously)
     * Example Requests: clients/1/identifiers   clients/1/identifiers?fields&#x3D;documentKey,documentType,description
     * @param clientId clientId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveAllClientIdentifiersAsync(Long clientId, final ApiCallback<List<GetClientsClientIdIdentifiersResponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveAllClientIdentifiersValidateBeforeCall(clientId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<GetClientsClientIdIdentifiersResponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveClientIdentifiers
     * @param clientId clientId (required)
     * @param identifierId identifierId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveClientIdentifiersCall(Long clientId, Long identifierId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clients/{clientId}/identifiers/{identifierId}"
            .replaceAll("\\{" + "clientId" + "\\}", apiClient.escapeString(clientId.toString()))
            .replaceAll("\\{" + "identifierId" + "\\}", apiClient.escapeString(identifierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveClientIdentifiersValidateBeforeCall(Long clientId, Long identifierId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling retrieveClientIdentifiers(Async)");
        }
        
        // verify the required parameter 'identifierId' is set
        if (identifierId == null) {
            throw new ApiException("Missing the required parameter 'identifierId' when calling retrieveClientIdentifiers(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveClientIdentifiersCall(clientId, identifierId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a Client Identifier
     * Example Requests: clients/1/identifier/2   clients/1/identifier/2?template&#x3D;true  clients/1/identifiers/2?fields&#x3D;documentKey,documentType,description
     * @param clientId clientId (required)
     * @param identifierId identifierId (required)
     * @return GetClientsClientIdIdentifiersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetClientsClientIdIdentifiersResponse retrieveClientIdentifiers(Long clientId, Long identifierId) throws ApiException {
        ApiResponse<GetClientsClientIdIdentifiersResponse> resp = retrieveClientIdentifiersWithHttpInfo(clientId, identifierId);
        return resp.getData();
    }

    /**
     * Retrieve a Client Identifier
     * Example Requests: clients/1/identifier/2   clients/1/identifier/2?template&#x3D;true  clients/1/identifiers/2?fields&#x3D;documentKey,documentType,description
     * @param clientId clientId (required)
     * @param identifierId identifierId (required)
     * @return ApiResponse&lt;GetClientsClientIdIdentifiersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetClientsClientIdIdentifiersResponse> retrieveClientIdentifiersWithHttpInfo(Long clientId, Long identifierId) throws ApiException {
        com.squareup.okhttp.Call call = retrieveClientIdentifiersValidateBeforeCall(clientId, identifierId, null, null);
        Type localVarReturnType = new TypeToken<GetClientsClientIdIdentifiersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a Client Identifier (asynchronously)
     * Example Requests: clients/1/identifier/2   clients/1/identifier/2?template&#x3D;true  clients/1/identifiers/2?fields&#x3D;documentKey,documentType,description
     * @param clientId clientId (required)
     * @param identifierId identifierId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveClientIdentifiersAsync(Long clientId, Long identifierId, final ApiCallback<GetClientsClientIdIdentifiersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveClientIdentifiersValidateBeforeCall(clientId, identifierId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetClientsClientIdIdentifiersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateClientIdentifer
     * @param clientId clientId (required)
     * @param identifierId identifierId (required)
     * @param body body (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateClientIdentiferCall(Long clientId, Long identifierId, PutClientsClientIdIdentifiersIdentifierIdRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/clients/{clientId}/identifiers/{identifierId}"
            .replaceAll("\\{" + "clientId" + "\\}", apiClient.escapeString(clientId.toString()))
            .replaceAll("\\{" + "identifierId" + "\\}", apiClient.escapeString(identifierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateClientIdentiferValidateBeforeCall(Long clientId, Long identifierId, PutClientsClientIdIdentifiersIdentifierIdRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling updateClientIdentifer(Async)");
        }
        
        // verify the required parameter 'identifierId' is set
        if (identifierId == null) {
            throw new ApiException("Missing the required parameter 'identifierId' when calling updateClientIdentifer(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateClientIdentifer(Async)");
        }
        

        com.squareup.okhttp.Call call = updateClientIdentiferCall(clientId, identifierId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a Client Identifier
     * Updates a Client Identifier
     * @param clientId clientId (required)
     * @param identifierId identifierId (required)
     * @param body body (required)
     * @return PutClientsClientIdIdentifiersIdentifierIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PutClientsClientIdIdentifiersIdentifierIdResponse updateClientIdentifer(Long clientId, Long identifierId, PutClientsClientIdIdentifiersIdentifierIdRequest body) throws ApiException {
        ApiResponse<PutClientsClientIdIdentifiersIdentifierIdResponse> resp = updateClientIdentiferWithHttpInfo(clientId, identifierId, body);
        return resp.getData();
    }

    /**
     * Update a Client Identifier
     * Updates a Client Identifier
     * @param clientId clientId (required)
     * @param identifierId identifierId (required)
     * @param body body (required)
     * @return ApiResponse&lt;PutClientsClientIdIdentifiersIdentifierIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PutClientsClientIdIdentifiersIdentifierIdResponse> updateClientIdentiferWithHttpInfo(Long clientId, Long identifierId, PutClientsClientIdIdentifiersIdentifierIdRequest body) throws ApiException {
        com.squareup.okhttp.Call call = updateClientIdentiferValidateBeforeCall(clientId, identifierId, body, null, null);
        Type localVarReturnType = new TypeToken<PutClientsClientIdIdentifiersIdentifierIdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a Client Identifier (asynchronously)
     * Updates a Client Identifier
     * @param clientId clientId (required)
     * @param identifierId identifierId (required)
     * @param body body (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateClientIdentiferAsync(Long clientId, Long identifierId, PutClientsClientIdIdentifiersIdentifierIdRequest body, final ApiCallback<PutClientsClientIdIdentifiersIdentifierIdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateClientIdentiferValidateBeforeCall(clientId, identifierId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PutClientsClientIdIdentifiersIdentifierIdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
