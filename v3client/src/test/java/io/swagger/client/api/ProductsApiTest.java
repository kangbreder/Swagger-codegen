/*
 * Apache Fineract API Documentation
 * Apache Fineract is a secure, multi-tenanted microfinance platform. <br />              The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The reference app [  https://demo.openmf.org  ] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation.              <br/>The API                 is organized around REST [ https://en.wikipedia.org/wiki/Representational_state_transfer ]               <br/> Find out more about Apache Fineract on [ https://demo.openmf.org/api-docs/apiLive.htm#top ]              <br/> You can Try The API From Your Browser itself at [ https://demo.openmf.org/api-docs/apiLive.htm#interact ]              <br/> The Generic Options are available at [ https://demo.openmf.org/api-docs/apiLive.htm#genopts ]              <br/> Find out more about Updating Dates and Numbers at [ https://demo.openmf.org/api-docs/apiLive.htm#dates_and_numbers ]              <br/> For the Authentication and the Basic of HTTP and HTTPS refer [ https://demo.openmf.org/api-docs/apiLive.htm#authentication_overview ]              <br/> Check about ERROR codes at [ https://demo.openmf.org/api-docs/apiLive.htm#errors ]               <br/> <br/> Please refer to the old documentation for any documentation queries [ https://demo.openmf.org/api-docs/apiLive.htm ]              <br/>             ______________________________________________________________________________________________________________________________          
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.GetProductsTypeProductIdResponse;
import io.swagger.client.model.GetProductsTypeResponse;
import io.swagger.client.model.PostProductsTypeRequest;
import io.swagger.client.model.PostProductsTypeResponse;
import io.swagger.client.model.PutProductsTypeProductIdRequest;
import io.swagger.client.model.PutProductsTypeProductIdResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductsApi
 */
@Ignore
public class ProductsApiTest {

    private final ProductsApi api = new ProductsApi();

    
    /**
     * Create a Share Product
     *
     * Creates a Share Product  Mandatory Fields: name, shortName, description, currencyCode, digitsAfterDecimal,inMultiplesOf, locale, totalShares, unitPrice, nominalShares,allowDividendCalculationForInactiveClients,accountingRule  Mandatory Fields for Cash based accounting (accountingRule &#x3D; 2): shareReferenceId, shareSuspenseId, shareEquityId, incomeFromFeeAccountId  Optional Fields: sharesIssued, minimumShares, maximumShares, minimumActivePeriodForDividends, minimumactiveperiodFrequencyType, lockinPeriodFrequency, lockinPeriodFrequencyType, marketPricePeriods, chargesSelected
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProductTest() throws ApiException {
        String type = null;
        PostProductsTypeRequest body = null;
        PostProductsTypeResponse response = api.createProduct(type, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void handleCommandsTest() throws ApiException {
        String type = null;
        Long productId = null;
        String command = null;
        String response = api.handleCommands(type, productId, command);

        // TODO: test validations
    }
    
    /**
     * List Share Products
     *
     * Lists Share Products  Mandatory Fields: limit, offset  Example Requests:  shareproducts
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveAllProductsTest() throws ApiException {
        String type = null;
        Integer offset = null;
        Integer limit = null;
        GetProductsTypeResponse response = api.retrieveAllProducts(type, offset, limit);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Share Product
     *
     * Retrieves a Share Product  Example Requests:  products/share/1   products/share/1?template&#x3D;true
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveProductTest() throws ApiException {
        Long productId = null;
        String type = null;
        GetProductsTypeProductIdResponse response = api.retrieveProduct(productId, type);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveTemplateTest() throws ApiException {
        String type = null;
        String response = api.retrieveTemplate(type);

        // TODO: test validations
    }
    
    /**
     * Update a Share Product
     *
     * Updates a Share Product
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProductTest() throws ApiException {
        String type = null;
        Long productId = null;
        PutProductsTypeProductIdRequest body = null;
        PutProductsTypeProductIdResponse response = api.updateProduct(type, productId, body);

        // TODO: test validations
    }
    
}
