/*
 * Apache Fineract API Documentation
 * Apache Fineract is a secure, multi-tenanted microfinance platform. <br />              The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The reference app [  https://demo.openmf.org  ] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation.              <br/>The API                 is organized around REST [ https://en.wikipedia.org/wiki/Representational_state_transfer ]               <br/> Find out more about Apache Fineract on [ https://demo.openmf.org/api-docs/apiLive.htm#top ]              <br/> You can Try The API From Your Browser itself at [ https://demo.openmf.org/api-docs/apiLive.htm#interact ]              <br/> The Generic Options are available at [ https://demo.openmf.org/api-docs/apiLive.htm#genopts ]              <br/> Find out more about Updating Dates and Numbers at [ https://demo.openmf.org/api-docs/apiLive.htm#dates_and_numbers ]              <br/> For the Authentication and the Basic of HTTP and HTTPS refer [ https://demo.openmf.org/api-docs/apiLive.htm#authentication_overview ]              <br/> Check about ERROR codes at [ https://demo.openmf.org/api-docs/apiLive.htm#errors ]               <br/> <br/> Please refer to the old documentation for any documentation queries [ https://demo.openmf.org/api-docs/apiLive.htm ]              <br/>             ______________________________________________________________________________________________________________________________          
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import java.io.File;
import io.swagger.client.model.JournalEntryCommand;
import io.swagger.client.model.JournalEntryData;
import io.swagger.client.model.PostJournalEntriesResponse;
import io.swagger.client.model.PostJournalEntriesTransactionIdRequest;
import io.swagger.client.model.PostJournalEntriesTransactionIdResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for JournalEntriesApi
 */
@Ignore
public class JournalEntriesApiTest {

    private final JournalEntriesApi api = new JournalEntriesApi();

    
    /**
     * Create \&quot;Balanced\&quot; Journal Entries
     *
     * Note: A Balanced (simple) Journal entry would have atleast one \&quot;Debit\&quot; and one \&quot;Credit\&quot; entry whose amounts are equal  Compound Journal entries may have \&quot;n\&quot; debits and \&quot;m\&quot; credits where both \&quot;m\&quot; and \&quot;n\&quot; are greater than 0 and the net sum or all debits and credits are equal    Mandatory Fields officeId, transactionDate   credits- glAccountId, amount, comments    debits-  glAccountId, amount, comments    Optional Fields paymentTypeId, accountNumber, checkNumber, routingCode, receiptNumber, bankNumber
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGLJournalEntryTest() throws ApiException {
        String command = null;
        JournalEntryCommand body = null;
        PostJournalEntriesResponse response = api.createGLJournalEntry(command, body);

        // TODO: test validations
    }
    
    /**
     * Update Running balances for Journal Entries
     *
     * This API calculates the running balances for office. If office ID not provided this API calculates running balances for all offices.  Mandatory Fields officeId
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createReversalJournalEntryTest() throws ApiException {
        String transactionId = null;
        String command = null;
        PostJournalEntriesTransactionIdRequest body = null;
        PostJournalEntriesTransactionIdResponse response = api.createReversalJournalEntry(transactionId, command, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJournalEntriesTemplateTest() throws ApiException {
        Long officeId = null;
        String dateFormat = null;
        api.getJournalEntriesTemplate(officeId, dateFormat);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postJournalEntriesTemplateTest() throws ApiException {
        File file = null;
        String locale = null;
        String dateFormat = null;
        String response = api.postJournalEntriesTemplate(file, locale, dateFormat);

        // TODO: test validations
    }
    
    /**
     * Retrieve a single Entry
     *
     * Example Requests:  journalentries/1    journalentries/1?fields&#x3D;officeName,glAccountId,entryType,amount  journalentries/1?runningBalance&#x3D;true  journalentries/1?transactionDetails&#x3D;true
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retreiveJournalEntryByIdTest() throws ApiException {
        Long journalEntryId = null;
        Boolean runningBalance = null;
        Boolean transactionDetails = null;
        JournalEntryData response = api.retreiveJournalEntryById(journalEntryId, runningBalance, transactionDetails);

        // TODO: test validations
    }
    
    /**
     * List Journal Entries
     *
     * The list capability of journal entries can support pagination and sorting.  Example Requests:  journalentries  journalentries?transactionId&#x3D;PB37X8Y21EQUY4S  journalentries?officeId&#x3D;1&amp;manualEntriesOnly&#x3D;true&amp;fromDate&#x3D;1 July 2013&amp;toDate&#x3D;15 July 2013&amp;dateFormat&#x3D;dd MMMM yyyy&amp;locale&#x3D;en  journalentries?fields&#x3D;officeName,glAccountName,transactionDate  journalentries?offset&#x3D;10&amp;limit&#x3D;50  journalentries?orderBy&#x3D;transactionId&amp;sortOrder&#x3D;DESC  journalentries?runningBalance&#x3D;true  journalentries?transactionDetails&#x3D;true  journalentries?loanId&#x3D;12  journalentries?savingsId&#x3D;24
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveAllTest() throws ApiException {
        Long officeId = null;
        Long glAccountId = null;
        Boolean manualEntriesOnly = null;
        String fromDate = null;
        String toDate = null;
        String transactionId = null;
        Integer entityType = null;
        Integer offset = null;
        Integer limit = null;
        String orderBy = null;
        String sortOrder = null;
        String locale = null;
        String dateFormat = null;
        Long loanId = null;
        Long savingsId = null;
        Boolean runningBalance = null;
        Boolean transactionDetails = null;
        List<JournalEntryData> response = api.retrieveAll(officeId, glAccountId, manualEntriesOnly, fromDate, toDate, transactionId, entityType, offset, limit, orderBy, sortOrder, locale, dateFormat, loanId, savingsId, runningBalance, transactionDetails);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveJournalEntriesTest() throws ApiException {
        Integer offset = null;
        Integer limit = null;
        Long entryId = null;
        String response = api.retrieveJournalEntries(offset, limit, entryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveOpeningBalanceTest() throws ApiException {
        Long officeId = null;
        String currencyCode = null;
        String response = api.retrieveOpeningBalance(officeId, currencyCode);

        // TODO: test validations
    }
    
}
