/*
 * Apache Fineract API Documentation
 * Apache Fineract is a secure, multi-tenanted microfinance platform. <br />              The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The reference app [  https://demo.openmf.org  ] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation.              <br/>The API                 is organized around REST [ https://en.wikipedia.org/wiki/Representational_state_transfer ]               <br/> Find out more about Apache Fineract on [ https://demo.openmf.org/api-docs/apiLive.htm#top ]              <br/> You can Try The API From Your Browser itself at [ https://demo.openmf.org/api-docs/apiLive.htm#interact ]              <br/> The Generic Options are available at [ https://demo.openmf.org/api-docs/apiLive.htm#genopts ]              <br/> Find out more about Updating Dates and Numbers at [ https://demo.openmf.org/api-docs/apiLive.htm#dates_and_numbers ]              <br/> For the Authentication and the Basic of HTTP and HTTPS refer [ https://demo.openmf.org/api-docs/apiLive.htm#authentication_overview ]              <br/> Check about ERROR codes at [ https://demo.openmf.org/api-docs/apiLive.htm#errors ]               <br/> <br/> Please refer to the old documentation for any documentation queries [ https://demo.openmf.org/api-docs/apiLive.htm ]              <br/>             ______________________________________________________________________________________________________________________________          
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.DeleteLoansLoanIdChargesChargeIdResponse;
import io.swagger.client.model.GetLoansLoanIdChargesChargeIdResponse;
import io.swagger.client.model.GetLoansLoanIdChargesTemplateResponse;
import io.swagger.client.model.PostLoansLoanIdChargesChargeIdRequest;
import io.swagger.client.model.PostLoansLoanIdChargesChargeIdResponse;
import io.swagger.client.model.PostLoansLoanIdChargesRequest;
import io.swagger.client.model.PostLoansLoanIdChargesResponse;
import io.swagger.client.model.PutLoansLoanIdChargesChargeIdRequest;
import io.swagger.client.model.PutLoansLoanIdChargesChargeIdResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LoanChargesApi
 */
@Ignore
public class LoanChargesApiTest {

    private final LoanChargesApi api = new LoanChargesApi();

    
    /**
     * Delete a Loan Charge
     *
     * Note: Currently, A Loan Charge may only be removed from Loans that are not yet approved.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteLoanChargeTest() throws ApiException {
        Long loanId = null;
        Long chargeId = null;
        DeleteLoansLoanIdChargesChargeIdResponse response = api.deleteLoanCharge(loanId, chargeId);

        // TODO: test validations
    }
    
    /**
     * Pay Loan Charge
     *
     * Loan Charge will be paid if the loan is linked with a savings account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void executeLoanChargeTest() throws ApiException {
        Long loanId = null;
        Long chargeId = null;
        PostLoansLoanIdChargesChargeIdRequest body = null;
        String command = null;
        PostLoansLoanIdChargesChargeIdResponse response = api.executeLoanCharge(loanId, chargeId, body, command);

        // TODO: test validations
    }
    
    /**
     * Create a Loan Charge
     *
     * It Creates a Loan Charge
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void executeLoanCharge_0Test() throws ApiException {
        Long loanId = null;
        PostLoansLoanIdChargesRequest body = null;
        String command = null;
        PostLoansLoanIdChargesResponse response = api.executeLoanCharge_0(loanId, body, command);

        // TODO: test validations
    }
    
    /**
     * List Loan Charges
     *
     * It lists all the Loan Charges specific to a Loan   Example Requests:  loans/1/charges   loans/1/charges?fields&#x3D;name,amountOrPercentage
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveAllLoanChargesTest() throws ApiException {
        Long loanId = null;
        List<GetLoansLoanIdChargesChargeIdResponse> response = api.retrieveAllLoanCharges(loanId);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Loan Charge
     *
     * Retrieves Loan Charge according to the Loan ID and Charge IDExample Requests:  /loans/1/charges/1   /loans/1/charges/1?fields&#x3D;name,amountOrPercentage
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveLoanChargeTest() throws ApiException {
        Long loanId = null;
        Long chargeId = null;
        GetLoansLoanIdChargesChargeIdResponse response = api.retrieveLoanCharge(loanId, chargeId);

        // TODO: test validations
    }
    
    /**
     * Retrieve Loan Charges Template
     *
     * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists Example Request:  loans/1/charges/template  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveTemplateTest() throws ApiException {
        Long loanId = null;
        GetLoansLoanIdChargesTemplateResponse response = api.retrieveTemplate(loanId);

        // TODO: test validations
    }
    
    /**
     * Update a Loan Charge
     *
     * Currently Loan Charges may be updated only if the Loan is not yet approved
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLoanChargeTest() throws ApiException {
        Long loanId = null;
        Long chargeId = null;
        PutLoansLoanIdChargesChargeIdRequest body = null;
        PutLoansLoanIdChargesChargeIdResponse response = api.updateLoanCharge(loanId, chargeId, body);

        // TODO: test validations
    }
    
}
