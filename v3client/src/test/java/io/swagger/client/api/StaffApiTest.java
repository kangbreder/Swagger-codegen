/*
 * Apache Fineract API Documentation
 * Apache Fineract is a secure, multi-tenanted microfinance platform. <br />              The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The reference app [  https://demo.openmf.org  ] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation.              <br/>The API                 is organized around REST [ https://en.wikipedia.org/wiki/Representational_state_transfer ]               <br/> Find out more about Apache Fineract on [ https://demo.openmf.org/api-docs/apiLive.htm#top ]              <br/> You can Try The API From Your Browser itself at [ https://demo.openmf.org/api-docs/apiLive.htm#interact ]              <br/> The Generic Options are available at [ https://demo.openmf.org/api-docs/apiLive.htm#genopts ]              <br/> Find out more about Updating Dates and Numbers at [ https://demo.openmf.org/api-docs/apiLive.htm#dates_and_numbers ]              <br/> For the Authentication and the Basic of HTTP and HTTPS refer [ https://demo.openmf.org/api-docs/apiLive.htm#authentication_overview ]              <br/> Check about ERROR codes at [ https://demo.openmf.org/api-docs/apiLive.htm#errors ]               <br/> <br/> Please refer to the old documentation for any documentation queries [ https://demo.openmf.org/api-docs/apiLive.htm ]              <br/>             ______________________________________________________________________________________________________________________________          
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import java.io.File;
import io.swagger.client.model.GetStaffResponse;
import io.swagger.client.model.PostStaffRequest;
import io.swagger.client.model.PostStaffResponse;
import io.swagger.client.model.PutStaffRequest;
import io.swagger.client.model.PutStaffResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StaffApi
 */
@Ignore
public class StaffApiTest {

    private final StaffApi api = new StaffApi();

    
    /**
     * Create a staff member
     *
     * Creates a staff member.  Mandatory Fields:  officeId, firstname, lastname  Optional Fields:  isLoanOfficer, isActive
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createStaffTest() throws ApiException {
        PostStaffRequest body = null;
        PostStaffResponse response = api.createStaff(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStaffTemplateTest() throws ApiException {
        Long officeId = null;
        String dateFormat = null;
        api.getStaffTemplate(officeId, dateFormat);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postStaffTemplateTest() throws ApiException {
        File file = null;
        String locale = null;
        String dateFormat = null;
        String response = api.postStaffTemplate(file, locale, dateFormat);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Staff Member
     *
     * Returns the details of a Staff Member.  Example Requests:  staff/1
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retreiveStaffTest() throws ApiException {
        Long staffId = null;
        GetStaffResponse response = api.retreiveStaff(staffId);

        // TODO: test validations
    }
    
    /**
     * Retrieve Staff
     *
     * Returns the list of staff members.  Example Requests:  staff     Retrieve a Staff by status  Returns the details of a Staff based on status.  By default it Returns all the ACTIVE Staff.  If status&#x3D;INACTIVE, then it returns all INACTIVE Staff.  and for status&#x3D;ALL, it Returns both ACTIVE and INACTIVE Staff.  Example Requests:  staff?status&#x3D;active
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveStaffTest() throws ApiException {
        String sqlSearch = null;
        Long officeId = null;
        Boolean staffInOfficeHierarchy = null;
        Boolean loanOfficersOnly = null;
        String status = null;
        GetStaffResponse response = api.retrieveStaff(sqlSearch, officeId, staffInOfficeHierarchy, loanOfficersOnly, status);

        // TODO: test validations
    }
    
    /**
     * Update a Staff Member
     *
     * Updates the details of a staff member.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateStaffTest() throws ApiException {
        Long staffId = null;
        PutStaffRequest body = null;
        PutStaffResponse response = api.updateStaff(staffId, body);

        // TODO: test validations
    }
    
}
