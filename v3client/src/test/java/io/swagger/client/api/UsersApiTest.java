/*
 * Apache Fineract API Documentation
 * Apache Fineract is a secure, multi-tenanted microfinance platform. <br />              The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The reference app [  https://demo.openmf.org  ] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation.              <br/>The API                 is organized around REST [ https://en.wikipedia.org/wiki/Representational_state_transfer ]               <br/> Find out more about Apache Fineract on [ https://demo.openmf.org/api-docs/apiLive.htm#top ]              <br/> You can Try The API From Your Browser itself at [ https://demo.openmf.org/api-docs/apiLive.htm#interact ]              <br/> The Generic Options are available at [ https://demo.openmf.org/api-docs/apiLive.htm#genopts ]              <br/> Find out more about Updating Dates and Numbers at [ https://demo.openmf.org/api-docs/apiLive.htm#dates_and_numbers ]              <br/> For the Authentication and the Basic of HTTP and HTTPS refer [ https://demo.openmf.org/api-docs/apiLive.htm#authentication_overview ]              <br/> Check about ERROR codes at [ https://demo.openmf.org/api-docs/apiLive.htm#errors ]               <br/> <br/> Please refer to the old documentation for any documentation queries [ https://demo.openmf.org/api-docs/apiLive.htm ]              <br/>             ______________________________________________________________________________________________________________________________          
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.DeleteUsersUserIdResponse;
import java.io.File;
import io.swagger.client.model.GetUsersResponse;
import io.swagger.client.model.GetUsersTemplateResponse;
import io.swagger.client.model.GetUsersUserIdResponse;
import io.swagger.client.model.PostUsersRequest;
import io.swagger.client.model.PostUsersResponse;
import io.swagger.client.model.PutUsersUserIdRequest;
import io.swagger.client.model.PutUsersUserIdResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Ignore
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    
    /**
     * Create a User
     *
     * Adds new application user.  Note: Password information is not required (or processed). Password details at present are auto-generated and then sent to the email account given (which is why it can take a few seconds to complete).  Mandatory Fields:  username, firstname, lastname, email, officeId, roles, sendPasswordToEmail  Optional Fields:  staffId,passwordNeverExpires,isSelfServiceUser,clients
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTest() throws ApiException {
        PostUsersRequest body = null;
        PostUsersResponse response = api.create(body);

        // TODO: test validations
    }
    
    /**
     * Delete a User
     *
     * Removes the user and the associated roles and permissions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTest() throws ApiException {
        Long userId = null;
        DeleteUsersUserIdResponse response = api.delete(userId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserTemplateTest() throws ApiException {
        Long officeId = null;
        Long staffId = null;
        String dateFormat = null;
        api.getUserTemplate(officeId, staffId, dateFormat);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postUsersTemplateTest() throws ApiException {
        File file = null;
        String locale = null;
        String dateFormat = null;
        String response = api.postUsersTemplate(file, locale, dateFormat);

        // TODO: test validations
    }
    
    /**
     * Retrieve list of users
     *
     * Example Requests:  users   users?fields&#x3D;id,username,email,officeName
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveAllTest() throws ApiException {
        List<GetUsersResponse> response = api.retrieveAll();

        // TODO: test validations
    }
    
    /**
     * Retrieve a User
     *
     * Example Requests:  users/1   users/1?template&#x3D;true   users/1?fields&#x3D;username,officeName
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveOneTest() throws ApiException {
        Long userId = null;
        GetUsersUserIdResponse response = api.retrieveOne(userId);

        // TODO: test validations
    }
    
    /**
     * Retrieve User Details Template
     *
     * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists Example Request:  users/template
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void templateTest() throws ApiException {
        GetUsersTemplateResponse response = api.template();

        // TODO: test validations
    }
    
    /**
     * Update a User
     *
     * When updating a password you must provide the repeatPassword parameter also.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTest() throws ApiException {
        Long userId = null;
        PutUsersUserIdRequest body = null;
        PutUsersUserIdResponse response = api.update(userId, body);

        // TODO: test validations
    }
    
}
