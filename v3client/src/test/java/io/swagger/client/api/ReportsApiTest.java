/*
 * Apache Fineract API Documentation
 * Apache Fineract is a secure, multi-tenanted microfinance platform. <br />              The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The reference app [  https://demo.openmf.org  ] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation.              <br/>The API                 is organized around REST [ https://en.wikipedia.org/wiki/Representational_state_transfer ]               <br/> Find out more about Apache Fineract on [ https://demo.openmf.org/api-docs/apiLive.htm#top ]              <br/> You can Try The API From Your Browser itself at [ https://demo.openmf.org/api-docs/apiLive.htm#interact ]              <br/> The Generic Options are available at [ https://demo.openmf.org/api-docs/apiLive.htm#genopts ]              <br/> Find out more about Updating Dates and Numbers at [ https://demo.openmf.org/api-docs/apiLive.htm#dates_and_numbers ]              <br/> For the Authentication and the Basic of HTTP and HTTPS refer [ https://demo.openmf.org/api-docs/apiLive.htm#authentication_overview ]              <br/> Check about ERROR codes at [ https://demo.openmf.org/api-docs/apiLive.htm#errors ]               <br/> <br/> Please refer to the old documentation for any documentation queries [ https://demo.openmf.org/api-docs/apiLive.htm ]              <br/>             ______________________________________________________________________________________________________________________________          
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.DeleteReportsResponse;
import io.swagger.client.model.GetReportsResponse;
import io.swagger.client.model.GetReportsTemplateResponse;
import io.swagger.client.model.PostReportsResponse;
import io.swagger.client.model.PostRepostRequest;
import io.swagger.client.model.PutReportRequest;
import io.swagger.client.model.PutReportResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReportsApi
 */
@Ignore
public class ReportsApiTest {

    private final ReportsApi api = new ReportsApi();

    
    /**
     * Create a Report
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createReportTest() throws ApiException {
        PostRepostRequest body = null;
        PostReportsResponse response = api.createReport(body);

        // TODO: test validations
    }
    
    /**
     * Delete a Report
     *
     * Only non-core reports can be deleted.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteReportTest() throws ApiException {
        Long id = null;
        DeleteReportsResponse response = api.deleteReport(id);

        // TODO: test validations
    }
    
    /**
     * Retrieve Report Template
     *
     * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists  Example Request :   reports/template
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveOfficeTemplateTest() throws ApiException {
        GetReportsTemplateResponse response = api.retrieveOfficeTemplate();

        // TODO: test validations
    }
    
    /**
     * Retrieve a Report 
     *
     * Example Requests:  reports/1   reports/1?template&#x3D;true
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveReportTest() throws ApiException {
        Long id = null;
        GetReportsResponse response = api.retrieveReport(id);

        // TODO: test validations
    }
    
    /**
     * List Reports
     *
     * Lists all reports and their parameters.  Example Request:  reports
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveReportListTest() throws ApiException {
        api.retrieveReportList();

        // TODO: test validations
    }
    
    /**
     * Update a Report
     *
     * Only the useReport value can be updated for core reports.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateReportTest() throws ApiException {
        Long id = null;
        PutReportRequest body = null;
        PutReportResponse response = api.updateReport(id, body);

        // TODO: test validations
    }
    
}
