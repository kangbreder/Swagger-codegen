/*
 * Apache Fineract API Documentation
 * Apache Fineract is a secure, multi-tenanted microfinance platform. <br />              The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The reference app [  https://demo.openmf.org  ] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation.              <br/>The API                 is organized around REST [ https://en.wikipedia.org/wiki/Representational_state_transfer ]               <br/> Find out more about Apache Fineract on [ https://demo.openmf.org/api-docs/apiLive.htm#top ]              <br/> You can Try The API From Your Browser itself at [ https://demo.openmf.org/api-docs/apiLive.htm#interact ]              <br/> The Generic Options are available at [ https://demo.openmf.org/api-docs/apiLive.htm#genopts ]              <br/> Find out more about Updating Dates and Numbers at [ https://demo.openmf.org/api-docs/apiLive.htm#dates_and_numbers ]              <br/> For the Authentication and the Basic of HTTP and HTTPS refer [ https://demo.openmf.org/api-docs/apiLive.htm#authentication_overview ]              <br/> Check about ERROR codes at [ https://demo.openmf.org/api-docs/apiLive.htm#errors ]               <br/> <br/> Please refer to the old documentation for any documentation queries [ https://demo.openmf.org/api-docs/apiLive.htm ]              <br/>             ______________________________________________________________________________________________________________________________          
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.GetStandingInstructionsResponse;
import io.swagger.client.model.GetStandingInstructionsStandingInstructionIdResponse;
import io.swagger.client.model.GetStandingInstructionsTemplateResponse;
import io.swagger.client.model.PostStandingInstructionsRequest;
import io.swagger.client.model.PostStandingInstructionsResponse;
import io.swagger.client.model.PutStandingInstructionsStandingInstructionIdRequest;
import io.swagger.client.model.PutStandingInstructionsStandingInstructionIdResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StandingInstructionsApi
 */
@Ignore
public class StandingInstructionsApiTest {

    private final StandingInstructionsApi api = new StandingInstructionsApi();

    
    /**
     * Create new Standing Instruction
     *
     * Ability to create new instruction for transfer of monetary funds from one account to another
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTest() throws ApiException {
        PostStandingInstructionsRequest body = null;
        PostStandingInstructionsResponse response = api.create(body);

        // TODO: test validations
    }
    
    /**
     * List Standing Instructions
     *
     * Example Requests:  standinginstructions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveAllTest() throws ApiException {
        String sqlSearch = null;
        String externalId = null;
        Integer offset = null;
        Integer limit = null;
        String orderBy = null;
        String sortOrder = null;
        Integer transferType = null;
        String clientName = null;
        Long clientId = null;
        Long fromAccountId = null;
        Integer fromAccountType = null;
        GetStandingInstructionsResponse response = api.retrieveAll(sqlSearch, externalId, offset, limit, orderBy, sortOrder, transferType, clientName, clientId, fromAccountId, fromAccountType);

        // TODO: test validations
    }
    
    /**
     * Retrieve Standing Instruction
     *
     * Example Requests :  standinginstructions/1
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveOneTest() throws ApiException {
        Long standingInstructionId = null;
        String sqlSearch = null;
        String externalId = null;
        Integer offset = null;
        Integer limit = null;
        String orderBy = null;
        String sortOrder = null;
        GetStandingInstructionsStandingInstructionIdResponse response = api.retrieveOne(standingInstructionId, sqlSearch, externalId, offset, limit, orderBy, sortOrder);

        // TODO: test validations
    }
    
    /**
     * Retrieve Standing Instruction Template
     *
     * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists Example Requests:  standinginstructions/template?fromAccountType&#x3D;2&amp;fromOfficeId&#x3D;1  standinginstructions/template?fromAccountType&#x3D;2&amp;fromOfficeId&#x3D;1&amp;fromClientId&#x3D;1&amp;transferType&#x3D;1  standinginstructions/template?fromClientId&#x3D;1&amp;fromAccountType&#x3D;2&amp;fromAccountId&#x3D;1&amp;transferType&#x3D;1
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void templateTest() throws ApiException {
        Long fromOfficeId = null;
        Long fromClientId = null;
        Long fromAccountId = null;
        Integer fromAccountType = null;
        Long toOfficeId = null;
        Long toClientId = null;
        Long toAccountId = null;
        Integer toAccountType = null;
        Integer transferType = null;
        GetStandingInstructionsTemplateResponse response = api.template(fromOfficeId, fromClientId, fromAccountId, fromAccountType, toOfficeId, toClientId, toAccountId, toAccountType, transferType);

        // TODO: test validations
    }
    
    /**
     * Update Standing Instruction | Delete Standing Instruction
     *
     * Ability to modify existing instruction for transfer of monetary funds from one account to another.  PUT https://DomainName/api/v1/standinginstructions/1?command&#x3D;update   Ability to modify existing instruction for transfer of monetary funds from one account to another.  PUT https://DomainName/api/v1/standinginstructions/1?command&#x3D;delete
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTest() throws ApiException {
        Long standingInstructionId = null;
        String command = null;
        PutStandingInstructionsStandingInstructionIdRequest body = null;
        PutStandingInstructionsStandingInstructionIdResponse response = api.update(standingInstructionId, command, body);

        // TODO: test validations
    }
    
}
