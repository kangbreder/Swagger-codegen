/*
 * Apache Fineract API Documentation
 * Apache Fineract is a secure, multi-tenanted microfinance platform. <br />              The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The reference app [  https://demo.openmf.org  ] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation.              <br/>The API                 is organized around REST [ https://en.wikipedia.org/wiki/Representational_state_transfer ]               <br/> Find out more about Apache Fineract on [ https://demo.openmf.org/api-docs/apiLive.htm#top ]              <br/> You can Try The API From Your Browser itself at [ https://demo.openmf.org/api-docs/apiLive.htm#interact ]              <br/> The Generic Options are available at [ https://demo.openmf.org/api-docs/apiLive.htm#genopts ]              <br/> Find out more about Updating Dates and Numbers at [ https://demo.openmf.org/api-docs/apiLive.htm#dates_and_numbers ]              <br/> For the Authentication and the Basic of HTTP and HTTPS refer [ https://demo.openmf.org/api-docs/apiLive.htm#authentication_overview ]              <br/> Check about ERROR codes at [ https://demo.openmf.org/api-docs/apiLive.htm#errors ]               <br/> <br/> Please refer to the old documentation for any documentation queries [ https://demo.openmf.org/api-docs/apiLive.htm ]              <br/>             ______________________________________________________________________________________________________________________________          
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.DeleteCentersCenterIdResponse;
import java.io.File;
import io.swagger.client.model.GetCentersCenterIdAccountsResponse;
import io.swagger.client.model.GetCentersCenterIdResponse;
import io.swagger.client.model.GetCentersResponse;
import io.swagger.client.model.GetCentersTemplateResponse;
import io.swagger.client.model.PostCentersCenterIdRequest;
import io.swagger.client.model.PostCentersCenterIdResponse;
import io.swagger.client.model.PostCentersRequest;
import io.swagger.client.model.PostCentersResponse;
import io.swagger.client.model.PutCentersCenterIdRequest;
import io.swagger.client.model.PutCentersCenterIdResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CentersApi
 */
@Ignore
public class CentersApiTest {

    private final CentersApi api = new CentersApi();

    
    /**
     * Activate a Center | Generate Collection Sheet | Save Collection Sheet | Close a Center | Associate Groups | Disassociate Groups
     *
     * Activate a Center:  Centers can be created in a Pending state. This API exists to enable center activation. If the center happens to be already active, this API will result in an error.  Close a Center:  Centers can be closed if they don&#39;t have any non-closed groups or saving accounts. If the Center has any active groups or savings accounts, this API will result in an error.  Associate Groups:  This API allows associating existing groups to a center. The groups are listed from the office to which the center is associated. If group(s) is already associated with a center, this API will result in an error.  Disassociate Groups:  This API allows to disassociate groups from a center.  Generate Collection Sheet:  This Api retrieves repayment details of all jlg loans under a center as on a specified meeting date.  Save Collection Sheet:  This Api allows the loan officer to perform bulk repayments of JLG loans for a center on a given meeting date.  Showing Request/Response for Close a Center
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void activateTest() throws ApiException {
        Long centerId = null;
        PostCentersCenterIdRequest body = null;
        String command = null;
        PostCentersCenterIdResponse response = api.activate(centerId, body, command);

        // TODO: test validations
    }
    
    /**
     * Create a Center
     *
     * Creates a Center  Mandatory Fields: name, officeId, active, activationDate (if active&#x3D;true)  Optional Fields: externalId, staffId, groupMembers
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTest() throws ApiException {
        PostCentersRequest body = null;
        PostCentersResponse response = api.create(body);

        // TODO: test validations
    }
    
    /**
     * Delete a Center
     *
     * A Center can be deleted if it is in pending state and has no association - groups, loans or savings
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTest() throws ApiException {
        Long centerId = null;
        DeleteCentersCenterIdResponse response = api.delete(centerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCentersTemplateTest() throws ApiException {
        Long officeId = null;
        Long staffId = null;
        String dateFormat = null;
        api.getCentersTemplate(officeId, staffId, dateFormat);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postCentersTemplateTest() throws ApiException {
        File file = null;
        String locale = null;
        String dateFormat = null;
        String response = api.postCentersTemplate(file, locale, dateFormat);

        // TODO: test validations
    }
    
    /**
     * List Centers
     *
     * The default implementation supports pagination and sorting with the default pagination size set to 200 records. The parameter limit with value -1 will return all entries.  Example Requests:    centers    centers?fields&#x3D;name,officeName,joinedDate    centers?offset&#x3D;10&amp;limit&#x3D;50    centers?orderBy&#x3D;name&amp;sortOrder&#x3D;DESC
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveAllTest() throws ApiException {
        String sqlSearch = null;
        Long officeId = null;
        Long staffId = null;
        String externalId = null;
        String name = null;
        String underHierarchy = null;
        Boolean paged = null;
        Integer offset = null;
        Integer limit = null;
        String orderBy = null;
        String sortOrder = null;
        String meetingDate = null;
        String dateFormat = null;
        String locale = null;
        GetCentersResponse response = api.retrieveAll(sqlSearch, officeId, staffId, externalId, name, underHierarchy, paged, offset, limit, orderBy, sortOrder, meetingDate, dateFormat, locale);

        // TODO: test validations
    }
    
    /**
     * Retrieve Center accounts overview
     *
     * An example of how a savings summary for a Center can be provided. This is requested in a specific use case of the reference application.  It is quite reasonable to add resources like this to simplify User Interface development.    Example Requests:    centers/9/accounts
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveGroupAccountTest() throws ApiException {
        Long centerId = null;
        GetCentersCenterIdAccountsResponse response = api.retrieveGroupAccount(centerId);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Center
     *
     * Retrieves a Center  Example Requests:    centers/1    centers/1?associations&#x3D;groupMembers
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveOneTest() throws ApiException {
        Long centerId = null;
        Boolean staffInSelectedOfficeOnly = null;
        GetCentersCenterIdResponse response = api.retrieveOne(centerId, staffInSelectedOfficeOnly);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Center Template
     *
     * Retrieves a Center Template  Example Requests:    centers/template    centers/template?officeId&#x3D;2
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveTemplateTest() throws ApiException {
        String command = null;
        Long officeId = null;
        Boolean staffInSelectedOfficeOnly = null;
        GetCentersTemplateResponse response = api.retrieveTemplate(command, officeId, staffInSelectedOfficeOnly);

        // TODO: test validations
    }
    
    /**
     * Update a Center
     *
     * Updates a Center
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTest() throws ApiException {
        Long centerId = null;
        PutCentersCenterIdRequest body = null;
        PutCentersCenterIdResponse response = api.update(centerId, body);

        // TODO: test validations
    }
    
}
