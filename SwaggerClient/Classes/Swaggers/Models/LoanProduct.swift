//
// LoanProduct.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct LoanProduct: Codable {

    public enum InterestPeriodFrequencyType: String, Codable { 
        case days = "DAYS"
        case weeks = "WEEKS"
        case months = "MONTHS"
        case years = "YEARS"
        case wholeTerm = "WHOLE_TERM"
        case invalid = "INVALID"
    }
    public var _id: Int64?
    public var shortName: String?
    public var loanProductRelatedDetail: LoanProductRelatedDetail?
    public var includeInBorrowerCycle: Bool?
    public var startDate: Date?
    public var closeDate: Date?
    public var externalId: String?
    public var minimumDaysBetweenDisbursalAndFirstRepayment: Int?
    public var productInterestRecalculationDetails: LoanProductInterestRecalculationDetails?
    public var loanProductGuaranteeDetails: LoanProductGuaranteeDetails?
    public var principalThresholdForLastInstallment: Double?
    public var installmentAmountInMultiplesOf: Int?
    public var floatingRates: LoanProductFloatingRates?
    public var currency: MonetaryCurrency?
    public var interestRecalculationEnabled: Bool?
    public var equalAmortization: Bool?
    public var nominalInterestRatePerPeriod: Double?
    public var linkedToFloatingInterestRate: Bool?
    public var repaymentStrategy: LoanTransactionProcessingStrategy?
    public var accountingType: Int?
    public var loanProductCharges: [Charge]?
    public var loanProductConfigurableAttributes: LoanProductConfigurableAttributes?
    public var interestPeriodFrequencyType: InterestPeriodFrequencyType?
    public var numberOfRepayments: Int?
    public var arrearsBasedOnOriginalSchedule: Bool?
    public var accountingDisabled: Bool?
    public var cashBasedAccountingEnabled: Bool?
    public var accrualBasedAccountingEnabled: Bool?
    public var upfrontAccrualAccountingEnabled: Bool?
    public var periodicAccrualAccountingEnabled: Bool?
    public var principalAmount: Money?
    public var minPrincipalAmount: Money?
    public var maxPrincipalAmount: Money?
    public var minNominalInterestRatePerPeriod: Double?
    public var maxNominalInterestRatePerPeriod: Double?
    public var minNumberOfRepayments: Int?
    public var maxNumberOfRepayments: Int?
    public var multiDisburseLoan: Bool?
    public var holdGuaranteeFundsEnabled: Bool?
    public var new: Bool?

    public init(_id: Int64?, shortName: String?, loanProductRelatedDetail: LoanProductRelatedDetail?, includeInBorrowerCycle: Bool?, startDate: Date?, closeDate: Date?, externalId: String?, minimumDaysBetweenDisbursalAndFirstRepayment: Int?, productInterestRecalculationDetails: LoanProductInterestRecalculationDetails?, loanProductGuaranteeDetails: LoanProductGuaranteeDetails?, principalThresholdForLastInstallment: Double?, installmentAmountInMultiplesOf: Int?, floatingRates: LoanProductFloatingRates?, currency: MonetaryCurrency?, interestRecalculationEnabled: Bool?, equalAmortization: Bool?, nominalInterestRatePerPeriod: Double?, linkedToFloatingInterestRate: Bool?, repaymentStrategy: LoanTransactionProcessingStrategy?, accountingType: Int?, loanProductCharges: [Charge]?, loanProductConfigurableAttributes: LoanProductConfigurableAttributes?, interestPeriodFrequencyType: InterestPeriodFrequencyType?, numberOfRepayments: Int?, arrearsBasedOnOriginalSchedule: Bool?, accountingDisabled: Bool?, cashBasedAccountingEnabled: Bool?, accrualBasedAccountingEnabled: Bool?, upfrontAccrualAccountingEnabled: Bool?, periodicAccrualAccountingEnabled: Bool?, principalAmount: Money?, minPrincipalAmount: Money?, maxPrincipalAmount: Money?, minNominalInterestRatePerPeriod: Double?, maxNominalInterestRatePerPeriod: Double?, minNumberOfRepayments: Int?, maxNumberOfRepayments: Int?, multiDisburseLoan: Bool?, holdGuaranteeFundsEnabled: Bool?, new: Bool?) {
        self._id = _id
        self.shortName = shortName
        self.loanProductRelatedDetail = loanProductRelatedDetail
        self.includeInBorrowerCycle = includeInBorrowerCycle
        self.startDate = startDate
        self.closeDate = closeDate
        self.externalId = externalId
        self.minimumDaysBetweenDisbursalAndFirstRepayment = minimumDaysBetweenDisbursalAndFirstRepayment
        self.productInterestRecalculationDetails = productInterestRecalculationDetails
        self.loanProductGuaranteeDetails = loanProductGuaranteeDetails
        self.principalThresholdForLastInstallment = principalThresholdForLastInstallment
        self.installmentAmountInMultiplesOf = installmentAmountInMultiplesOf
        self.floatingRates = floatingRates
        self.currency = currency
        self.interestRecalculationEnabled = interestRecalculationEnabled
        self.equalAmortization = equalAmortization
        self.nominalInterestRatePerPeriod = nominalInterestRatePerPeriod
        self.linkedToFloatingInterestRate = linkedToFloatingInterestRate
        self.repaymentStrategy = repaymentStrategy
        self.accountingType = accountingType
        self.loanProductCharges = loanProductCharges
        self.loanProductConfigurableAttributes = loanProductConfigurableAttributes
        self.interestPeriodFrequencyType = interestPeriodFrequencyType
        self.numberOfRepayments = numberOfRepayments
        self.arrearsBasedOnOriginalSchedule = arrearsBasedOnOriginalSchedule
        self.accountingDisabled = accountingDisabled
        self.cashBasedAccountingEnabled = cashBasedAccountingEnabled
        self.accrualBasedAccountingEnabled = accrualBasedAccountingEnabled
        self.upfrontAccrualAccountingEnabled = upfrontAccrualAccountingEnabled
        self.periodicAccrualAccountingEnabled = periodicAccrualAccountingEnabled
        self.principalAmount = principalAmount
        self.minPrincipalAmount = minPrincipalAmount
        self.maxPrincipalAmount = maxPrincipalAmount
        self.minNominalInterestRatePerPeriod = minNominalInterestRatePerPeriod
        self.maxNominalInterestRatePerPeriod = maxNominalInterestRatePerPeriod
        self.minNumberOfRepayments = minNumberOfRepayments
        self.maxNumberOfRepayments = maxNumberOfRepayments
        self.multiDisburseLoan = multiDisburseLoan
        self.holdGuaranteeFundsEnabled = holdGuaranteeFundsEnabled
        self.new = new
    }

    public enum CodingKeys: String, CodingKey { 
        case _id = "id"
        case shortName
        case loanProductRelatedDetail
        case includeInBorrowerCycle
        case startDate
        case closeDate
        case externalId
        case minimumDaysBetweenDisbursalAndFirstRepayment
        case productInterestRecalculationDetails
        case loanProductGuaranteeDetails
        case principalThresholdForLastInstallment
        case installmentAmountInMultiplesOf
        case floatingRates
        case currency
        case interestRecalculationEnabled
        case equalAmortization
        case nominalInterestRatePerPeriod
        case linkedToFloatingInterestRate
        case repaymentStrategy
        case accountingType
        case loanProductCharges
        case loanProductConfigurableAttributes
        case interestPeriodFrequencyType
        case numberOfRepayments
        case arrearsBasedOnOriginalSchedule
        case accountingDisabled
        case cashBasedAccountingEnabled
        case accrualBasedAccountingEnabled
        case upfrontAccrualAccountingEnabled
        case periodicAccrualAccountingEnabled
        case principalAmount
        case minPrincipalAmount
        case maxPrincipalAmount
        case minNominalInterestRatePerPeriod
        case maxNominalInterestRatePerPeriod
        case minNumberOfRepayments
        case maxNumberOfRepayments
        case multiDisburseLoan
        case holdGuaranteeFundsEnabled
        case new
    }


}

